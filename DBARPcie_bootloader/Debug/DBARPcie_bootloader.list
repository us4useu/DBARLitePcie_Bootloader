
DBARPcie_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105b0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08010880  08010880  00020880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d64  08010d64  00020d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d6c  08010d6c  00020d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010d70  08010d70  00020d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000144  24000000  08010d74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001348  24000144  08010eb8  00030144  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  2400148c  08010eb8  0003148c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026799  00000000  00000000  00030172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004871  00000000  00000000  0005690b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001cc0  00000000  00000000  0005b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001b00  00000000  00000000  0005ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037f6e  00000000  00000000  0005e940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000282b3  00000000  00000000  000968ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153add  00000000  00000000  000beb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021263e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000085a8  00000000  00000000  00212690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000144 	.word	0x24000144
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010868 	.word	0x08010868

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000148 	.word	0x24000148
 800030c:	08010868 	.word	0x08010868

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <ConfigMemory_Download>:
 *      Author: JRozb
 */

#include "confmem.h"

void ConfigMemory_Download(ConfMem* conf) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

	uint8_t* destAddress = (uint8_t*)conf;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
	memcpy(destAddress, (uint8_t*)CONF_MEM_BASEADDR, (size_t)CONF_MEM_SZ);
 80006f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f4:	4903      	ldr	r1, [pc, #12]	; (8000704 <ConfigMemory_Download+0x20>)
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f00e fb4a 	bl	800ed90 <memcpy>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080e0000 	.word	0x080e0000

08000708 <lmk03328_init>:
	0x00, 0x00, 0x00, 0x08, 0x19, 0x00, 0x07, 0x05, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x19, 0x00, 0x07, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x40, 0x24, 0x00
};

void lmk03328_init(I2C_HandleTypeDef *hi2c){
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	lmk_hi2c = *hi2c;
 8000710:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <lmk03328_init+0x48>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4610      	mov	r0, r2
 8000716:	4619      	mov	r1, r3
 8000718:	2354      	movs	r3, #84	; 0x54
 800071a:	461a      	mov	r2, r3
 800071c:	f00e fb38 	bl	800ed90 <memcpy>

	for(uint8_t n = 0; n < LMK_REGS_SZ; n++) {
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]
 8000724:	e00c      	b.n	8000740 <lmk03328_init+0x38>
		lmk03328_write(n, lmk_conf[n]);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <lmk03328_init+0x4c>)
 800072a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f80f 	bl	8000758 <lmk03328_write>
	for(uint8_t n = 0; n < LMK_REGS_SZ; n++) {
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	3301      	adds	r3, #1
 800073e:	73fb      	strb	r3, [r7, #15]
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2bab      	cmp	r3, #171	; 0xab
 8000744:	d9ef      	bls.n	8000726 <lmk03328_init+0x1e>
	}
}
 8000746:	bf00      	nop
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	24000160 	.word	0x24000160
 8000754:	08010a20 	.word	0x08010a20

08000758 <lmk03328_write>:

void lmk03328_write(uint8_t reg, uint8_t value){
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af02      	add	r7, sp, #8
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef st;
	uint8_t tx_buf[2] = {reg, value};
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	733b      	strb	r3, [r7, #12]
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	737b      	strb	r3, [r7, #13]
	st = HAL_I2C_Master_Transmit(&lmk_hi2c, LMK_ADDR<<1, tx_buf, 2, 1000);
 8000770:	f107 020c 	add.w	r2, r7, #12
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2302      	movs	r3, #2
 800077c:	21a8      	movs	r1, #168	; 0xa8
 800077e:	4807      	ldr	r0, [pc, #28]	; (800079c <lmk03328_write+0x44>)
 8000780:	f002 fb60 	bl	8002e44 <HAL_I2C_Master_Transmit>
 8000784:	4603      	mov	r3, r0
 8000786:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK) {
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <lmk03328_write+0x3c>
		printf("LMK03328 I2C Write Error!\n");
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <lmk03328_write+0x48>)
 8000790:	f00e fbb0 	bl	800eef4 <puts>
	}
}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000160 	.word	0x24000160
 80007a0:	08010880 	.word	0x08010880

080007a4 <lmk03328_read>:

uint8_t lmk03328_read(uint8_t reg) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	uint8_t rx;
	HAL_StatusTypeDef st;
	st = HAL_I2C_Master_Transmit(&lmk_hi2c, LMK_ADDR<<1, &reg, 1, 1000);
 80007ae:	1dfa      	adds	r2, r7, #7
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	21a8      	movs	r1, #168	; 0xa8
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <lmk03328_read+0x50>)
 80007bc:	f002 fb42 	bl	8002e44 <HAL_I2C_Master_Transmit>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
	st = HAL_I2C_Master_Receive(&lmk_hi2c, LMK_ADDR<<1, &rx, 1, 1000);
 80007c4:	f107 020e 	add.w	r2, r7, #14
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	21a8      	movs	r1, #168	; 0xa8
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <lmk03328_read+0x50>)
 80007d4:	f002 fc2a 	bl	800302c <HAL_I2C_Master_Receive>
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]
	if(st != HAL_OK) {
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d002      	beq.n	80007e8 <lmk03328_read+0x44>
		printf("LMK03328 I2C Read Error!\n");
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <lmk03328_read+0x54>)
 80007e4:	f00e fb86 	bl	800eef4 <puts>
	}
	return rx;
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	24000160 	.word	0x24000160
 80007f8:	0801089c 	.word	0x0801089c

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0c4      	sub	sp, #272	; 0x110
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000802:	f001 fc8f 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000806:	f000 f8a9 	bl	800095c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800080a:	f000 f919 	bl	8000a40 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 fce1 	bl	80011d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000812:	f000 f94d 	bl	8000ab0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000816:	f000 f98b 	bl	8000b30 <MX_I2C2_Init>
  MX_I2C3_Init();
 800081a:	f000 f9c9 	bl	8000bb0 <MX_I2C3_Init>
  MX_I2C4_Init();
 800081e:	f000 fa07 	bl	8000c30 <MX_I2C4_Init>
  MX_I2C5_Init();
 8000822:	f000 fa45 	bl	8000cb0 <MX_I2C5_Init>
  MX_TIM1_Init();
 8000826:	f000 fa83 	bl	8000d30 <MX_TIM1_Init>
  MX_TIM3_Init();
 800082a:	f000 fb77 	bl	8000f1c <MX_TIM3_Init>
  MX_TIM5_Init();
 800082e:	f000 fbf3 	bl	8001018 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000832:	f000 fc79 	bl	8001128 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000836:	f000 fb15 	bl	8000e64 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800083a:	f00d fdd9 	bl	800e3f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  printf("DBARLitePcie Bootloader\n");
 800083e:	483b      	ldr	r0, [pc, #236]	; (800092c <main+0x130>)
 8000840:	f00e fb58 	bl	800eef4 <puts>
  printf("Build ");
 8000844:	483a      	ldr	r0, [pc, #232]	; (8000930 <main+0x134>)
 8000846:	f00e fab9 	bl	800edbc <iprintf>
  printf(__TIMESTAMP__);
 800084a:	483a      	ldr	r0, [pc, #232]	; (8000934 <main+0x138>)
 800084c:	f00e fab6 	bl	800edbc <iprintf>
  printf("\n");
 8000850:	200a      	movs	r0, #10
 8000852:	f00e facb 	bl	800edec <putchar>

  ConfMem conf;
  ConfigMemory_Download(&conf);
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff43 	bl	80006e4 <ConfigMemory_Download>

  getBuildDate(&(regs.info.buildYear), &(regs.info.buildMonth), &(regs.info.buildDay));
 800085e:	4a36      	ldr	r2, [pc, #216]	; (8000938 <main+0x13c>)
 8000860:	4936      	ldr	r1, [pc, #216]	; (800093c <main+0x140>)
 8000862:	4837      	ldr	r0, [pc, #220]	; (8000940 <main+0x144>)
 8000864:	f000 fe98 	bl	8001598 <getBuildDate>
  getBuildTime(&(regs.info.buildHour), &(regs.info.buildMin), &(regs.info.buildSec));
 8000868:	4a36      	ldr	r2, [pc, #216]	; (8000944 <main+0x148>)
 800086a:	4937      	ldr	r1, [pc, #220]	; (8000948 <main+0x14c>)
 800086c:	4837      	ldr	r0, [pc, #220]	; (800094c <main+0x150>)
 800086e:	f000 fed1 	bl	8001614 <getBuildTime>

  regs.info.fwVersion = 0xB1000000;
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <main+0x154>)
 8000874:	f04f 4231 	mov.w	r2, #2969567232	; 0xb1000000
 8000878:	605a      	str	r2, [r3, #4]
  regs.info.jumpCode = 0xAA;
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <main+0x154>)
 800087c:	22aa      	movs	r2, #170	; 0xaa
 800087e:	73da      	strb	r2, [r3, #15]
  regs.info.hwRevision = conf.hwRevision;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	3303      	adds	r3, #3
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <main+0x154>)
 8000888:	739a      	strb	r2, [r3, #14]

  regs.info.serial[0] = conf.serial[0];
 800088a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000892:	781a      	ldrb	r2, [r3, #0]
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <main+0x154>)
 8000896:	705a      	strb	r2, [r3, #1]
  regs.info.serial[1] = conf.serial[1];
 8000898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800089c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008a0:	785a      	ldrb	r2, [r3, #1]
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <main+0x154>)
 80008a4:	709a      	strb	r2, [r3, #2]
  regs.info.serial[2] = conf.serial[2];
 80008a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80008ae:	789a      	ldrb	r2, [r3, #2]
 80008b0:	4b27      	ldr	r3, [pc, #156]	; (8000950 <main+0x154>)
 80008b2:	70da      	strb	r2, [r3, #3]

  uint8_t confMemPtr = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
  regs.config.AddrOffset = confMemPtr;
 80008ba:	4a25      	ldr	r2, [pc, #148]	; (8000950 <main+0x154>)
 80008bc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80008c0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
  regs.config.Control = 0;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <main+0x154>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  uint8_t* srcAddress = (uint8_t*)&conf + confMemPtr;
 80008cc:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80008d0:	1d3a      	adds	r2, r7, #4
 80008d2:	4413      	add	r3, r2
 80008d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  regs.config.Value = *srcAddress;
 80008d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <main+0x154>)
 80008e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  HAL_Delay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f001 fcaf 	bl	8002248 <HAL_Delay>

  lmk03328_init(&hi2c3);
 80008ea:	481a      	ldr	r0, [pc, #104]	; (8000954 <main+0x158>)
 80008ec:	f7ff ff0c 	bl	8000708 <lmk03328_init>

  uint8_t rx;
  for(uint8_t n = 0; n < LMK_REGS_SZ; n++) {
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80008f6:	e014      	b.n	8000922 <main+0x126>
	  rx = lmk03328_read(n);
 80008f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff51 	bl	80007a4 <lmk03328_read>
 8000902:	4603      	mov	r3, r0
 8000904:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	  printf("0x%02x 0x%02x\n",n, rx);
 8000908:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800090c:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8000910:	4619      	mov	r1, r3
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <main+0x15c>)
 8000914:	f00e fa52 	bl	800edbc <iprintf>
  for(uint8_t n = 0; n < LMK_REGS_SZ; n++) {
 8000918:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800091c:	3301      	adds	r3, #1
 800091e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000922:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000926:	2bab      	cmp	r3, #171	; 0xab
 8000928:	d9e6      	bls.n	80008f8 <main+0xfc>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092a:	e7fe      	b.n	800092a <main+0x12e>
 800092c:	080108b8 	.word	0x080108b8
 8000930:	080108d0 	.word	0x080108d0
 8000934:	080108d8 	.word	0x080108d8
 8000938:	24000526 	.word	0x24000526
 800093c:	24000525 	.word	0x24000525
 8000940:	24000524 	.word	0x24000524
 8000944:	24000529 	.word	0x24000529
 8000948:	24000528 	.word	0x24000528
 800094c:	24000527 	.word	0x24000527
 8000950:	2400051c 	.word	0x2400051c
 8000954:	2400025c 	.word	0x2400025c
 8000958:	080108f4 	.word	0x080108f4

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09c      	sub	sp, #112	; 0x70
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	224c      	movs	r2, #76	; 0x4c
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00e fa1e 	bl	800edac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2220      	movs	r2, #32
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f00e fa18 	bl	800edac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800097c:	2004      	movs	r0, #4
 800097e:	f005 f887 	bl	8005a90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <SystemClock_Config+0xe0>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <SystemClock_Config+0xe0>)
 8000990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000994:	6193      	str	r3, [r2, #24]
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <SystemClock_Config+0xe0>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a2:	bf00      	nop
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <SystemClock_Config+0xe0>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b0:	d1f8      	bne.n	80009a4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009b2:	2321      	movs	r3, #33	; 0x21
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009bc:	2301      	movs	r3, #1
 80009be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009c8:	2305      	movs	r3, #5
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 80;
 80009cc:	2350      	movs	r3, #80	; 0x50
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 80;
 80009d4:	2350      	movs	r3, #80	; 0x50
 80009d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009dc:	2308      	movs	r3, #8
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 f8b9 	bl	8005b64 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009f8:	f000 fe34 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	233f      	movs	r3, #63	; 0x3f
 80009fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2303      	movs	r3, #3
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a0c:	2340      	movs	r3, #64	; 0x40
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a10:	2340      	movs	r3, #64	; 0x40
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2101      	movs	r1, #1
 8000a22:	4618      	mov	r0, r3
 8000a24:	f005 fc78 	bl	8006318 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000a2e:	f000 fe19 	bl	8001664 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	; 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024800 	.word	0x58024800

08000a40 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ae      	sub	sp, #184	; 0xb8
 8000a44:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a46:	463b      	mov	r3, r7
 8000a48:	22b8      	movs	r2, #184	; 0xb8
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00e f9ad 	bl	800edac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4|RCC_PERIPHCLK_I2C2
 8000a52:	f04f 021a 	mov.w	r2, #26
 8000a56:	f04f 0300 	mov.w	r3, #0
 8000a5a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_I2C5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 8000a5e:	2319      	movs	r3, #25
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 200;
 8000a62:	23c8      	movs	r3, #200	; 0xc8
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 8;
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 8000a80:	2302      	movs	r3, #2
 8000a82:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_PLL3;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PLL3;
 8000a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 ffca 	bl	8006a30 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <PeriphCommonClock_Config+0x66>
  {
    Error_Handler();
 8000aa2:	f000 fddf 	bl	8001664 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	37b8      	adds	r7, #184	; 0xb8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <MX_I2C1_Init+0x78>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <MX_I2C1_Init+0x7c>)
 8000abe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ace:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 34;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ad6:	2222      	movs	r2, #34	; 0x22
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000aee:	f002 f919 	bl	8002d24 <HAL_I2C_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 fdb4 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000b00:	f003 fc9c 	bl	800443c <HAL_I2CEx_ConfigAnalogFilter>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b0a:	f000 fdab 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x74>)
 8000b12:	f003 fcde 	bl	80044d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b1c:	f000 fda2 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	240001b4 	.word	0x240001b4
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	00401959 	.word	0x00401959

08000b30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <MX_I2C2_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_I2C2_Init+0x7c>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 32;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b42:	2220      	movs	r2, #32
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 34;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b56:	2222      	movs	r2, #34	; 0x22
 8000b58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b6c:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b6e:	f002 f8d9 	bl	8002d24 <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b78:	f000 fd74 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b80:	f003 fc5c 	bl	800443c <HAL_I2CEx_ConfigAnalogFilter>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b8a:	f000 fd6b 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_I2C2_Init+0x74>)
 8000b92:	f003 fc9e 	bl	80044d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f000 fd62 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000208 	.word	0x24000208
 8000ba8:	40005800 	.word	0x40005800
 8000bac:	00401959 	.word	0x00401959

08000bb0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <MX_I2C3_Init+0x78>)
 8000bb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00401959;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <MX_I2C3_Init+0x7c>)
 8000bbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bec:	f002 f89a 	bl	8002d24 <HAL_I2C_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000bf6:	f000 fd35 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000bfe:	f003 fc1d 	bl	800443c <HAL_I2CEx_ConfigAnalogFilter>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f000 fd2c 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_I2C3_Init+0x74>)
 8000c10:	f003 fc5f 	bl	80044d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 fd23 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2400025c 	.word	0x2400025c
 8000c28:	40005c00 	.word	0x40005c00
 8000c2c:	00401959 	.word	0x00401959

08000c30 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <MX_I2C4_Init+0x78>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c3c:	4a1b      	ldr	r2, [pc, #108]	; (8000cac <MX_I2C4_Init+0x7c>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 32;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c6c:	f002 f85a 	bl	8002d24 <HAL_I2C_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000c76:	f000 fcf5 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c7e:	f003 fbdd 	bl	800443c <HAL_I2CEx_ConfigAnalogFilter>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f000 fcec 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_I2C4_Init+0x74>)
 8000c90:	f003 fc1f 	bl	80044d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 fce3 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240002b0 	.word	0x240002b0
 8000ca8:	58001c00 	.word	0x58001c00
 8000cac:	00c0eaff 	.word	0x00c0eaff

08000cb0 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_I2C5_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x00C0EAFF;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_I2C5_Init+0x7c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 32;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cc2:	2220      	movs	r2, #32
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cec:	f002 f81a 	bl	8002d24 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 8000cf6:	f000 fcb5 	bl	8001664 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000cfe:	f003 fb9d 	bl	800443c <HAL_I2CEx_ConfigAnalogFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8000d08:	f000 fcac 	bl	8001664 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_I2C5_Init+0x74>)
 8000d10:	f003 fbdf 	bl	80044d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fca3 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000304 	.word	0x24000304
 8000d28:	40006400 	.word	0x40006400
 8000d2c:	00c0eaff 	.word	0x00c0eaff

08000d30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b098      	sub	sp, #96	; 0x60
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00e f825 	bl	800edac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d62:	4b3e      	ldr	r3, [pc, #248]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d64:	4a3e      	ldr	r2, [pc, #248]	; (8000e60 <MX_TIM1_Init+0x130>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000d68:	4b3c      	ldr	r3, [pc, #240]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d6a:	2209      	movs	r2, #9
 8000d6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000d74:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d76:	22c7      	movs	r2, #199	; 0xc7
 8000d78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d80:	4b36      	ldr	r3, [pc, #216]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b35      	ldr	r3, [pc, #212]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d8c:	4833      	ldr	r0, [pc, #204]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000d8e:	f007 fc68 	bl	8008662 <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000d98:	f000 fc64 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da0:	2300      	movs	r3, #0
 8000da2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dac:	4619      	mov	r1, r3
 8000dae:	482b      	ldr	r0, [pc, #172]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000db0:	f008 fad4 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000dba:	f000 fc53 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dbe:	2360      	movs	r3, #96	; 0x60
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 71;
 8000dc2:	2347      	movs	r3, #71	; 0x47
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000de4:	f007 fc94 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dee:	f000 fc39 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000df6:	2208      	movs	r2, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000dfc:	f007 fc88 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000e06:	f000 fc2d 	bl	8001664 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000e40:	f008 fb28 	bl	8009494 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000e4a:	f000 fc0b 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM1_Init+0x12c>)
 8000e50:	f000 fe70 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3760      	adds	r7, #96	; 0x60
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000358 	.word	0x24000358
 8000e60:	40010000 	.word	0x40010000

08000e64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000e92:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000eb2:	4819      	ldr	r0, [pc, #100]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000eb4:	f007 fbd5 	bl	8008662 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000ebe:	f000 fbd1 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4811      	ldr	r0, [pc, #68]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000ed2:	f008 fa43 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f000 fbc2 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee0:	2360      	movs	r3, #96	; 0x60
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 499;
 8000ee4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	220c      	movs	r2, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000efa:	f007 fc09 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000f04:	f000 fbae 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <MX_TIM2_Init+0xb4>)
 8000f0a:	f000 fe13 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	240003a4 	.word	0x240003a4

08000f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	; 0x38
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f50:	4a30      	ldr	r2, [pc, #192]	; (8001014 <MX_TIM3_Init+0xf8>)
 8000f52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f74:	4826      	ldr	r0, [pc, #152]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f76:	f007 fb1d 	bl	80085b4 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f80:	f000 fb70 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  sClockSourceConfig.ClockFilter = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481c      	ldr	r0, [pc, #112]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000f9e:	f007 fccb 	bl	8008938 <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f000 fb5c 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fac:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000fae:	f007 fb58 	bl	8008662 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000fb8:	f000 fb54 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000fcc:	f008 f9c6 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000fd6:	f000 fb45 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	; 0x60
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM3_Init+0xf4>)
 8000ff2:	f007 fb8d 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000ffc:	f000 fb32 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM3_Init+0xf4>)
 8001002:	f000 fd97 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240003f0 	.word	0x240003f0
 8001014:	40000400 	.word	0x40000400

08001018 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <MX_TIM5_Init+0x108>)
 800104c:	4a35      	ldr	r2, [pc, #212]	; (8001124 <MX_TIM5_Init+0x10c>)
 800104e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001050:	4b33      	ldr	r3, [pc, #204]	; (8001120 <MX_TIM5_Init+0x108>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_TIM5_Init+0x108>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MX_TIM5_Init+0x108>)
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_TIM5_Init+0x108>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <MX_TIM5_Init+0x108>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001070:	482b      	ldr	r0, [pc, #172]	; (8001120 <MX_TIM5_Init+0x108>)
 8001072:	f007 fa9f 	bl	80085b4 <HAL_TIM_Base_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800107c:	f000 faf2 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  sClockSourceConfig.ClockFilter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	4619      	mov	r1, r3
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <MX_TIM5_Init+0x108>)
 800109a:	f007 fc4d 	bl	8008938 <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80010a4:	f000 fade 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80010a8:	481d      	ldr	r0, [pc, #116]	; (8001120 <MX_TIM5_Init+0x108>)
 80010aa:	f007 fada 	bl	8008662 <HAL_TIM_PWM_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80010b4:	f000 fad6 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4816      	ldr	r0, [pc, #88]	; (8001120 <MX_TIM5_Init+0x108>)
 80010c8:	f008 f948 	bl	800935c <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 80010d2:	f000 fac7 	bl	8001664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010d6:	2360      	movs	r3, #96	; 0x60
 80010d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_TIM5_Init+0x108>)
 80010ee:	f007 fb0f 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM5_Init+0xe4>
  {
    Error_Handler();
 80010f8:	f000 fab4 	bl	8001664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	2204      	movs	r2, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM5_Init+0x108>)
 8001104:	f007 fb04 	bl	8008710 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM5_Init+0xfa>
  {
    Error_Handler();
 800110e:	f000 faa9 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <MX_TIM5_Init+0x108>)
 8001114:	f000 fd0e 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 8001118:	bf00      	nop
 800111a:	3738      	adds	r7, #56	; 0x38
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	2400043c 	.word	0x2400043c
 8001124:	40000c00 	.word	0x40000c00

08001128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800112e:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <MX_USART2_UART_Init+0xa8>)
 8001130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800114e:	2208      	movs	r2, #8
 8001150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001152:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001158:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800115a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800115e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800116e:	2230      	movs	r2, #48	; 0x30
 8001170:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001174:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001178:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 800117c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001180:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001182:	4812      	ldr	r0, [pc, #72]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001184:	f008 fa26 	bl	80095d4 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800118e:	f000 fa69 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 8001196:	f009 fbba 	bl	800a90e <HAL_UARTEx_SetTxFifoThreshold>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fa60 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a4:	2100      	movs	r1, #0
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 80011a8:	f009 fbef 	bl	800a98a <HAL_UARTEx_SetRxFifoThreshold>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80011b2:	f000 fa57 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0xa4>)
 80011b8:	f009 fb70 	bl	800a89c <HAL_UARTEx_DisableFifoMode>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 80011c2:	f000 fa4f 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000488 	.word	0x24000488
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	; 0x38
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ea:	4b94      	ldr	r3, [pc, #592]	; (800143c <MX_GPIO_Init+0x268>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	4a92      	ldr	r2, [pc, #584]	; (800143c <MX_GPIO_Init+0x268>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fa:	4b90      	ldr	r3, [pc, #576]	; (800143c <MX_GPIO_Init+0x268>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b8c      	ldr	r3, [pc, #560]	; (800143c <MX_GPIO_Init+0x268>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a8b      	ldr	r2, [pc, #556]	; (800143c <MX_GPIO_Init+0x268>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b88      	ldr	r3, [pc, #544]	; (800143c <MX_GPIO_Init+0x268>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <MX_GPIO_Init+0x268>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a83      	ldr	r2, [pc, #524]	; (800143c <MX_GPIO_Init+0x268>)
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b81      	ldr	r3, [pc, #516]	; (800143c <MX_GPIO_Init+0x268>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001244:	4b7d      	ldr	r3, [pc, #500]	; (800143c <MX_GPIO_Init+0x268>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a7c      	ldr	r2, [pc, #496]	; (800143c <MX_GPIO_Init+0x268>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b79      	ldr	r3, [pc, #484]	; (800143c <MX_GPIO_Init+0x268>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	4b76      	ldr	r3, [pc, #472]	; (800143c <MX_GPIO_Init+0x268>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a74      	ldr	r2, [pc, #464]	; (800143c <MX_GPIO_Init+0x268>)
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b72      	ldr	r3, [pc, #456]	; (800143c <MX_GPIO_Init+0x268>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001280:	4b6e      	ldr	r3, [pc, #440]	; (800143c <MX_GPIO_Init+0x268>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	4a6d      	ldr	r2, [pc, #436]	; (800143c <MX_GPIO_Init+0x268>)
 8001288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <MX_GPIO_Init+0x268>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <MX_GPIO_Init+0x268>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	4a65      	ldr	r2, [pc, #404]	; (800143c <MX_GPIO_Init+0x268>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <MX_GPIO_Init+0x268>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012bc:	4b5f      	ldr	r3, [pc, #380]	; (800143c <MX_GPIO_Init+0x268>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <MX_GPIO_Init+0x268>)
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012cc:	4b5b      	ldr	r3, [pc, #364]	; (800143c <MX_GPIO_Init+0x268>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d2:	f003 0320 	and.w	r3, r3, #32
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARRIUS_1_PCIE_PERST_N_OD_Pin|ARRIUS_0_PMBUS_CNTRL_N_Pin|ARRIUS_HV_CTRL_Pin|POWER_LED_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f248 0158 	movw	r1, #32856	; 0x8058
 80012e0:	4857      	ldr	r0, [pc, #348]	; (8001440 <MX_GPIO_Init+0x26c>)
 80012e2:	f001 fce1 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, CLK_PDN_Pin|SFF_0_PERST_Pin|SFF_MGTPWR_EN_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 80012ec:	4855      	ldr	r0, [pc, #340]	; (8001444 <MX_GPIO_Init+0x270>)
 80012ee:	f001 fcdb 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SFF_0_CBLPRSNT__Pin|SFF_0_CADDR_Pin|TRIGGER_ERC_ADDR_CS_Pin|SFF_1_CINT__Pin
 80012f2:	2200      	movs	r2, #0
 80012f4:	f24d 4161 	movw	r1, #54369	; 0xd461
 80012f8:	4853      	ldr	r0, [pc, #332]	; (8001448 <MX_GPIO_Init+0x274>)
 80012fa:	f001 fcd5 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |SFF_1_CBLPRSNT__Pin|SFF_1_PERST_Pin|SFF_1_CADDR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SFF_0_CINT__Pin|ARRIUS_0_PCIE_PERST_N_OD_Pin|HV_CTRL_Pin|DS_PD_Pin
 80012fe:	2200      	movs	r2, #0
 8001300:	f24d 01a0 	movw	r1, #53408	; 0xd0a0
 8001304:	4851      	ldr	r0, [pc, #324]	; (800144c <MX_GPIO_Init+0x278>)
 8001306:	f001 fccf 	bl	8002ca8 <HAL_GPIO_WritePin>
                          |PC_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, TRIGGER_SEL_Pin|TRIGGER_OTTP_MISO_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001310:	484f      	ldr	r0, [pc, #316]	; (8001450 <MX_GPIO_Init+0x27c>)
 8001312:	f001 fcc9 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGGER_MODE_GPIO_Port, TRIGGER_MODE_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131c:	484d      	ldr	r0, [pc, #308]	; (8001454 <MX_GPIO_Init+0x280>)
 800131e:	f001 fcc3 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ARRIUS_1_PCIE_PERST_N_OD_Pin ARRIUS_0_PMBUS_CNTRL_N_Pin ARRIUS_HV_CTRL_Pin POWER_LED_Pin */
  GPIO_InitStruct.Pin = ARRIUS_1_PCIE_PERST_N_OD_Pin|ARRIUS_0_PMBUS_CNTRL_N_Pin|ARRIUS_HV_CTRL_Pin|POWER_LED_Pin;
 8001322:	f248 0358 	movw	r3, #32856	; 0x8058
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001338:	4619      	mov	r1, r3
 800133a:	4841      	ldr	r0, [pc, #260]	; (8001440 <MX_GPIO_Init+0x26c>)
 800133c:	f001 fb0c 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARRIUS_1_PMBUS_ALERT_N_Pin ARRIUS_0_PMBUS_ALERT_N_Pin */
  GPIO_InitStruct.Pin = ARRIUS_1_PMBUS_ALERT_N_Pin|ARRIUS_0_PMBUS_ALERT_N_Pin;
 8001340:	2305      	movs	r3, #5
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001344:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800134e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001352:	4619      	mov	r1, r3
 8001354:	483a      	ldr	r0, [pc, #232]	; (8001440 <MX_GPIO_Init+0x26c>)
 8001356:	f001 faff 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_PDN_Pin SFF_0_PERST_Pin SFF_MGTPWR_EN_Pin */
  GPIO_InitStruct.Pin = CLK_PDN_Pin|SFF_0_PERST_Pin|SFF_MGTPWR_EN_Pin;
 800135a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	4834      	ldr	r0, [pc, #208]	; (8001444 <MX_GPIO_Init+0x270>)
 8001374:	f001 faf0 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : SFF_0_CBLPRSNT__Pin SFF_0_CADDR_Pin TRIGGER_ERC_ADDR_CS_Pin SFF_1_CINT__Pin
                           SFF_1_CBLPRSNT__Pin SFF_1_PERST_Pin SFF_1_CADDR_Pin */
  GPIO_InitStruct.Pin = SFF_0_CBLPRSNT__Pin|SFF_0_CADDR_Pin|TRIGGER_ERC_ADDR_CS_Pin|SFF_1_CINT__Pin
 8001378:	f24d 4361 	movw	r3, #54369	; 0xd461
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SFF_1_CBLPRSNT__Pin|SFF_1_PERST_Pin|SFF_1_CADDR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	482d      	ldr	r0, [pc, #180]	; (8001448 <MX_GPIO_Init+0x274>)
 8001392:	f001 fae1 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : SFF_0_CINT__Pin ARRIUS_0_PCIE_PERST_N_OD_Pin HV_CTRL_Pin DS_PD_Pin
                           PC_LED_Pin */
  GPIO_InitStruct.Pin = SFF_0_CINT__Pin|ARRIUS_0_PCIE_PERST_N_OD_Pin|HV_CTRL_Pin|DS_PD_Pin
 8001396:	f24d 03a0 	movw	r3, #53408	; 0xd0a0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
                          |PC_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4827      	ldr	r0, [pc, #156]	; (800144c <MX_GPIO_Init+0x278>)
 80013b0:	f001 fad2 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIGGER_SEL_Pin TRIGGER_OTTP_MISO_Pin */
  GPIO_InitStruct.Pin = TRIGGER_SEL_Pin|TRIGGER_OTTP_MISO_Pin;
 80013b4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_GPIO_Init+0x27c>)
 80013ce:	f001 fac3 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_MODE_Pin */
  GPIO_InitStruct.Pin = TRIGGER_MODE_Pin;
 80013d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013dc:	2302      	movs	r3, #2
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TRIGGER_MODE_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_GPIO_Init+0x280>)
 80013ec:	f001 fab4 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 80013f0:	2304      	movs	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	4813      	ldr	r0, [pc, #76]	; (8001450 <MX_GPIO_Init+0x27c>)
 8001404:	f001 faa8 	bl	8002958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2105      	movs	r1, #5
 800140c:	2006      	movs	r0, #6
 800140e:	f001 f81a 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001412:	2006      	movs	r0, #6
 8001414:	f001 f831 	bl	800247a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2105      	movs	r1, #5
 800141c:	2008      	movs	r0, #8
 800141e:	f001 f812 	bl	8002446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001422:	2008      	movs	r0, #8
 8001424:	f001 f829 	bl	800247a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOG, CLK_PDN_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_GPIO_Init+0x270>)
 8001430:	f001 fc3a 	bl	8002ca8 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	58024400 	.word	0x58024400
 8001440:	58021000 	.word	0x58021000
 8001444:	58021800 	.word	0x58021800
 8001448:	58020c00 	.word	0x58020c00
 800144c:	58020800 	.word	0x58020800
 8001450:	58021c00 	.word	0x58021c00
 8001454:	58020000 	.word	0x58020000

08001458 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0x00FF);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	2201      	movs	r2, #1
 8001466:	4804      	ldr	r0, [pc, #16]	; (8001478 <__io_putchar+0x20>)
 8001468:	f008 f904 	bl	8009674 <HAL_UART_Transmit>
	return ch;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	24000488 	.word	0x24000488

0800147c <getMonthNumber>:

uint8_t getMonthNumber(const char* monthStr) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    if (strcmp(monthStr, "Jan") == 0) return 1;
 8001484:	4938      	ldr	r1, [pc, #224]	; (8001568 <getMonthNumber+0xec>)
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7fe ff42 	bl	8000310 <strcmp>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <getMonthNumber+0x1a>
 8001492:	2301      	movs	r3, #1
 8001494:	e063      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Feb") == 0) return 2;
 8001496:	4935      	ldr	r1, [pc, #212]	; (800156c <getMonthNumber+0xf0>)
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7fe ff39 	bl	8000310 <strcmp>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <getMonthNumber+0x2c>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e05a      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Mar") == 0) return 3;
 80014a8:	4931      	ldr	r1, [pc, #196]	; (8001570 <getMonthNumber+0xf4>)
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7fe ff30 	bl	8000310 <strcmp>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <getMonthNumber+0x3e>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e051      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Apr") == 0) return 4;
 80014ba:	492e      	ldr	r1, [pc, #184]	; (8001574 <getMonthNumber+0xf8>)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7fe ff27 	bl	8000310 <strcmp>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <getMonthNumber+0x50>
 80014c8:	2304      	movs	r3, #4
 80014ca:	e048      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "May") == 0) return 5;
 80014cc:	492a      	ldr	r1, [pc, #168]	; (8001578 <getMonthNumber+0xfc>)
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7fe ff1e 	bl	8000310 <strcmp>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <getMonthNumber+0x62>
 80014da:	2305      	movs	r3, #5
 80014dc:	e03f      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Jun") == 0) return 6;
 80014de:	4927      	ldr	r1, [pc, #156]	; (800157c <getMonthNumber+0x100>)
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7fe ff15 	bl	8000310 <strcmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <getMonthNumber+0x74>
 80014ec:	2306      	movs	r3, #6
 80014ee:	e036      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Jul") == 0) return 7;
 80014f0:	4923      	ldr	r1, [pc, #140]	; (8001580 <getMonthNumber+0x104>)
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7fe ff0c 	bl	8000310 <strcmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <getMonthNumber+0x86>
 80014fe:	2307      	movs	r3, #7
 8001500:	e02d      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Aug") == 0) return 8;
 8001502:	4920      	ldr	r1, [pc, #128]	; (8001584 <getMonthNumber+0x108>)
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7fe ff03 	bl	8000310 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <getMonthNumber+0x98>
 8001510:	2308      	movs	r3, #8
 8001512:	e024      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Sep") == 0) return 9;
 8001514:	491c      	ldr	r1, [pc, #112]	; (8001588 <getMonthNumber+0x10c>)
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe fefa 	bl	8000310 <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <getMonthNumber+0xaa>
 8001522:	2309      	movs	r3, #9
 8001524:	e01b      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Oct") == 0) return 10;
 8001526:	4919      	ldr	r1, [pc, #100]	; (800158c <getMonthNumber+0x110>)
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7fe fef1 	bl	8000310 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <getMonthNumber+0xbc>
 8001534:	230a      	movs	r3, #10
 8001536:	e012      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Nov") == 0) return 11;
 8001538:	4915      	ldr	r1, [pc, #84]	; (8001590 <getMonthNumber+0x114>)
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7fe fee8 	bl	8000310 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <getMonthNumber+0xce>
 8001546:	230b      	movs	r3, #11
 8001548:	e009      	b.n	800155e <getMonthNumber+0xe2>
    else if (strcmp(monthStr, "Dec") == 0) return 12;
 800154a:	4912      	ldr	r1, [pc, #72]	; (8001594 <getMonthNumber+0x118>)
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7fe fedf 	bl	8000310 <strcmp>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <getMonthNumber+0xe0>
 8001558:	230c      	movs	r3, #12
 800155a:	e000      	b.n	800155e <getMonthNumber+0xe2>
    else return 0;  // Invalid month
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	08010904 	.word	0x08010904
 800156c:	08010908 	.word	0x08010908
 8001570:	0801090c 	.word	0x0801090c
 8001574:	08010910 	.word	0x08010910
 8001578:	08010914 	.word	0x08010914
 800157c:	08010918 	.word	0x08010918
 8001580:	0801091c 	.word	0x0801091c
 8001584:	08010920 	.word	0x08010920
 8001588:	08010924 	.word	0x08010924
 800158c:	08010928 	.word	0x08010928
 8001590:	0801092c 	.word	0x0801092c
 8001594:	08010930 	.word	0x08010930

08001598 <getBuildDate>:

void getBuildDate(uint8_t* year8, uint8_t* month8, uint8_t* day8){
 8001598:	b580      	push	{r7, lr}
 800159a:	b08c      	sub	sp, #48	; 0x30
 800159c:	af02      	add	r7, sp, #8
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	const char* dateStr = __DATE__;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <getBuildDate+0x70>)
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
	char monthStr[4];
	int year, month, day;

	sscanf(dateStr, "%s %d %d", monthStr, &day, &year);
 80015a8:	f107 0114 	add.w	r1, r7, #20
 80015ac:	f107 021c 	add.w	r2, r7, #28
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	460b      	mov	r3, r1
 80015b8:	4914      	ldr	r1, [pc, #80]	; (800160c <getBuildDate+0x74>)
 80015ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015bc:	f00d fca2 	bl	800ef04 <siscanf>
	month = getMonthNumber(monthStr);
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff59 	bl	800147c <getMonthNumber>
 80015ca:	4603      	mov	r3, r0
 80015cc:	623b      	str	r3, [r7, #32]

	year %= 100;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <getBuildDate+0x78>)
 80015d2:	fb83 1302 	smull	r1, r3, r3, r2
 80015d6:	1159      	asrs	r1, r3, #5
 80015d8:	17d3      	asrs	r3, r2, #31
 80015da:	1acb      	subs	r3, r1, r3
 80015dc:	2164      	movs	r1, #100	; 0x64
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	61bb      	str	r3, [r7, #24]
	*year8 = (uint8_t)year;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	701a      	strb	r2, [r3, #0]
	*month8 = (uint8_t)month;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	701a      	strb	r2, [r3, #0]
	*day8 = (uint8_t)day;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	701a      	strb	r2, [r3, #0]
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08010934 	.word	0x08010934
 800160c:	08010940 	.word	0x08010940
 8001610:	51eb851f 	.word	0x51eb851f

08001614 <getBuildTime>:

void getBuildTime(uint8_t* hour8, uint8_t* min8, uint8_t* sec8){
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af02      	add	r7, sp, #8
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
	const char* timeStr = __TIME__;
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <getBuildTime+0x48>)
 8001622:	61fb      	str	r3, [r7, #28]
	int hour, minute, second;

	sscanf(timeStr, "%d:%d:%d", &hour, &minute, &second);
 8001624:	f107 0114 	add.w	r1, r7, #20
 8001628:	f107 0218 	add.w	r2, r7, #24
 800162c:	f107 0310 	add.w	r3, r7, #16
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	460b      	mov	r3, r1
 8001634:	490a      	ldr	r1, [pc, #40]	; (8001660 <getBuildTime+0x4c>)
 8001636:	69f8      	ldr	r0, [r7, #28]
 8001638:	f00d fc64 	bl	800ef04 <siscanf>

	*hour8 = (uint8_t)hour;
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]
	*min8 = (uint8_t)minute;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	701a      	strb	r2, [r3, #0]
	*sec8 = (uint8_t)second;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	701a      	strb	r2, [r3, #0]
}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	0801094c 	.word	0x0801094c
 8001660:	08010958 	.word	0x08010958

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_MspInit+0x30>)
 8001678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x30>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x30>)
 8001688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	58024400 	.word	0x58024400

080016a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b092      	sub	sp, #72	; 0x48
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4ab4      	ldr	r2, [pc, #720]	; (8001994 <HAL_I2C_MspInit+0x2f0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d13f      	bne.n	8001746 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4bb4      	ldr	r3, [pc, #720]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016cc:	4ab2      	ldr	r2, [pc, #712]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016d6:	4bb0      	ldr	r3, [pc, #704]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
 80016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80016e4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ea:	2312      	movs	r3, #18
 80016ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f6:	2304      	movs	r3, #4
 80016f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016fe:	4619      	mov	r1, r3
 8001700:	48a6      	ldr	r0, [pc, #664]	; (800199c <HAL_I2C_MspInit+0x2f8>)
 8001702:	f001 f929 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	4ba4      	ldr	r3, [pc, #656]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800170c:	4aa2      	ldr	r2, [pc, #648]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800170e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001712:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001716:	4ba0      	ldr	r3, [pc, #640]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800171c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2101      	movs	r1, #1
 8001728:	201f      	movs	r0, #31
 800172a:	f000 fe8c 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800172e:	201f      	movs	r0, #31
 8001730:	f000 fea3 	bl	800247a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2020      	movs	r0, #32
 800173a:	f000 fe84 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800173e:	2020      	movs	r0, #32
 8001740:	f000 fe9b 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C5_MspInit 1 */

  /* USER CODE END I2C5_MspInit 1 */
  }

}
 8001744:	e121      	b.n	800198a <HAL_I2C_MspInit+0x2e6>
  else if(hi2c->Instance==I2C2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a95      	ldr	r2, [pc, #596]	; (80019a0 <HAL_I2C_MspInit+0x2fc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d13e      	bne.n	80017ce <HAL_I2C_MspInit+0x12a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001750:	4b91      	ldr	r3, [pc, #580]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001756:	4a90      	ldr	r2, [pc, #576]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001760:	4b8d      	ldr	r3, [pc, #564]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800176e:	2303      	movs	r3, #3
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001772:	2312      	movs	r3, #18
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800177e:	2304      	movs	r3, #4
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001782:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001786:	4619      	mov	r1, r3
 8001788:	4886      	ldr	r0, [pc, #536]	; (80019a4 <HAL_I2C_MspInit+0x300>)
 800178a:	f001 f8e5 	bl	8002958 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800178e:	4b82      	ldr	r3, [pc, #520]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001794:	4a80      	ldr	r2, [pc, #512]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800179a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800179e:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	2021      	movs	r0, #33	; 0x21
 80017b2:	f000 fe48 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017b6:	2021      	movs	r0, #33	; 0x21
 80017b8:	f000 fe5f 	bl	800247a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2022      	movs	r0, #34	; 0x22
 80017c2:	f000 fe40 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80017c6:	2022      	movs	r0, #34	; 0x22
 80017c8:	f000 fe57 	bl	800247a <HAL_NVIC_EnableIRQ>
}
 80017cc:	e0dd      	b.n	800198a <HAL_I2C_MspInit+0x2e6>
  else if(hi2c->Instance==I2C3)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	; (80019a8 <HAL_I2C_MspInit+0x304>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d15f      	bne.n	8001898 <HAL_I2C_MspInit+0x1f4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d8:	4b6f      	ldr	r3, [pc, #444]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	4a6e      	ldr	r2, [pc, #440]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e8:	4b6b      	ldr	r3, [pc, #428]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	623b      	str	r3, [r7, #32]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fc:	4a66      	ldr	r2, [pc, #408]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001806:	4b64      	ldr	r3, [pc, #400]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181a:	2312      	movs	r3, #18
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001826:	2304      	movs	r3, #4
 8001828:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800182e:	4619      	mov	r1, r3
 8001830:	485e      	ldr	r0, [pc, #376]	; (80019ac <HAL_I2C_MspInit+0x308>)
 8001832:	f001 f891 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001848:	2304      	movs	r3, #4
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001850:	4619      	mov	r1, r3
 8001852:	4857      	ldr	r0, [pc, #348]	; (80019b0 <HAL_I2C_MspInit+0x30c>)
 8001854:	f001 f880 	bl	8002958 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800185a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185e:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800186a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2048      	movs	r0, #72	; 0x48
 800187c:	f000 fde3 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8001880:	2048      	movs	r0, #72	; 0x48
 8001882:	f000 fdfa 	bl	800247a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2049      	movs	r0, #73	; 0x49
 800188c:	f000 fddb 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8001890:	2049      	movs	r0, #73	; 0x49
 8001892:	f000 fdf2 	bl	800247a <HAL_NVIC_EnableIRQ>
}
 8001896:	e078      	b.n	800198a <HAL_I2C_MspInit+0x2e6>
  else if(hi2c->Instance==I2C4)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_I2C_MspInit+0x310>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d137      	bne.n	8001912 <HAL_I2C_MspInit+0x26e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80018c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c6:	2312      	movs	r3, #18
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018da:	4619      	mov	r1, r3
 80018dc:	4836      	ldr	r0, [pc, #216]	; (80019b8 <HAL_I2C_MspInit+0x314>)
 80018de:	f001 f83b 	bl	8002958 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018e8:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80018f2:	4b29      	ldr	r3, [pc, #164]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 80018f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 2, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2102      	movs	r1, #2
 8001904:	205f      	movs	r0, #95	; 0x5f
 8001906:	f000 fd9e 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800190a:	205f      	movs	r0, #95	; 0x5f
 800190c:	f000 fdb5 	bl	800247a <HAL_NVIC_EnableIRQ>
}
 8001910:	e03b      	b.n	800198a <HAL_I2C_MspInit+0x2e6>
  else if(hi2c->Instance==I2C5)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_I2C_MspInit+0x318>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d136      	bne.n	800198a <HAL_I2C_MspInit+0x2e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800193a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 800194c:	2304      	movs	r3, #4
 800194e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001954:	4619      	mov	r1, r3
 8001956:	4816      	ldr	r0, [pc, #88]	; (80019b0 <HAL_I2C_MspInit+0x30c>)
 8001958:	f000 fffe 	bl	8002958 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800195e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001962:	4a0d      	ldr	r2, [pc, #52]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 8001964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001968:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800196c:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <HAL_I2C_MspInit+0x2f4>)
 800196e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C5_EV_IRQn, 2, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2102      	movs	r1, #2
 800197e:	209d      	movs	r0, #157	; 0x9d
 8001980:	f000 fd61 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C5_EV_IRQn);
 8001984:	209d      	movs	r0, #157	; 0x9d
 8001986:	f000 fd78 	bl	800247a <HAL_NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3748      	adds	r7, #72	; 0x48
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40005400 	.word	0x40005400
 8001998:	58024400 	.word	0x58024400
 800199c:	58020400 	.word	0x58020400
 80019a0:	40005800 	.word	0x40005800
 80019a4:	58021400 	.word	0x58021400
 80019a8:	40005c00 	.word	0x40005c00
 80019ac:	58020000 	.word	0x58020000
 80019b0:	58020800 	.word	0x58020800
 80019b4:	58001c00 	.word	0x58001c00
 80019b8:	58021c00 	.word	0x58021c00
 80019bc:	40006400 	.word	0x40006400

080019c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_TIM_PWM_MspInit+0x68>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10f      	bne.n	80019f2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 80019d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 80019e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019f0:	e013      	b.n	8001a1a <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d10e      	bne.n	8001a1a <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 80019fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_TIM_PWM_MspInit+0x6c>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	58024400 	.word	0x58024400

08001a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	; 0x30
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_TIM_Base_MspInit+0xf0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12e      	bne.n	8001ab0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a62:	4b30      	ldr	r3, [pc, #192]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a70:	4b2c      	ldr	r3, [pc, #176]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	4a2b      	ldr	r2, [pc, #172]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a80:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PD2     ------> TIM3_ETR
    */
    GPIO_InitStruct.Pin = GCLK_TIM3_Pin;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GCLK_TIM3_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481f      	ldr	r0, [pc, #124]	; (8001b28 <HAL_TIM_Base_MspInit+0xf8>)
 8001aaa:	f000 ff55 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aae:	e032      	b.n	8001b16 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_TIM_Base_MspInit+0xfc>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12d      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ac0:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a11      	ldr	r2, [pc, #68]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GCLK_TIM5_Pin;
 8001af6:	2310      	movs	r3, #16
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b06:	2302      	movs	r3, #2
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GCLK_TIM5_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4807      	ldr	r0, [pc, #28]	; (8001b30 <HAL_TIM_Base_MspInit+0x100>)
 8001b12:	f000 ff21 	bl	8002958 <HAL_GPIO_Init>
}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	; 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40000400 	.word	0x40000400
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58020c00 	.word	0x58020c00
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	58020000 	.word	0x58020000

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_TIM_MspPostInit+0x18c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d120      	bne.n	8001b98 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	4a59      	ldr	r2, [pc, #356]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001b5e:	f043 0310 	orr.w	r3, r3, #16
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b66:	4b57      	ldr	r3, [pc, #348]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN0_PWM_Pin|FAN1_PWM_Pin;
 8001b74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	484d      	ldr	r0, [pc, #308]	; (8001cc8 <HAL_TIM_MspPostInit+0x194>)
 8001b92:	f000 fee1 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001b96:	e08e      	b.n	8001cb6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM2)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d120      	bne.n	8001be4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	483b      	ldr	r0, [pc, #236]	; (8001ccc <HAL_TIM_MspPostInit+0x198>)
 8001bde:	f000 febb 	bl	8002958 <HAL_GPIO_Init>
}
 8001be2:	e068      	b.n	8001cb6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <HAL_TIM_MspPostInit+0x19c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d11f      	bne.n	8001c2e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001bf6:	f043 0302 	orr.w	r3, r3, #2
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HV_SYNC_Pin;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HV_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4829      	ldr	r0, [pc, #164]	; (8001ccc <HAL_TIM_MspPostInit+0x198>)
 8001c28:	f000 fe96 	bl	8002958 <HAL_GPIO_Init>
}
 8001c2c:	e043      	b.n	8001cb6 <HAL_TIM_MspPostInit+0x182>
  else if(htim->Instance==TIM5)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <HAL_TIM_MspPostInit+0x1a0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d13e      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_TIM_MspPostInit+0x190>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DC3V3_SYNC_Pin;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c84:	2302      	movs	r3, #2
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DC3V3_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <HAL_TIM_MspPostInit+0x1a4>)
 8001c90:	f000 fe62 	bl	8002958 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DC12V_SYNC_Pin;
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DC12V_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480a      	ldr	r0, [pc, #40]	; (8001cdc <HAL_TIM_MspPostInit+0x1a8>)
 8001cb2:	f000 fe51 	bl	8002958 <HAL_GPIO_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	; 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58021000 	.word	0x58021000
 8001ccc:	58020400 	.word	0x58020400
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000c00 	.word	0x40000c00
 8001cd8:	58020000 	.word	0x58020000
 8001cdc:	58021c00 	.word	0x58021c00

08001ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_UART_MspInit+0x88>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12d      	bne.n	8001d5e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d08:	4a18      	ldr	r2, [pc, #96]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d26:	4a11      	ldr	r2, [pc, #68]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_UART_MspInit+0x8c>)
 8001d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d3e:	230c      	movs	r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_UART_MspInit+0x90>)
 8001d5a:	f000 fdfd 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020000 	.word	0x58020000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <NMI_Handler+0x4>

08001d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <HardFault_Handler+0x4>

08001d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler+0x4>

08001d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc0:	f000 fa22 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARRIUS_0_PMBUS_ALERT_N_Pin);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 ff84 	bl	8002cda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ARRIUS_1_PMBUS_ALERT_N_Pin);
 8001dda:	2004      	movs	r0, #4
 8001ddc:	f000 ff7d 	bl	8002cda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <I2C1_EV_IRQHandler+0x10>)
 8001dea:	f001 fa15 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	240001b4 	.word	0x240001b4

08001df8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <I2C1_ER_IRQHandler+0x10>)
 8001dfe:	f001 fa25 	bl	800324c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	240001b4 	.word	0x240001b4

08001e0c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <I2C2_EV_IRQHandler+0x10>)
 8001e12:	f001 fa01 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	24000208 	.word	0x24000208

08001e20 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <I2C2_ER_IRQHandler+0x10>)
 8001e26:	f001 fa11 	bl	800324c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	24000208 	.word	0x24000208

08001e34 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <I2C3_EV_IRQHandler+0x10>)
 8001e3a:	f001 f9ed 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2400025c 	.word	0x2400025c

08001e48 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <I2C3_ER_IRQHandler+0x10>)
 8001e4e:	f001 f9fd 	bl	800324c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2400025c 	.word	0x2400025c

08001e5c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <OTG_HS_IRQHandler+0x10>)
 8001e62:	f002 fd16 	bl	8004892 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	24000b50 	.word	0x24000b50

08001e70 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <I2C4_EV_IRQHandler+0x10>)
 8001e76:	f001 f9cf 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	240002b0 	.word	0x240002b0

08001e84 <I2C5_EV_IRQHandler>:

/**
  * @brief This function handles I2C5 event interrupt.
  */
void I2C5_EV_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C5_EV_IRQn 0 */

  /* USER CODE END I2C5_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c5);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <I2C5_EV_IRQHandler+0x10>)
 8001e8a:	f001 f9c5 	bl	8003218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C5_EV_IRQn 1 */

  /* USER CODE END I2C5_EV_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	24000304 	.word	0x24000304

08001e98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e00a      	b.n	8001ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eaa:	f3af 8000 	nop.w
 8001eae:	4601      	mov	r1, r0
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	1c5a      	adds	r2, r3, #1
 8001eb4:	60ba      	str	r2, [r7, #8]
 8001eb6:	b2ca      	uxtb	r2, r1
 8001eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbf0      	blt.n	8001eaa <_read+0x12>
  }

  return len;
 8001ec8:	687b      	ldr	r3, [r7, #4]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e009      	b.n	8001ef8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fab3 	bl	8001458 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf1      	blt.n	8001ee4 <_write+0x12>
  }
  return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_close>:

int _close(int file)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f32:	605a      	str	r2, [r3, #4]
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <_isatty>:

int _isatty(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <_sbrk+0x5c>)
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <_sbrk+0x60>)
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <_sbrk+0x64>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <_sbrk+0x64>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <_sbrk+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d207      	bcs.n	8001fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa4:	f00c feca 	bl	800ed3c <__errno>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	220c      	movs	r2, #12
 8001fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	e009      	b.n	8001fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_sbrk+0x64>)
 8001fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	24050000 	.word	0x24050000
 8001fd4:	00004000 	.word	0x00004000
 8001fd8:	2400056c 	.word	0x2400056c
 8001fdc:	24001490 	.word	0x24001490

08001fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <SystemInit+0xd0>)
 8001fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fea:	4a31      	ldr	r2, [pc, #196]	; (80020b0 <SystemInit+0xd0>)
 8001fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <SystemInit+0xd4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	2b06      	cmp	r3, #6
 8001ffe:	d807      	bhi.n	8002010 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <SystemInit+0xd4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 030f 	bic.w	r3, r3, #15
 8002008:	4a2a      	ldr	r2, [pc, #168]	; (80020b4 <SystemInit+0xd4>)
 800200a:	f043 0307 	orr.w	r3, r3, #7
 800200e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <SystemInit+0xd8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a28      	ldr	r2, [pc, #160]	; (80020b8 <SystemInit+0xd8>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <SystemInit+0xd8>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <SystemInit+0xd8>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4924      	ldr	r1, [pc, #144]	; (80020b8 <SystemInit+0xd8>)
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <SystemInit+0xdc>)
 800202a:	4013      	ands	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800202e:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <SystemInit+0xd4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <SystemInit+0xd4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 030f 	bic.w	r3, r3, #15
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <SystemInit+0xd4>)
 8002044:	f043 0307 	orr.w	r3, r3, #7
 8002048:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <SystemInit+0xd8>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <SystemInit+0xd8>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <SystemInit+0xd8>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <SystemInit+0xd8>)
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <SystemInit+0xe0>)
 8002060:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <SystemInit+0xd8>)
 8002064:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <SystemInit+0xe4>)
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <SystemInit+0xd8>)
 800206a:	4a17      	ldr	r2, [pc, #92]	; (80020c8 <SystemInit+0xe8>)
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <SystemInit+0xd8>)
 8002070:	2200      	movs	r2, #0
 8002072:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <SystemInit+0xd8>)
 8002076:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <SystemInit+0xe8>)
 8002078:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <SystemInit+0xd8>)
 800207c:	2200      	movs	r2, #0
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <SystemInit+0xd8>)
 8002082:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <SystemInit+0xe8>)
 8002084:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <SystemInit+0xd8>)
 8002088:	2200      	movs	r2, #0
 800208a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <SystemInit+0xd8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <SystemInit+0xd8>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <SystemInit+0xd8>)
 800209a:	2200      	movs	r2, #0
 800209c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <SystemInit+0xec>)
 80020a0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00
 80020b4:	52002000 	.word	0x52002000
 80020b8:	58024400 	.word	0x58024400
 80020bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80020c0:	02020200 	.word	0x02020200
 80020c4:	01ff0000 	.word	0x01ff0000
 80020c8:	01010280 	.word	0x01010280
 80020cc:	52004000 	.word	0x52004000

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020d4:	f7ff ff84 	bl	8001fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	; (8002110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	; (800211c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020fe:	f00c fe23 	bl	800ed48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7fe fb7b 	bl	80007fc <main>
  bx  lr
 8002106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800210c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002110:	24000144 	.word	0x24000144
  ldr r2, =_sidata
 8002114:	08010d74 	.word	0x08010d74
  ldr r2, =_sbss
 8002118:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 800211c:	2400148c 	.word	0x2400148c

08002120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC3_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212a:	2003      	movs	r0, #3
 800212c:	f000 f980 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002130:	f004 faa8 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_Init+0x68>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	4913      	ldr	r1, [pc, #76]	; (8002190 <HAL_Init+0x6c>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
 800214c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_Init+0x68>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_Init+0x6c>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <HAL_Init+0x70>)
 8002166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <HAL_Init+0x74>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800216e:	200f      	movs	r0, #15
 8002170:	f000 f814 	bl	800219c <HAL_InitTick>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e002      	b.n	8002184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800217e:	f7ff fa77 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	58024400 	.word	0x58024400
 8002190:	08010b78 	.word	0x08010b78
 8002194:	24000004 	.word	0x24000004
 8002198:	24000000 	.word	0x24000000

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <HAL_InitTick+0x60>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e021      	b.n	80021f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_InitTick+0x64>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_InitTick+0x60>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f965 	bl	8002496 <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 f92f 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_InitTick+0x68>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2400000c 	.word	0x2400000c
 8002200:	24000000 	.word	0x24000000
 8002204:	24000008 	.word	0x24000008

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2400000c 	.word	0x2400000c
 800222c:	24000570 	.word	0x24000570

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	24000570 	.word	0x24000570

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2400000c 	.word	0x2400000c

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022be:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <__NVIC_SetPriorityGrouping+0x40>)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	60d3      	str	r3, [r2, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	05fa0000 	.word	0x05fa0000

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff29 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002454:	f7ff ff40 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 8002458:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff90 	bl	8002384 <NVIC_EncodePriority>
 8002464:	4602      	mov	r2, r0
 8002466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff5f 	bl	8002330 <__NVIC_SetPriority>
}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	4603      	mov	r3, r0
 8002482:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff33 	bl	80022f4 <__NVIC_EnableIRQ>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ffa4 	bl	80023ec <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e237      	b.n	8002932 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e22c      	b.n	8002932 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5c      	ldr	r2, [pc, #368]	; (8002650 <HAL_DMA_Abort_IT+0x1a0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04a      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5b      	ldr	r2, [pc, #364]	; (8002654 <HAL_DMA_Abort_IT+0x1a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d045      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a59      	ldr	r2, [pc, #356]	; (8002658 <HAL_DMA_Abort_IT+0x1a8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d040      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_DMA_Abort_IT+0x1ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d03b      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a56      	ldr	r2, [pc, #344]	; (8002660 <HAL_DMA_Abort_IT+0x1b0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d036      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a55      	ldr	r2, [pc, #340]	; (8002664 <HAL_DMA_Abort_IT+0x1b4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d031      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_DMA_Abort_IT+0x1b8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02c      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_DMA_Abort_IT+0x1bc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d027      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a50      	ldr	r2, [pc, #320]	; (8002670 <HAL_DMA_Abort_IT+0x1c0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d022      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4f      	ldr	r2, [pc, #316]	; (8002674 <HAL_DMA_Abort_IT+0x1c4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d01d      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_DMA_Abort_IT+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d018      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_DMA_Abort_IT+0x1cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_DMA_Abort_IT+0x1d0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_DMA_Abort_IT+0x1d4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_DMA_Abort_IT+0x1d8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_DMA_Abort_IT+0x1dc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_DMA_Abort_IT+0xcc>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_DMA_Abort_IT+0xce>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8086 	beq.w	8002690 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2204      	movs	r2, #4
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <HAL_DMA_Abort_IT+0x1a0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2e      	ldr	r2, [pc, #184]	; (8002654 <HAL_DMA_Abort_IT+0x1a4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d045      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2c      	ldr	r2, [pc, #176]	; (8002658 <HAL_DMA_Abort_IT+0x1a8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d040      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2b      	ldr	r2, [pc, #172]	; (800265c <HAL_DMA_Abort_IT+0x1ac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d03b      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a29      	ldr	r2, [pc, #164]	; (8002660 <HAL_DMA_Abort_IT+0x1b0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d036      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_DMA_Abort_IT+0x1b4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d031      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <HAL_DMA_Abort_IT+0x1b8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02c      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a25      	ldr	r2, [pc, #148]	; (800266c <HAL_DMA_Abort_IT+0x1bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d027      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a23      	ldr	r2, [pc, #140]	; (8002670 <HAL_DMA_Abort_IT+0x1c0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d022      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a22      	ldr	r2, [pc, #136]	; (8002674 <HAL_DMA_Abort_IT+0x1c4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d01d      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <HAL_DMA_Abort_IT+0x1c8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d018      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_DMA_Abort_IT+0x1cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <HAL_DMA_Abort_IT+0x1d0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <HAL_DMA_Abort_IT+0x1d4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_DMA_Abort_IT+0x1d8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_DMA_Abort_IT+0x1dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <HAL_DMA_Abort_IT+0x18e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e178      	b.n	8002930 <HAL_DMA_Abort_IT+0x480>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e16f      	b.n	8002930 <HAL_DMA_Abort_IT+0x480>
 8002650:	40020010 	.word	0x40020010
 8002654:	40020028 	.word	0x40020028
 8002658:	40020040 	.word	0x40020040
 800265c:	40020058 	.word	0x40020058
 8002660:	40020070 	.word	0x40020070
 8002664:	40020088 	.word	0x40020088
 8002668:	400200a0 	.word	0x400200a0
 800266c:	400200b8 	.word	0x400200b8
 8002670:	40020410 	.word	0x40020410
 8002674:	40020428 	.word	0x40020428
 8002678:	40020440 	.word	0x40020440
 800267c:	40020458 	.word	0x40020458
 8002680:	40020470 	.word	0x40020470
 8002684:	40020488 	.word	0x40020488
 8002688:	400204a0 	.word	0x400204a0
 800268c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020e 	bic.w	r2, r2, #14
 800269e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6c      	ldr	r2, [pc, #432]	; (8002858 <HAL_DMA_Abort_IT+0x3a8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6b      	ldr	r2, [pc, #428]	; (800285c <HAL_DMA_Abort_IT+0x3ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a69      	ldr	r2, [pc, #420]	; (8002860 <HAL_DMA_Abort_IT+0x3b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a68      	ldr	r2, [pc, #416]	; (8002864 <HAL_DMA_Abort_IT+0x3b4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a66      	ldr	r2, [pc, #408]	; (8002868 <HAL_DMA_Abort_IT+0x3b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_DMA_Abort_IT+0x3bc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a63      	ldr	r2, [pc, #396]	; (8002870 <HAL_DMA_Abort_IT+0x3c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a62      	ldr	r2, [pc, #392]	; (8002874 <HAL_DMA_Abort_IT+0x3c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a60      	ldr	r2, [pc, #384]	; (8002878 <HAL_DMA_Abort_IT+0x3c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5f      	ldr	r2, [pc, #380]	; (800287c <HAL_DMA_Abort_IT+0x3cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <HAL_DMA_Abort_IT+0x3d0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5c      	ldr	r2, [pc, #368]	; (8002884 <HAL_DMA_Abort_IT+0x3d4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_DMA_Abort_IT+0x3d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a59      	ldr	r2, [pc, #356]	; (800288c <HAL_DMA_Abort_IT+0x3dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a57      	ldr	r2, [pc, #348]	; (8002890 <HAL_DMA_Abort_IT+0x3e0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a56      	ldr	r2, [pc, #344]	; (8002894 <HAL_DMA_Abort_IT+0x3e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <HAL_DMA_Abort_IT+0x2a2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e007      	b.n	8002762 <HAL_DMA_Abort_IT+0x2b2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <HAL_DMA_Abort_IT+0x3a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d072      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_DMA_Abort_IT+0x3ac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d06d      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_DMA_Abort_IT+0x3b0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d068      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a37      	ldr	r2, [pc, #220]	; (8002864 <HAL_DMA_Abort_IT+0x3b4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d063      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a36      	ldr	r2, [pc, #216]	; (8002868 <HAL_DMA_Abort_IT+0x3b8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_DMA_Abort_IT+0x3bc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d059      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a33      	ldr	r2, [pc, #204]	; (8002870 <HAL_DMA_Abort_IT+0x3c0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d054      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a31      	ldr	r2, [pc, #196]	; (8002874 <HAL_DMA_Abort_IT+0x3c4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04f      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a30      	ldr	r2, [pc, #192]	; (8002878 <HAL_DMA_Abort_IT+0x3c8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2e      	ldr	r2, [pc, #184]	; (800287c <HAL_DMA_Abort_IT+0x3cc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d045      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2d      	ldr	r2, [pc, #180]	; (8002880 <HAL_DMA_Abort_IT+0x3d0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d040      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2b      	ldr	r2, [pc, #172]	; (8002884 <HAL_DMA_Abort_IT+0x3d4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d03b      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_DMA_Abort_IT+0x3d8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <HAL_DMA_Abort_IT+0x3dc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_DMA_Abort_IT+0x3e0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_DMA_Abort_IT+0x3e4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d027      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a24      	ldr	r2, [pc, #144]	; (8002898 <HAL_DMA_Abort_IT+0x3e8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_DMA_Abort_IT+0x3ec>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <HAL_DMA_Abort_IT+0x3f0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_DMA_Abort_IT+0x3f4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_DMA_Abort_IT+0x3f8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	; (80028ac <HAL_DMA_Abort_IT+0x3fc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	; (80028b0 <HAL_DMA_Abort_IT+0x400>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_DMA_Abort_IT+0x404>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d132      	bne.n	80028b8 <HAL_DMA_Abort_IT+0x408>
 8002852:	2301      	movs	r3, #1
 8002854:	e031      	b.n	80028ba <HAL_DMA_Abort_IT+0x40a>
 8002856:	bf00      	nop
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
 8002898:	58025408 	.word	0x58025408
 800289c:	5802541c 	.word	0x5802541c
 80028a0:	58025430 	.word	0x58025430
 80028a4:	58025444 	.word	0x58025444
 80028a8:	58025458 	.word	0x58025458
 80028ac:	5802546c 	.word	0x5802546c
 80028b0:	58025480 	.word	0x58025480
 80028b4:	58025494 	.word	0x58025494
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d028      	beq.n	8002910 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800290e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop

0800293c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800294a:	b2db      	uxtb	r3, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	; 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002966:	4b86      	ldr	r3, [pc, #536]	; (8002b80 <HAL_GPIO_Init+0x228>)
 8002968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800296a:	e18c      	b.n	8002c86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 817e 	beq.w	8002c80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d005      	beq.n	800299c <HAL_GPIO_Init+0x44>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d130      	bne.n	80029fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d2:	2201      	movs	r2, #1
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0201 	and.w	r2, r3, #1
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d017      	beq.n	8002a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d123      	bne.n	8002a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691a      	ldr	r2, [r3, #16]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	69b9      	ldr	r1, [r7, #24]
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80d8 	beq.w	8002c80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_GPIO_Init+0x22c>)
 8002ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ad6:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_GPIO_Init+0x22c>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_GPIO_Init+0x22c>)
 8002ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_GPIO_Init+0x230>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <HAL_GPIO_Init+0x234>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_GPIO_Init+0x258>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_GPIO_Init+0x238>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <HAL_GPIO_Init+0x23c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_GPIO_Init+0x240>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <HAL_GPIO_Init+0x244>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_GPIO_Init+0x248>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_GPIO_Init+0x24c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_GPIO_Init+0x250>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x20a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <HAL_GPIO_Init+0x254>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x206>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e029      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e027      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e025      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e023      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e021      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e01f      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e01d      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e01b      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e019      	b.n	8002bb2 <HAL_GPIO_Init+0x25a>
 8002b7e:	bf00      	nop
 8002b80:	58000080 	.word	0x58000080
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58000400 	.word	0x58000400
 8002b8c:	58020000 	.word	0x58020000
 8002b90:	58020400 	.word	0x58020400
 8002b94:	58020800 	.word	0x58020800
 8002b98:	58020c00 	.word	0x58020c00
 8002b9c:	58021000 	.word	0x58021000
 8002ba0:	58021400 	.word	0x58021400
 8002ba4:	58021800 	.word	0x58021800
 8002ba8:	58021c00 	.word	0x58021c00
 8002bac:	58022400 	.word	0x58022400
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	f002 0203 	and.w	r2, r2, #3
 8002bb8:	0092      	lsls	r2, r2, #2
 8002bba:	4093      	lsls	r3, r2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc2:	4938      	ldr	r1, [pc, #224]	; (8002ca4 <HAL_GPIO_Init+0x34c>)
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	089b      	lsrs	r3, r3, #2
 8002bc8:	3302      	adds	r3, #2
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f ae6b 	bne.w	800296c <HAL_GPIO_Init+0x14>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3724      	adds	r7, #36	; 0x24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	58000400 	.word	0x58000400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 f804 	bl	8002d0e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07f      	b.n	8002e36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe fcaa 	bl	80016a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d107      	bne.n	8002d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e006      	b.n	8002dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d104      	bne.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_I2C_Init+0x11c>)
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69d9      	ldr	r1, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	02008000 	.word	0x02008000

08002e44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	460b      	mov	r3, r1
 8002e52:	817b      	strh	r3, [r7, #10]
 8002e54:	4613      	mov	r3, r2
 8002e56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	f040 80da 	bne.w	800301a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2C_Master_Transmit+0x30>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0d3      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e7c:	f7ff f9d8 	bl	8002230 <HAL_GetTick>
 8002e80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2319      	movs	r3, #25
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f001 f809 	bl	8003ea6 <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0be      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2221      	movs	r2, #33	; 0x21
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	893a      	ldrh	r2, [r7, #8]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2bff      	cmp	r3, #255	; 0xff
 8002ece:	d90e      	bls.n	8002eee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	8979      	ldrh	r1, [r7, #10]
 8002ede:	4b51      	ldr	r3, [pc, #324]	; (8003024 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 fa18 	bl	800431c <I2C_TransferConfig>
 8002eec:	e06c      	b.n	8002fc8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	8979      	ldrh	r1, [r7, #10]
 8002f00:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f001 fa07 	bl	800431c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f0e:	e05b      	b.n	8002fc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	6a39      	ldr	r1, [r7, #32]
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f001 f815 	bl	8003f44 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e07b      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d034      	beq.n	8002fc8 <HAL_I2C_Master_Transmit+0x184>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d130      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 ff98 	bl	8003ea6 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04d      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2bff      	cmp	r3, #255	; 0xff
 8002f88:	d90e      	bls.n	8002fa8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	22ff      	movs	r2, #255	; 0xff
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f001 f9bb 	bl	800431c <I2C_TransferConfig>
 8002fa6:	e00f      	b.n	8002fc8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f001 f9aa 	bl	800431c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d19e      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fffb 	bl	8003fd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e01a      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2220      	movs	r2, #32
 8002fec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_I2C_Master_Transmit+0x1e4>)
 8002ffa:	400b      	ands	r3, r1
 8002ffc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	e000      	b.n	800301c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800301a:	2302      	movs	r3, #2
  }
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	80002000 	.word	0x80002000
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	4613      	mov	r3, r2
 800303e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b20      	cmp	r3, #32
 800304a:	f040 80db 	bne.w	8003204 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2C_Master_Receive+0x30>
 8003058:	2302      	movs	r3, #2
 800305a:	e0d4      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003064:	f7ff f8e4 	bl	8002230 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2319      	movs	r3, #25
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 ff15 	bl	8003ea6 <I2C_WaitOnFlagUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0bf      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2222      	movs	r2, #34	; 0x22
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2210      	movs	r2, #16
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	893a      	ldrh	r2, [r7, #8]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2bff      	cmp	r3, #255	; 0xff
 80030b6:	d90e      	bls.n	80030d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	4b52      	ldr	r3, [pc, #328]	; (8003210 <HAL_I2C_Master_Receive+0x1e4>)
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f001 f924 	bl	800431c <I2C_TransferConfig>
 80030d4:	e06d      	b.n	80031b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8979      	ldrh	r1, [r7, #10]
 80030e8:	4b49      	ldr	r3, [pc, #292]	; (8003210 <HAL_I2C_Master_Receive+0x1e4>)
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f001 f913 	bl	800431c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030f6:	e05c      	b.n	80031b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	6a39      	ldr	r1, [r7, #32]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 ffab 	bl	8004058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e07c      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	d034      	beq.n	80031b2 <HAL_I2C_Master_Receive+0x186>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b00      	cmp	r3, #0
 800314e:	d130      	bne.n	80031b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2200      	movs	r2, #0
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fea3 	bl	8003ea6 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e04d      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2bff      	cmp	r3, #255	; 0xff
 8003172:	d90e      	bls.n	8003192 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	b2da      	uxtb	r2, r3
 8003180:	8979      	ldrh	r1, [r7, #10]
 8003182:	2300      	movs	r3, #0
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f001 f8c6 	bl	800431c <I2C_TransferConfig>
 8003190:	e00f      	b.n	80031b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	8979      	ldrh	r1, [r7, #10]
 80031a4:	2300      	movs	r3, #0
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f001 f8b5 	bl	800431c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d19d      	bne.n	80030f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6a39      	ldr	r1, [r7, #32]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 ff06 	bl	8003fd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e01a      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <HAL_I2C_Master_Receive+0x1e8>)
 80031e4:	400b      	ands	r3, r1
 80031e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	80002400 	.word	0x80002400
 8003214:	fe00e800 	.word	0xfe00e800

08003218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	68f9      	ldr	r1, [r7, #12]
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
  }
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d010      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	09db      	lsrs	r3, r3, #7
 8003274:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003290:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0a9b      	lsrs	r3, r3, #10
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d010      	beq.n	80032c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	09db      	lsrs	r3, r3, #7
 80032a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	f043 0208 	orr.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	0a5b      	lsrs	r3, r3, #9
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	09db      	lsrs	r3, r3, #7
 80032d0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0202 	orr.w	r2, r3, #2
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 030b 	and.w	r3, r3, #11
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fc77 	bl	8003bf4 <I2C_ITError>
  }
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
 8003342:	4613      	mov	r3, r2
 8003344:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <I2C_Slave_ISR_IT+0x24>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0ec      	b.n	800358c <I2C_Slave_ISR_IT+0x1fe>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033d2:	6939      	ldr	r1, [r7, #16]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f9bf 	bl	8003758 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04d      	beq.n	8003482 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d047      	beq.n	8003482 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d128      	bne.n	800344e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b28      	cmp	r3, #40	; 0x28
 8003406:	d108      	bne.n	800341a <I2C_Slave_ISR_IT+0x8c>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800340e:	d104      	bne.n	800341a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb98 	bl	8003b48 <I2C_ITListenCplt>
 8003418:	e032      	b.n	8003480 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b29      	cmp	r3, #41	; 0x29
 8003424:	d10e      	bne.n	8003444 <I2C_Slave_ISR_IT+0xb6>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800342c:	d00a      	beq.n	8003444 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2210      	movs	r2, #16
 8003434:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fcf3 	bl	8003e22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 f92d 	bl	800369c <I2C_ITSlaveSeqCplt>
 8003442:	e01d      	b.n	8003480 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2210      	movs	r2, #16
 800344a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800344c:	e096      	b.n	800357c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <I2C_Slave_ISR_IT+0xe4>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346e:	f040 8085 	bne.w	800357c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fbbb 	bl	8003bf4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800347e:	e07d      	b.n	800357c <I2C_Slave_ISR_IT+0x1ee>
 8003480:	e07c      	b.n	800357c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d030      	beq.n	80034f0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02a      	beq.n	80034f0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d018      	beq.n	80034d6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d14f      	bne.n	8003580 <I2C_Slave_ISR_IT+0x1f2>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e6:	d04b      	beq.n	8003580 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f8d7 	bl	800369c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034ee:	e047      	b.n	8003580 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	08db      	lsrs	r3, r3, #3
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00a      	beq.n	8003512 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003504:	2b00      	cmp	r3, #0
 8003506:	d004      	beq.n	8003512 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f842 	bl	8003594 <I2C_ITAddrCplt>
 8003510:	e037      	b.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d031      	beq.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02b      	beq.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d018      	beq.n	8003566 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
 8003564:	e00d      	b.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d002      	beq.n	8003574 <I2C_Slave_ISR_IT+0x1e6>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d106      	bne.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f891 	bl	800369c <I2C_ITSlaveSeqCplt>
 800357a:	e002      	b.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800357c:	bf00      	nop
 800357e:	e000      	b.n	8003582 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003580:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035aa:	2b28      	cmp	r3, #40	; 0x28
 80035ac:	d16a      	bne.n	8003684 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d138      	bne.n	8003664 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	09db      	lsrs	r3, r3, #7
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	89bb      	ldrh	r3, [r7, #12]
 80035fa:	4053      	eors	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	f003 0306 	and.w	r3, r3, #6
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11c      	bne.n	8003640 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003606:	897b      	ldrh	r3, [r7, #10]
 8003608:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	2b02      	cmp	r3, #2
 800361a:	d13b      	bne.n	8003694 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003632:	89ba      	ldrh	r2, [r7, #12]
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff fe7c 	bl	8003336 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800363e:	e029      	b.n	8003694 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003640:	893b      	ldrh	r3, [r7, #8]
 8003642:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fe99 	bl	8004380 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003656:	89ba      	ldrh	r2, [r7, #12]
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fe6a 	bl	8003336 <HAL_I2C_AddrCallback>
}
 8003662:	e017      	b.n	8003694 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fe89 	bl	8004380 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003676:	89ba      	ldrh	r2, [r7, #12]
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe5a 	bl	8003336 <HAL_I2C_AddrCallback>
}
 8003682:	e007      	b.n	8003694 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2208      	movs	r2, #8
 800368a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	0b9b      	lsrs	r3, r3, #14
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e00d      	b.n	80036ee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0bdb      	lsrs	r3, r3, #15
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b29      	cmp	r3, #41	; 0x29
 80036f8:	d112      	bne.n	8003720 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2228      	movs	r2, #40	; 0x28
 80036fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2221      	movs	r2, #33	; 0x21
 8003706:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003708:	2101      	movs	r1, #1
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fe38 	bl	8004380 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff fdf8 	bl	800330e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800371e:	e017      	b.n	8003750 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b2a      	cmp	r3, #42	; 0x2a
 800372a:	d111      	bne.n	8003750 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2228      	movs	r2, #40	; 0x28
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2222      	movs	r2, #34	; 0x22
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800373a:	2102      	movs	r1, #2
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fe1f 	bl	8004380 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff fde9 	bl	8003322 <HAL_I2C_SlaveRxCpltCallback>
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2220      	movs	r2, #32
 800377c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b21      	cmp	r3, #33	; 0x21
 8003782:	d002      	beq.n	800378a <I2C_ITSlaveCplt+0x32>
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	2b29      	cmp	r3, #41	; 0x29
 8003788:	d108      	bne.n	800379c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800378a:	f248 0101 	movw	r1, #32769	; 0x8001
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fdf6 	bl	8004380 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2221      	movs	r2, #33	; 0x21
 8003798:	631a      	str	r2, [r3, #48]	; 0x30
 800379a:	e00d      	b.n	80037b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b22      	cmp	r3, #34	; 0x22
 80037a0:	d002      	beq.n	80037a8 <I2C_ITSlaveCplt+0x50>
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b2a      	cmp	r3, #42	; 0x2a
 80037a6:	d107      	bne.n	80037b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80037a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fde7 	bl	8004380 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2222      	movs	r2, #34	; 0x22
 80037b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b80      	ldr	r3, [pc, #512]	; (80039d4 <I2C_ITSlaveCplt+0x27c>)
 80037d4:	400b      	ands	r3, r1
 80037d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fb22 	bl	8003e22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	0b9b      	lsrs	r3, r3, #14
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d07a      	beq.n	80038e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8111 	beq.w	8003a26 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a73      	ldr	r2, [pc, #460]	; (80039d8 <I2C_ITSlaveCplt+0x280>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d059      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a71      	ldr	r2, [pc, #452]	; (80039dc <I2C_ITSlaveCplt+0x284>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d053      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6f      	ldr	r2, [pc, #444]	; (80039e0 <I2C_ITSlaveCplt+0x288>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04d      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a6d      	ldr	r2, [pc, #436]	; (80039e4 <I2C_ITSlaveCplt+0x28c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d047      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <I2C_ITSlaveCplt+0x290>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d041      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a69      	ldr	r2, [pc, #420]	; (80039ec <I2C_ITSlaveCplt+0x294>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d03b      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <I2C_ITSlaveCplt+0x298>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d035      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <I2C_ITSlaveCplt+0x29c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02f      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <I2C_ITSlaveCplt+0x2a0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d029      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a61      	ldr	r2, [pc, #388]	; (80039fc <I2C_ITSlaveCplt+0x2a4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d023      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <I2C_ITSlaveCplt+0x2a8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01d      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <I2C_ITSlaveCplt+0x2ac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d017      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <I2C_ITSlaveCplt+0x2b0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d011      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <I2C_ITSlaveCplt+0x2b4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <I2C_ITSlaveCplt+0x2b8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d005      	beq.n	80038c4 <I2C_ITSlaveCplt+0x16c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a55      	ldr	r2, [pc, #340]	; (8003a14 <I2C_ITSlaveCplt+0x2bc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d105      	bne.n	80038d0 <I2C_ITSlaveCplt+0x178>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	e004      	b.n	80038da <I2C_ITSlaveCplt+0x182>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	8553      	strh	r3, [r2, #42]	; 0x2a
 80038de:	e0a2      	b.n	8003a26 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	0bdb      	lsrs	r3, r3, #15
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 809c 	beq.w	8003a26 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 808f 	beq.w	8003a26 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <I2C_ITSlaveCplt+0x280>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d059      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a30      	ldr	r2, [pc, #192]	; (80039dc <I2C_ITSlaveCplt+0x284>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d053      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <I2C_ITSlaveCplt+0x288>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04d      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2c      	ldr	r2, [pc, #176]	; (80039e4 <I2C_ITSlaveCplt+0x28c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d047      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2a      	ldr	r2, [pc, #168]	; (80039e8 <I2C_ITSlaveCplt+0x290>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d041      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a28      	ldr	r2, [pc, #160]	; (80039ec <I2C_ITSlaveCplt+0x294>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d03b      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <I2C_ITSlaveCplt+0x298>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d035      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a24      	ldr	r2, [pc, #144]	; (80039f4 <I2C_ITSlaveCplt+0x29c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02f      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <I2C_ITSlaveCplt+0x2a0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d029      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a20      	ldr	r2, [pc, #128]	; (80039fc <I2C_ITSlaveCplt+0x2a4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d023      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <I2C_ITSlaveCplt+0x2a8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d01d      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <I2C_ITSlaveCplt+0x2ac>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d017      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <I2C_ITSlaveCplt+0x2b0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d011      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a18      	ldr	r2, [pc, #96]	; (8003a0c <I2C_ITSlaveCplt+0x2b4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <I2C_ITSlaveCplt+0x2b8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d005      	beq.n	80039c8 <I2C_ITSlaveCplt+0x270>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <I2C_ITSlaveCplt+0x2bc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d127      	bne.n	8003a18 <I2C_ITSlaveCplt+0x2c0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	e026      	b.n	8003a22 <I2C_ITSlaveCplt+0x2ca>
 80039d4:	fe00e800 	.word	0xfe00e800
 80039d8:	40020010 	.word	0x40020010
 80039dc:	40020028 	.word	0x40020028
 80039e0:	40020040 	.word	0x40020040
 80039e4:	40020058 	.word	0x40020058
 80039e8:	40020070 	.word	0x40020070
 80039ec:	40020088 	.word	0x40020088
 80039f0:	400200a0 	.word	0x400200a0
 80039f4:	400200b8 	.word	0x400200b8
 80039f8:	40020410 	.word	0x40020410
 80039fc:	40020428 	.word	0x40020428
 8003a00:	40020440 	.word	0x40020440
 8003a04:	40020458 	.word	0x40020458
 8003a08:	40020470 	.word	0x40020470
 8003a0c:	40020488 	.word	0x40020488
 8003a10:	400204a0 	.word	0x400204a0
 8003a14:	400204b8 	.word	0x400204b8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d020      	beq.n	8003a74 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d010      	beq.n	8003ac2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8a4 	bl	8003bf4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b28      	cmp	r3, #40	; 0x28
 8003ab6:	d141      	bne.n	8003b3c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f844 	bl	8003b48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ac0:	e03c      	b.n	8003b3c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aca:	d014      	beq.n	8003af6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fde5 	bl	800369c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a1b      	ldr	r2, [pc, #108]	; (8003b44 <I2C_ITSlaveCplt+0x3ec>)
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fc2f 	bl	8003352 <HAL_I2C_ListenCpltCallback>
}
 8003af4:	e022      	b.n	8003b3c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b22      	cmp	r3, #34	; 0x22
 8003b00:	d10e      	bne.n	8003b20 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fc02 	bl	8003322 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b1e:	e00d      	b.n	8003b3c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fbe9 	bl	800330e <HAL_I2C_SlaveTxCpltCallback>
}
 8003b3c:	bf00      	nop
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <I2C_ITListenCplt+0xa8>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	089b      	lsrs	r3, r3, #2
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f043 0204 	orr.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bc6:	f248 0103 	movw	r1, #32771	; 0x8003
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fbd8 	bl	8004380 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fbb6 	bl	8003352 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	ffff0000 	.word	0xffff0000

08003bf4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a6d      	ldr	r2, [pc, #436]	; (8003dc8 <I2C_ITError+0x1d4>)
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b28      	cmp	r3, #40	; 0x28
 8003c2a:	d005      	beq.n	8003c38 <I2C_ITError+0x44>
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b29      	cmp	r3, #41	; 0x29
 8003c30:	d002      	beq.n	8003c38 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b2a      	cmp	r3, #42	; 0x2a
 8003c36:	d10b      	bne.n	8003c50 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c38:	2103      	movs	r1, #3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 fba0 	bl	8004380 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2228      	movs	r2, #40	; 0x28
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a60      	ldr	r2, [pc, #384]	; (8003dcc <I2C_ITError+0x1d8>)
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003c4e:	e030      	b.n	8003cb2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c50:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fb93 	bl	8004380 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8e1 	bl	8003e22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d01f      	beq.n	8003cac <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d114      	bne.n	8003cac <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d109      	bne.n	8003ca4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2210      	movs	r2, #16
 8003c96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d039      	beq.n	8003d34 <I2C_ITError+0x140>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b11      	cmp	r3, #17
 8003cc4:	d002      	beq.n	8003ccc <I2C_ITError+0xd8>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b21      	cmp	r3, #33	; 0x21
 8003cca:	d133      	bne.n	8003d34 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cda:	d107      	bne.n	8003cec <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe fe23 	bl	800293c <HAL_DMA_GetState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d017      	beq.n	8003d2c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <I2C_ITError+0x1dc>)
 8003d02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fe fbcd 	bl	80024b0 <HAL_DMA_Abort_IT>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d04d      	beq.n	8003db8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d26:	4610      	mov	r0, r2
 8003d28:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d2a:	e045      	b.n	8003db8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f851 	bl	8003dd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d32:	e041      	b.n	8003db8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d039      	beq.n	8003db0 <I2C_ITError+0x1bc>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b12      	cmp	r3, #18
 8003d40:	d002      	beq.n	8003d48 <I2C_ITError+0x154>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b22      	cmp	r3, #34	; 0x22
 8003d46:	d133      	bne.n	8003db0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d56:	d107      	bne.n	8003d68 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe fde5 	bl	800293c <HAL_DMA_GetState>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d017      	beq.n	8003da8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <I2C_ITError+0x1dc>)
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe fb8f 	bl	80024b0 <HAL_DMA_Abort_IT>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d011      	beq.n	8003dbc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003da2:	4610      	mov	r0, r2
 8003da4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003da6:	e009      	b.n	8003dbc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f813 	bl	8003dd4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dae:	e005      	b.n	8003dbc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f80f 	bl	8003dd4 <I2C_TreatErrorCallback>
  }
}
 8003db6:	e002      	b.n	8003dbe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003db8:	bf00      	nop
 8003dba:	e000      	b.n	8003dbe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003dbc:	bf00      	nop
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	ffff0000 	.word	0xffff0000
 8003dcc:	0800338f 	.word	0x0800338f
 8003dd0:	08003e6b 	.word	0x08003e6b

08003dd4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b60      	cmp	r3, #96	; 0x60
 8003de6:	d10e      	bne.n	8003e06 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff fabb 	bl	800337a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e04:	e009      	b.n	8003e1a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff faa6 	bl	8003366 <HAL_I2C_ErrorCallback>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d103      	bne.n	8003e40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d007      	beq.n	8003e5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699a      	ldr	r2, [r3, #24]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	619a      	str	r2, [r3, #24]
  }
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	2200      	movs	r2, #0
 8003e86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	2200      	movs	r2, #0
 8003e96:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ff9b 	bl	8003dd4 <I2C_TreatErrorCallback>
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb6:	e031      	b.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d02d      	beq.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fe f9b6 	bl	8002230 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d122      	bne.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d113      	bne.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00f      	b.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	79fb      	ldrb	r3, [r7, #7]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d0be      	beq.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f50:	e033      	b.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f900 	bl	800415c <I2C_IsErrorOccurred>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e031      	b.n	8003fca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d025      	beq.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fe f95f 	bl	8002230 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11a      	bne.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d013      	beq.n	8003fba <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e007      	b.n	8003fca <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d1c4      	bne.n	8003f52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fde:	e02f      	b.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8b9 	bl	800415c <I2C_IsErrorOccurred>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e02d      	b.n	8004050 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe f91c 	bl	8002230 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11a      	bne.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b20      	cmp	r3, #32
 8004016:	d013      	beq.n	8004040 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f043 0220 	orr.w	r2, r3, #32
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e007      	b.n	8004050 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d1c8      	bne.n	8003fe0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004064:	e06b      	b.n	800413e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f876 	bl	800415c <I2C_IsErrorOccurred>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e069      	b.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b20      	cmp	r3, #32
 8004086:	d138      	bne.n	80040fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d105      	bne.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e055      	b.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d107      	bne.n	80040c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2204      	movs	r2, #4
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
 80040be:	e002      	b.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2220      	movs	r2, #32
 80040cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80040da:	400b      	ands	r3, r1
 80040dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e029      	b.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe f899 	bl	8002230 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00f      	beq.n	800413e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f043 0220 	orr.w	r2, r3, #32
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e007      	b.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d18c      	bne.n	8004066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	fe00e800 	.word	0xfe00e800

0800415c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d068      	beq.n	800425a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2210      	movs	r2, #16
 800418e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004190:	e049      	b.n	8004226 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d045      	beq.n	8004226 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800419a:	f7fe f849 	bl	8002230 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d302      	bcc.n	80041b0 <I2C_IsErrorOccurred+0x54>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d13a      	bne.n	8004226 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d2:	d121      	bne.n	8004218 <I2C_IsErrorOccurred+0xbc>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041da:	d01d      	beq.n	8004218 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d01a      	beq.n	8004218 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041f2:	f7fe f81d 	bl	8002230 <HAL_GetTick>
 80041f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f8:	e00e      	b.n	8004218 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80041fa:	f7fe f819 	bl	8002230 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b19      	cmp	r3, #25
 8004206:	d907      	bls.n	8004218 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f043 0320 	orr.w	r3, r3, #32
 800420e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004216:	e006      	b.n	8004226 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d1e9      	bne.n	80041fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b20      	cmp	r3, #32
 8004232:	d003      	beq.n	800423c <I2C_IsErrorOccurred+0xe0>
 8004234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0aa      	beq.n	8004192 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800423c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2220      	movs	r2, #32
 800424a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00b      	beq.n	8004284 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800427c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f043 0308 	orr.w	r3, r3, #8
 8004294:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800429e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00b      	beq.n	80042c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	f043 0302 	orr.w	r3, r3, #2
 80042b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01c      	beq.n	800430a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f7ff fda6 	bl	8003e22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <I2C_IsErrorOccurred+0x1bc>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800430a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800430e:	4618      	mov	r0, r3
 8004310:	3728      	adds	r7, #40	; 0x28
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	fe00e800 	.word	0xfe00e800

0800431c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	460b      	mov	r3, r1
 8004328:	817b      	strh	r3, [r7, #10]
 800432a:	4613      	mov	r3, r2
 800432c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004334:	7a7b      	ldrb	r3, [r7, #9]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800433c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	4313      	orrs	r3, r2
 8004346:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800434a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	0d5b      	lsrs	r3, r3, #21
 8004356:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <I2C_TransferConfig+0x60>)
 800435c:	430b      	orrs	r3, r1
 800435e:	43db      	mvns	r3, r3
 8004360:	ea02 0103 	and.w	r1, r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	03ff63ff 	.word	0x03ff63ff

08004380 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00f      	beq.n	80043ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80043a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d003      	beq.n	80043ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043ba:	887b      	ldrh	r3, [r7, #2]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00f      	beq.n	80043e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80043ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043d8:	2b28      	cmp	r3, #40	; 0x28
 80043da:	d003      	beq.n	80043e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80043e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da03      	bge.n	80043f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80043f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d103      	bne.n	8004402 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004400:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004402:	887b      	ldrh	r3, [r7, #2]
 8004404:	2b20      	cmp	r3, #32
 8004406:	d103      	bne.n	8004410 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f043 0320 	orr.w	r3, r3, #32
 800440e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004410:	887b      	ldrh	r3, [r7, #2]
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d103      	bne.n	800441e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800441c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6819      	ldr	r1, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	43da      	mvns	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	400a      	ands	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b20      	cmp	r3, #32
 8004450:	d138      	bne.n	80044c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800445c:	2302      	movs	r3, #2
 800445e:	e032      	b.n	80044c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800448e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d139      	bne.n	800455c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e033      	b.n	800455e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2224      	movs	r2, #36	; 0x24
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004524:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800456a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456c:	b08f      	sub	sp, #60	; 0x3c
 800456e:	af0a      	add	r7, sp, #40	; 0x28
 8004570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e116      	b.n	80047aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f00a f8b2 	bl	800e700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2203      	movs	r2, #3
 80045a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 fb93 	bl	800ace6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	687e      	ldr	r6, [r7, #4]
 80045c8:	466d      	mov	r5, sp
 80045ca:	f106 0410 	add.w	r4, r6, #16
 80045ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045da:	e885 0003 	stmia.w	r5, {r0, r1}
 80045de:	1d33      	adds	r3, r6, #4
 80045e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f006 fa5e 	bl	800aaa4 <USB_CoreInit>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0d7      	b.n	80047aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f006 fb81 	bl	800ad08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
 800460a:	e04a      	b.n	80046a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	333d      	adds	r3, #61	; 0x3d
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	333c      	adds	r3, #60	; 0x3c
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	b298      	uxth	r0, r3
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4413      	add	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3356      	adds	r3, #86	; 0x56
 8004648:	4602      	mov	r2, r0
 800464a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	3340      	adds	r3, #64	; 0x40
 800465c:	2200      	movs	r2, #0
 800465e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3344      	adds	r3, #68	; 0x44
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3348      	adds	r3, #72	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334c      	adds	r3, #76	; 0x4c
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	3301      	adds	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d3af      	bcc.n	800460c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	e044      	b.n	800473c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046b2:	7bfa      	ldrb	r2, [r7, #15]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	3301      	adds	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3b5      	bcc.n	80046b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	687e      	ldr	r6, [r7, #4]
 800474e:	466d      	mov	r5, sp
 8004750:	f106 0410 	add.w	r4, r6, #16
 8004754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800475c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004760:	e885 0003 	stmia.w	r5, {r0, r1}
 8004764:	1d33      	adds	r3, r6, #4
 8004766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f006 fb19 	bl	800ada0 <USB_DevInit>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e014      	b.n	80047aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f949 	bl	8005a30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f007 fa7f 	bl	800bca6 <USB_DevDisconnect>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_Start+0x1c>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e022      	b.n	8004814 <HAL_PCD_Start+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f006 fa62 	bl	800acc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f007 fa2d 	bl	800bc64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_PCD_Stop+0x1c>
 8004834:	2302      	movs	r3, #2
 8004836:	e028      	b.n	800488a <HAL_PCD_Stop+0x6e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f006 fa4e 	bl	800ace6 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fa29 	bl	800bca6 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2110      	movs	r1, #16
 800485a:	4618      	mov	r0, r3
 800485c:	f006 fbfe 	bl	800b05c <USB_FlushTxFifo>

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004892:	b590      	push	{r4, r7, lr}
 8004894:	b08d      	sub	sp, #52	; 0x34
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f007 fab0 	bl	800be0e <USB_GetMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 84b7 	bne.w	8005224 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f007 fa14 	bl	800bce8 <USB_ReadInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 84ad 	beq.w	8005222 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f007 fa01 	bl	800bce8 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d107      	bne.n	8004900 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695a      	ldr	r2, [r3, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f002 0202 	and.w	r2, r2, #2
 80048fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f007 f9ef 	bl	800bce8 <USB_ReadInterrupts>
 800490a:	4603      	mov	r3, r0
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d161      	bne.n	80049d8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0210 	bic.w	r2, r2, #16
 8004922:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f003 020f 	and.w	r2, r3, #15
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	3304      	adds	r3, #4
 8004942:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	0c5b      	lsrs	r3, r3, #17
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	2b02      	cmp	r3, #2
 800494e:	d124      	bne.n	800499a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d035      	beq.n	80049c8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	091b      	lsrs	r3, r3, #4
 8004964:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6a38      	ldr	r0, [r7, #32]
 8004970:	f007 f826 	bl	800b9c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004980:	441a      	add	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004992:	441a      	add	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	615a      	str	r2, [r3, #20]
 8004998:	e016      	b.n	80049c8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	0c5b      	lsrs	r3, r3, #17
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	2b06      	cmp	r3, #6
 80049a4:	d110      	bne.n	80049c8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049ac:	2208      	movs	r2, #8
 80049ae:	4619      	mov	r1, r3
 80049b0:	6a38      	ldr	r0, [r7, #32]
 80049b2:	f007 f805 	bl	800b9c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	695a      	ldr	r2, [r3, #20]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049c2:	441a      	add	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0210 	orr.w	r2, r2, #16
 80049d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f007 f983 	bl	800bce8 <USB_ReadInterrupts>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ec:	f040 80a7 	bne.w	8004b3e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f007 f988 	bl	800bd0e <USB_ReadDevAllOutEpInterrupt>
 80049fe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004a00:	e099      	b.n	8004b36 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 808e 	beq.w	8004b2a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f007 f9ac 	bl	800bd76 <USB_ReadDevOutEPInterrupt>
 8004a1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	2301      	movs	r3, #1
 8004a3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fe70 	bl	8005724 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 ff46 	bl	80058f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2310      	movs	r3, #16
 8004a82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d030      	beq.n	8004af0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d109      	bne.n	8004aae <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004aac:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	4413      	add	r3, r2
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f009 ff31 	bl	800e940 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	461a      	mov	r2, r3
 8004aec:	2302      	movs	r3, #2
 8004aee:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	2320      	movs	r3, #32
 8004b0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	461a      	mov	r2, r3
 8004b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b28:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f af62 	bne.w	8004a02 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f007 f8d0 	bl	800bce8 <USB_ReadInterrupts>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b52:	f040 80db 	bne.w	8004d0c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f007 f8f1 	bl	800bd42 <USB_ReadDevAllInEpInterrupt>
 8004b60:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b66:	e0cd      	b.n	8004d04 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80c2 	beq.w	8004cf8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f007 f917 	bl	800bdb2 <USB_ReadDevInEPInterrupt>
 8004b84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d057      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	2201      	movs	r2, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69f9      	ldr	r1, [r7, #28]
 8004bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d132      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3348      	adds	r3, #72	; 0x48
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	4613      	mov	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4403      	add	r3, r0
 8004bee:	3344      	adds	r3, #68	; 0x44
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4419      	add	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4403      	add	r3, r0
 8004c02:	3348      	adds	r3, #72	; 0x48
 8004c04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x3a2>
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c10:	4613      	mov	r3, r2
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	334c      	adds	r3, #76	; 0x4c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2101      	movs	r1, #1
 8004c30:	f007 f920 	bl	800be74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f009 fdfb 	bl	800e836 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	461a      	mov	r2, r3
 8004c58:	2308      	movs	r3, #8
 8004c5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	461a      	mov	r2, r3
 8004c74:	2310      	movs	r3, #16
 8004c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2340      	movs	r3, #64	; 0x40
 8004c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d023      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ca0:	6a38      	ldr	r0, [r7, #32]
 8004ca2:	f006 f9db 	bl	800b05c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	4613      	mov	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4413      	add	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3338      	adds	r3, #56	; 0x38
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	78db      	ldrb	r3, [r3, #3]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d108      	bne.n	8004cd4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f009 fe48 	bl	800e964 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fc88 	bl	8005608 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f47f af2e 	bne.w	8004b68 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f006 ffe9 	bl	800bce8 <USB_ReadInterrupts>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d20:	d122      	bne.n	8004d68 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	69fa      	ldr	r2, [r7, #28]
 8004d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d108      	bne.n	8004d52 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d48:	2100      	movs	r1, #0
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fe94 	bl	8005a78 <HAL_PCDEx_LPM_Callback>
 8004d50:	e002      	b.n	8004d58 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f009 fde6 	bl	800e924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695a      	ldr	r2, [r3, #20]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f006 ffbb 	bl	800bce8 <USB_ReadInterrupts>
 8004d72:	4603      	mov	r3, r0
 8004d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d7c:	d112      	bne.n	8004da4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d102      	bne.n	8004d94 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f009 fda2 	bl	800e8d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f006 ff9d 	bl	800bce8 <USB_ReadInterrupts>
 8004dae:	4603      	mov	r3, r0
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db8:	d121      	bne.n	8004dfe <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004dc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	089b      	lsrs	r3, r3, #2
 8004de4:	f003 020f 	and.w	r2, r3, #15
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004dee:	2101      	movs	r1, #1
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fe41 	bl	8005a78 <HAL_PCDEx_LPM_Callback>
 8004df6:	e002      	b.n	8004dfe <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f009 fd6d 	bl	800e8d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f006 ff70 	bl	800bce8 <USB_ReadInterrupts>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e12:	f040 80b7 	bne.w	8004f84 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2110      	movs	r1, #16
 8004e30:	4618      	mov	r0, r3
 8004e32:	f006 f913 	bl	800b05c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	e046      	b.n	8004eca <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e82:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e94:	0151      	lsls	r1, r2, #5
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	440a      	add	r2, r1
 8004e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ea2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb4:	0151      	lsls	r1, r2, #5
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	440a      	add	r2, r1
 8004eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ec2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3b3      	bcc.n	8004e3c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ee6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d016      	beq.n	8004f1e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f00:	f043 030b 	orr.w	r3, r3, #11
 8004f04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f16:	f043 030b 	orr.w	r3, r3, #11
 8004f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f1c:	e015      	b.n	8004f4a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	695a      	ldr	r2, [r3, #20]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004f32:	4313      	orrs	r3, r2
 8004f34:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f44:	f043 030b 	orr.w	r3, r3, #11
 8004f48:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f58:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f5c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f006 ff80 	bl	800be74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f006 fead 	bl	800bce8 <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d124      	bne.n	8004fe4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f006 ff44 	bl	800be2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f006 f8d4 	bl	800b156 <USB_GetDevSpeed>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681c      	ldr	r4, [r3, #0]
 8004fba:	f001 fcdd 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8004fbe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f005 fdd9 	bl	800ab80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f009 fc59 	bl	800e886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fe2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f006 fe7d 	bl	800bce8 <USB_ReadInterrupts>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d10a      	bne.n	800500e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f009 fc36 	bl	800e86a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f002 0208 	and.w	r2, r2, #8
 800500c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f006 fe68 	bl	800bce8 <USB_ReadInterrupts>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b80      	cmp	r3, #128	; 0x80
 8005020:	d122      	bne.n	8005068 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800502e:	2301      	movs	r3, #1
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	e014      	b.n	800505e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	4613      	mov	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 faa7 	bl	80055a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	3301      	adds	r3, #1
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	429a      	cmp	r2, r3
 8005066:	d3e5      	bcc.n	8005034 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f006 fe3b 	bl	800bce8 <USB_ReadInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507c:	d13b      	bne.n	80050f6 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800507e:	2301      	movs	r3, #1
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	e02b      	b.n	80050dc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	3340      	adds	r3, #64	; 0x40
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80050aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da12      	bge.n	80050d6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	333f      	adds	r3, #63	; 0x3f
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fa68 	bl	80055a6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	3301      	adds	r3, #1
 80050da:	627b      	str	r3, [r7, #36]	; 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3ce      	bcc.n	8005084 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f006 fdf4 	bl	800bce8 <USB_ReadInterrupts>
 8005100:	4603      	mov	r3, r0
 8005102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d155      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800510c:	2301      	movs	r3, #1
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
 8005110:	e045      	b.n	800519e <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d12e      	bne.n	8005198 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800513a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800513c:	2b00      	cmp	r3, #0
 800513e:	da2b      	bge.n	8005198 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800514c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005150:	429a      	cmp	r2, r3
 8005152:	d121      	bne.n	8005198 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005158:	4613      	mov	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005194:	6053      	str	r3, [r2, #4]
            break;
 8005196:	e007      	b.n	80051a8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	3301      	adds	r3, #1
 800519c:	627b      	str	r3, [r7, #36]	; 0x24
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d3b4      	bcc.n	8005112 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80051b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f006 fd93 	bl	800bce8 <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d10a      	bne.n	80051e4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f009 fbda 	bl	800e988 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f006 fd7d 	bl	800bce8 <USB_ReadInterrupts>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d115      	bne.n	8005224 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f009 fbca 	bl	800e9a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	430a      	orrs	r2, r1
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	e000      	b.n	8005224 <HAL_PCD_IRQHandler+0x992>
      return;
 8005222:	bf00      	nop
    }
  }
}
 8005224:	3734      	adds	r7, #52	; 0x34
 8005226:	46bd      	mov	sp, r7
 8005228:	bd90      	pop	{r4, r7, pc}

0800522a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_PCD_SetAddress+0x1a>
 8005240:	2302      	movs	r3, #2
 8005242:	e013      	b.n	800526c <HAL_PCD_SetAddress+0x42>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	78fa      	ldrb	r2, [r7, #3]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f006 fcdb 	bl	800bc18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	461a      	mov	r2, r3
 8005282:	4603      	mov	r3, r0
 8005284:	70fb      	strb	r3, [r7, #3]
 8005286:	460b      	mov	r3, r1
 8005288:	803b      	strh	r3, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005296:	2b00      	cmp	r3, #0
 8005298:	da0f      	bge.n	80052ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	3338      	adds	r3, #56	; 0x38
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	3304      	adds	r3, #4
 80052b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	705a      	strb	r2, [r3, #1]
 80052b8:	e00f      	b.n	80052da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	4413      	add	r3, r2
 80052d0:	3304      	adds	r3, #4
 80052d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052e6:	883a      	ldrh	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	78ba      	ldrb	r2, [r7, #2]
 80052f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	785b      	ldrb	r3, [r3, #1]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005304:	78bb      	ldrb	r3, [r7, #2]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d102      	bne.n	8005310 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_PCD_EP_Open+0xaa>
 800531a:	2302      	movs	r3, #2
 800531c:	e00e      	b.n	800533c <HAL_PCD_EP_Open+0xc8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	4618      	mov	r0, r3
 800532e:	f005 ff37 	bl	800b1a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800533a:	7afb      	ldrb	r3, [r7, #11]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005354:	7afb      	ldrb	r3, [r7, #11]
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	4613      	mov	r3, r2
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005386:	7afb      	ldrb	r3, [r7, #11]
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d102      	bne.n	80053a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	f005 ff7f 	bl	800b2b0 <USB_EPStartXfer>

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	607a      	str	r2, [r7, #4]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	460b      	mov	r3, r1
 80053ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053cc:	7afb      	ldrb	r3, [r7, #11]
 80053ce:	f003 020f 	and.w	r2, r3, #15
 80053d2:	4613      	mov	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	3338      	adds	r3, #56	; 0x38
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	3304      	adds	r3, #4
 80053e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2201      	movs	r2, #1
 80053fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053fc:	7afb      	ldrb	r3, [r7, #11]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	b2da      	uxtb	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d102      	bne.n	8005416 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	f005 ff44 	bl	800b2b0 <USB_EPStartXfer>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d901      	bls.n	8005450 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e050      	b.n	80054f2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005454:	2b00      	cmp	r3, #0
 8005456:	da0f      	bge.n	8005478 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	4613      	mov	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	4413      	add	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	3338      	adds	r3, #56	; 0x38
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	3304      	adds	r3, #4
 800546e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	705a      	strb	r2, [r3, #1]
 8005476:	e00d      	b.n	8005494 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_PCD_EP_SetStall+0x82>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e01e      	b.n	80054f2 <HAL_PCD_EP_SetStall+0xc0>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f006 fad4 	bl	800ba70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10a      	bne.n	80054e8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	b2d9      	uxtb	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054e2:	461a      	mov	r2, r3
 80054e4:	f006 fcc6 	bl	800be74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f003 020f 	and.w	r2, r3, #15
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d901      	bls.n	8005518 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e042      	b.n	800559e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800551c:	2b00      	cmp	r3, #0
 800551e:	da0f      	bge.n	8005540 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	3338      	adds	r3, #56	; 0x38
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4413      	add	r3, r2
 8005534:	3304      	adds	r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	705a      	strb	r2, [r3, #1]
 800553e:	e00f      	b.n	8005560 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 020f 	and.w	r2, r3, #15
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	3304      	adds	r3, #4
 8005558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_PCD_EP_ClrStall+0x86>
 800557c:	2302      	movs	r3, #2
 800557e:	e00e      	b.n	800559e <HAL_PCD_EP_ClrStall+0xa4>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68f9      	ldr	r1, [r7, #12]
 800558e:	4618      	mov	r0, r3
 8005590:	f006 fadc 	bl	800bb4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da0c      	bge.n	80055d4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	3338      	adds	r3, #56	; 0x38
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	3304      	adds	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e00c      	b.n	80055ee <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055d4:	78fb      	ldrb	r3, [r7, #3]
 80055d6:	f003 020f 	and.w	r2, r3, #15
 80055da:	4613      	mov	r3, r2
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	3304      	adds	r3, #4
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f006 f8fb 	bl	800b7f0 <USB_EPStopXfer>
 80055fa:	4603      	mov	r3, r0
 80055fc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	429a      	cmp	r2, r3
 800563a:	d901      	bls.n	8005640 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e06c      	b.n	800571a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	429a      	cmp	r2, r3
 8005654:	d902      	bls.n	800565c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3303      	adds	r3, #3
 8005660:	089b      	lsrs	r3, r3, #2
 8005662:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005664:	e02b      	b.n	80056be <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	429a      	cmp	r2, r3
 800567a:	d902      	bls.n	8005682 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3303      	adds	r3, #3
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800569a:	b2db      	uxtb	r3, r3
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	4603      	mov	r3, r0
 80056a0:	6978      	ldr	r0, [r7, #20]
 80056a2:	f006 f94f 	bl	800b944 <USB_WritePacket>

    ep->xfer_buff  += len;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d809      	bhi.n	80056e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056dc:	429a      	cmp	r2, r3
 80056de:	d203      	bcs.n	80056e8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1be      	bne.n	8005666 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d811      	bhi.n	8005718 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	2201      	movs	r2, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	43db      	mvns	r3, r3
 800570e:	6939      	ldr	r1, [r7, #16]
 8005710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005714:	4013      	ands	r3, r2
 8005716:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	333c      	adds	r3, #60	; 0x3c
 800573c:	3304      	adds	r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d17b      	bne.n	8005852 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4a61      	ldr	r2, [pc, #388]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	f240 80b9 	bls.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80b3 	beq.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578c:	6093      	str	r3, [r2, #8]
 800578e:	e0a7      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	461a      	mov	r2, r3
 80057a8:	2320      	movs	r3, #32
 80057aa:	6093      	str	r3, [r2, #8]
 80057ac:	e098      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8093 	bne.w	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4a4b      	ldr	r2, [pc, #300]	; (80058ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d90f      	bls.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d8:	461a      	mov	r2, r3
 80057da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057de:	6093      	str	r3, [r2, #8]
 80057e0:	e07e      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	4413      	add	r3, r2
 80057f4:	3304      	adds	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	440b      	add	r3, r1
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d114      	bne.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800582c:	461a      	mov	r2, r3
 800582e:	2101      	movs	r1, #1
 8005830:	f006 fb20 	bl	800be74 <USB_EP0_OutStart>
 8005834:	e006      	b.n	8005844 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f008 ffd8 	bl	800e800 <HAL_PCD_DataOutStageCallback>
 8005850:	e046      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d124      	bne.n	80058a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005876:	6093      	str	r3, [r2, #8]
 8005878:	e032      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	2320      	movs	r3, #32
 8005894:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f008 ffaf 	bl	800e800 <HAL_PCD_DataOutStageCallback>
 80058a2:	e01d      	b.n	80058e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d114      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d108      	bne.n	80058d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058cc:	461a      	mov	r2, r3
 80058ce:	2100      	movs	r1, #0
 80058d0:	f006 fad0 	bl	800be74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f008 ff90 	bl	800e800 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	4f54300a 	.word	0x4f54300a
 80058f0:	4f54310a 	.word	0x4f54310a

080058f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	333c      	adds	r3, #60	; 0x3c
 800590c:	3304      	adds	r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d90e      	bls.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005940:	461a      	mov	r2, r3
 8005942:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005946:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f008 ff47 	bl	800e7dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a0a      	ldr	r2, [pc, #40]	; (800597c <PCD_EP_OutSetupPacket_int+0x88>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d90c      	bls.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d108      	bne.n	8005970 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005968:	461a      	mov	r2, r3
 800596a:	2101      	movs	r1, #1
 800596c:	f006 fa82 	bl	800be74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	4f54300a 	.word	0x4f54300a

08005980 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
 800598c:	4613      	mov	r3, r2
 800598e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d107      	bne.n	80059ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800599e:	883b      	ldrh	r3, [r7, #0]
 80059a0:	0419      	lsls	r1, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
 80059ac:	e028      	b.n	8005a00 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059bc:	2300      	movs	r3, #0
 80059be:	73fb      	strb	r3, [r7, #15]
 80059c0:	e00d      	b.n	80059de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3340      	adds	r3, #64	; 0x40
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	3301      	adds	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	7bfa      	ldrb	r2, [r7, #15]
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3ec      	bcc.n	80059c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e8:	883b      	ldrh	r3, [r7, #0]
 80059ea:	0418      	lsls	r0, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	4302      	orrs	r2, r0
 80059f8:	3340      	adds	r3, #64	; 0x40
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	887a      	ldrh	r2, [r7, #2]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a5e:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	10000003 	.word	0x10000003

08005a78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	460b      	mov	r3, r1
 8005a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005a98:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d00a      	beq.n	8005aba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005aa4:	4b26      	ldr	r3, [pc, #152]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e03f      	b.n	8005b36 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e03d      	b.n	8005b36 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005aba:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005ac2:	491f      	ldr	r1, [pc, #124]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005aca:	f7fc fbb1 	bl	8002230 <HAL_GetTick>
 8005ace:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ad0:	e009      	b.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ad2:	f7fc fbad 	bl	8002230 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ae0:	d901      	bls.n	8005ae6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e027      	b.n	8005b36 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b1e      	cmp	r3, #30
 8005af8:	d008      	beq.n	8005b0c <HAL_PWREx_ConfigSupply+0x7c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b2e      	cmp	r3, #46	; 0x2e
 8005afe:	d005      	beq.n	8005b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b1d      	cmp	r3, #29
 8005b04:	d002      	beq.n	8005b0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b2d      	cmp	r3, #45	; 0x2d
 8005b0a:	d113      	bne.n	8005b34 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b0c:	f7fc fb90 	bl	8002230 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b12:	e009      	b.n	8005b28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b14:	f7fc fb8c 	bl	8002230 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b22:	d901      	bls.n	8005b28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e006      	b.n	8005b36 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0311 	and.w	r3, r3, #17
 8005b30:	2b11      	cmp	r3, #17
 8005b32:	d1ef      	bne.n	8005b14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	58024800 	.word	0x58024800

08005b44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4a04      	ldr	r2, [pc, #16]	; (8005b60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b52:	60d3      	str	r3, [r2, #12]
}
 8005b54:	bf00      	nop
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	58024800 	.word	0x58024800

08005b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e3c8      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8087 	beq.w	8005c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b84:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b8e:	4b86      	ldr	r3, [pc, #536]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b10      	cmp	r3, #16
 8005b98:	d007      	beq.n	8005baa <HAL_RCC_OscConfig+0x46>
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	2b18      	cmp	r3, #24
 8005b9e:	d110      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x5e>
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d10b      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005baa:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d06c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x12c>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d168      	bne.n	8005c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e3a2      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bca:	d106      	bne.n	8005bda <HAL_RCC_OscConfig+0x76>
 8005bcc:	4b76      	ldr	r3, [pc, #472]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a75      	ldr	r2, [pc, #468]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e02e      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0x98>
 8005be2:	4b71      	ldr	r3, [pc, #452]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a70      	ldr	r2, [pc, #448]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b6e      	ldr	r3, [pc, #440]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a6d      	ldr	r2, [pc, #436]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e01d      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCC_OscConfig+0xbc>
 8005c06:	4b68      	ldr	r3, [pc, #416]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a67      	ldr	r2, [pc, #412]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	4b65      	ldr	r3, [pc, #404]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a64      	ldr	r2, [pc, #400]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCC_OscConfig+0xd4>
 8005c20:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a60      	ldr	r2, [pc, #384]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	4b5e      	ldr	r3, [pc, #376]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a5d      	ldr	r2, [pc, #372]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d013      	beq.n	8005c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fc faf6 	bl	8002230 <HAL_GetTick>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c48:	f7fc faf2 	bl	8002230 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b64      	cmp	r3, #100	; 0x64
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e356      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c5a:	4b53      	ldr	r3, [pc, #332]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f0      	beq.n	8005c48 <HAL_RCC_OscConfig+0xe4>
 8005c66:	e014      	b.n	8005c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fc fae2 	bl	8002230 <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fc fade 	bl	8002230 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	; 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e342      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c82:	4b49      	ldr	r3, [pc, #292]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x10c>
 8005c8e:	e000      	b.n	8005c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 808c 	beq.w	8005db8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca0:	4b41      	ldr	r3, [pc, #260]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005caa:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x162>
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	2b18      	cmp	r3, #24
 8005cba:	d137      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1c8>
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d132      	bne.n	8005d2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc6:	4b38      	ldr	r3, [pc, #224]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_RCC_OscConfig+0x17a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e314      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cde:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 0219 	bic.w	r2, r3, #25
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	492f      	ldr	r1, [pc, #188]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fc fa9e 	bl	8002230 <HAL_GetTick>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cf8:	f7fc fa9a 	bl	8002230 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e2fe      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d0a:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0f0      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	4920      	ldr	r1, [pc, #128]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2a:	e045      	b.n	8005db8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d026      	beq.n	8005d82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d34:	4b1c      	ldr	r3, [pc, #112]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 0219 	bic.w	r2, r3, #25
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	4919      	ldr	r1, [pc, #100]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fc fa73 	bl	8002230 <HAL_GetTick>
 8005d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d4e:	f7fc fa6f 	bl	8002230 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e2d3      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d6c:	4b0e      	ldr	r3, [pc, #56]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	061b      	lsls	r3, r3, #24
 8005d7a:	490b      	ldr	r1, [pc, #44]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	e01a      	b.n	8005db8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d82:	4b09      	ldr	r3, [pc, #36]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <HAL_RCC_OscConfig+0x244>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fc fa4f 	bl	8002230 <HAL_GetTick>
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005d94:	e00a      	b.n	8005dac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d96:	f7fc fa4b 	bl	8002230 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d903      	bls.n	8005dac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e2af      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
 8005da8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005dac:	4b96      	ldr	r3, [pc, #600]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ee      	bne.n	8005d96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d06a      	beq.n	8005e9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc4:	4b90      	ldr	r3, [pc, #576]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dce:	4b8e      	ldr	r3, [pc, #568]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d007      	beq.n	8005dea <HAL_RCC_OscConfig+0x286>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b18      	cmp	r3, #24
 8005dde:	d11b      	bne.n	8005e18 <HAL_RCC_OscConfig+0x2b4>
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d116      	bne.n	8005e18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005dea:	4b87      	ldr	r3, [pc, #540]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCC_OscConfig+0x29e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	69db      	ldr	r3, [r3, #28]
 8005dfa:	2b80      	cmp	r3, #128	; 0x80
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e282      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e02:	4b81      	ldr	r3, [pc, #516]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	497d      	ldr	r1, [pc, #500]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e16:	e040      	b.n	8005e9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d023      	beq.n	8005e68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e20:	4b79      	ldr	r3, [pc, #484]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a78      	ldr	r2, [pc, #480]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fc fa00 	bl	8002230 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e34:	f7fc f9fc 	bl	8002230 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e260      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e46:	4b70      	ldr	r3, [pc, #448]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e52:	4b6d      	ldr	r3, [pc, #436]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	061b      	lsls	r3, r3, #24
 8005e60:	4969      	ldr	r1, [pc, #420]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60cb      	str	r3, [r1, #12]
 8005e66:	e018      	b.n	8005e9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e68:	4b67      	ldr	r3, [pc, #412]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a66      	ldr	r2, [pc, #408]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fc f9dc 	bl	8002230 <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e7c:	f7fc f9d8 	bl	8002230 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e23c      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005e8e:	4b5e      	ldr	r3, [pc, #376]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d036      	beq.n	8005f14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d019      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eae:	4b56      	ldr	r3, [pc, #344]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb2:	4a55      	ldr	r2, [pc, #340]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fc f9b9 	bl	8002230 <HAL_GetTick>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ec2:	f7fc f9b5 	bl	8002230 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e219      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ed4:	4b4c      	ldr	r3, [pc, #304]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x35e>
 8005ee0:	e018      	b.n	8005f14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee2:	4b49      	ldr	r3, [pc, #292]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee6:	4a48      	ldr	r2, [pc, #288]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fc f99f 	bl	8002230 <HAL_GetTick>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fc f99b 	bl	8002230 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1ff      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f08:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f0      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d036      	beq.n	8005f8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d019      	beq.n	8005f5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f28:	4b37      	ldr	r3, [pc, #220]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a36      	ldr	r2, [pc, #216]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f34:	f7fc f97c 	bl	8002230 <HAL_GetTick>
 8005f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f3c:	f7fc f978 	bl	8002230 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e1dc      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0x3d8>
 8005f5a:	e018      	b.n	8005f8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f5c:	4b2a      	ldr	r3, [pc, #168]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a29      	ldr	r2, [pc, #164]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f68:	f7fc f962 	bl	8002230 <HAL_GetTick>
 8005f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f70:	f7fc f95e 	bl	8002230 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e1c2      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005f82:	4b21      	ldr	r3, [pc, #132]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8086 	beq.w	80060a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <HAL_RCC_OscConfig+0x4a8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1a      	ldr	r2, [pc, #104]	; (800600c <HAL_RCC_OscConfig+0x4a8>)
 8005fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fa8:	f7fc f942 	bl	8002230 <HAL_GetTick>
 8005fac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb0:	f7fc f93e 	bl	8002230 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b64      	cmp	r3, #100	; 0x64
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e1a2      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <HAL_RCC_OscConfig+0x4a8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x480>
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4a0b      	ldr	r2, [pc, #44]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe2:	e032      	b.n	800604a <HAL_RCC_OscConfig+0x4e6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d111      	bne.n	8006010 <HAL_RCC_OscConfig+0x4ac>
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a05      	ldr	r2, [pc, #20]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff8:	4b03      	ldr	r3, [pc, #12]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a02      	ldr	r2, [pc, #8]	; (8006008 <HAL_RCC_OscConfig+0x4a4>)
 8005ffe:	f023 0304 	bic.w	r3, r3, #4
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e021      	b.n	800604a <HAL_RCC_OscConfig+0x4e6>
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	58024800 	.word	0x58024800
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b05      	cmp	r3, #5
 8006016:	d10c      	bne.n	8006032 <HAL_RCC_OscConfig+0x4ce>
 8006018:	4b83      	ldr	r3, [pc, #524]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a82      	ldr	r2, [pc, #520]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800601e:	f043 0304 	orr.w	r3, r3, #4
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	4b80      	ldr	r3, [pc, #512]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006028:	4a7f      	ldr	r2, [pc, #508]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	6713      	str	r3, [r2, #112]	; 0x70
 8006030:	e00b      	b.n	800604a <HAL_RCC_OscConfig+0x4e6>
 8006032:	4b7d      	ldr	r3, [pc, #500]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a7c      	ldr	r2, [pc, #496]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
 800603e:	4b7a      	ldr	r3, [pc, #488]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	4a79      	ldr	r2, [pc, #484]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d015      	beq.n	800607e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fc f8ed 	bl	8002230 <HAL_GetTick>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fc f8e9 	bl	8002230 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e14b      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006070:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ee      	beq.n	800605a <HAL_RCC_OscConfig+0x4f6>
 800607c:	e014      	b.n	80060a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607e:	f7fc f8d7 	bl	8002230 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006084:	e00a      	b.n	800609c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006086:	f7fc f8d3 	bl	8002230 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	f241 3288 	movw	r2, #5000	; 0x1388
 8006094:	4293      	cmp	r3, r2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e135      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800609c:	4b62      	ldr	r3, [pc, #392]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1ee      	bne.n	8006086 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 812a 	beq.w	8006306 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80060b2:	4b5d      	ldr	r3, [pc, #372]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ba:	2b18      	cmp	r3, #24
 80060bc:	f000 80ba 	beq.w	8006234 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	f040 8095 	bne.w	80061f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ca:	4b57      	ldr	r3, [pc, #348]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a56      	ldr	r2, [pc, #344]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80060d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d6:	f7fc f8ab 	bl	8002230 <HAL_GetTick>
 80060da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060dc:	e008      	b.n	80060f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060de:	f7fc f8a7 	bl	8002230 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e10b      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060f0:	4b4d      	ldr	r3, [pc, #308]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1f0      	bne.n	80060de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060fc:	4b4a      	ldr	r3, [pc, #296]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80060fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006100:	4b4a      	ldr	r3, [pc, #296]	; (800622c <HAL_RCC_OscConfig+0x6c8>)
 8006102:	4013      	ands	r3, r2
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800610c:	0112      	lsls	r2, r2, #4
 800610e:	430a      	orrs	r2, r1
 8006110:	4945      	ldr	r1, [pc, #276]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006112:	4313      	orrs	r3, r2
 8006114:	628b      	str	r3, [r1, #40]	; 0x28
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	3b01      	subs	r3, #1
 800611c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006124:	3b01      	subs	r3, #1
 8006126:	025b      	lsls	r3, r3, #9
 8006128:	b29b      	uxth	r3, r3
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	3b01      	subs	r3, #1
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	3b01      	subs	r3, #1
 8006140:	061b      	lsls	r3, r3, #24
 8006142:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006146:	4938      	ldr	r1, [pc, #224]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006148:	4313      	orrs	r3, r2
 800614a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800614c:	4b36      	ldr	r3, [pc, #216]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4a35      	ldr	r2, [pc, #212]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006158:	4b33      	ldr	r3, [pc, #204]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800615a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615c:	4b34      	ldr	r3, [pc, #208]	; (8006230 <HAL_RCC_OscConfig+0x6cc>)
 800615e:	4013      	ands	r3, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006164:	00d2      	lsls	r2, r2, #3
 8006166:	4930      	ldr	r1, [pc, #192]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006168:	4313      	orrs	r3, r2
 800616a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800616c:	4b2e      	ldr	r3, [pc, #184]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	f023 020c 	bic.w	r2, r3, #12
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	492b      	ldr	r1, [pc, #172]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800617a:	4313      	orrs	r3, r2
 800617c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800617e:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	f023 0202 	bic.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618a:	4927      	ldr	r1, [pc, #156]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800618c:	4313      	orrs	r3, r2
 800618e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 8006196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800619c:	4b22      	ldr	r3, [pc, #136]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	4a21      	ldr	r2, [pc, #132]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80061a8:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fc f830 	bl	8002230 <HAL_GetTick>
 80061d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fc f82c 	bl	8002230 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e090      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061e6:	4b10      	ldr	r3, [pc, #64]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x670>
 80061f2:	e088      	b.n	8006306 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a0b      	ldr	r2, [pc, #44]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 80061fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fc f816 	bl	8002230 <HAL_GetTick>
 8006204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006208:	f7fc f812 	bl	8002230 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e076      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <HAL_RCC_OscConfig+0x6c4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x6a4>
 8006226:	e06e      	b.n	8006306 <HAL_RCC_OscConfig+0x7a2>
 8006228:	58024400 	.word	0x58024400
 800622c:	fffffc0c 	.word	0xfffffc0c
 8006230:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006234:	4b36      	ldr	r3, [pc, #216]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 8006236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800623a:	4b35      	ldr	r3, [pc, #212]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	2b01      	cmp	r3, #1
 8006246:	d031      	beq.n	80062ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f003 0203 	and.w	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006252:	429a      	cmp	r2, r3
 8006254:	d12a      	bne.n	80062ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	091b      	lsrs	r3, r3, #4
 800625a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d122      	bne.n	80062ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d11a      	bne.n	80062ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0a5b      	lsrs	r3, r3, #9
 800627a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d111      	bne.n	80062ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	0c1b      	lsrs	r3, r3, #16
 800628c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d108      	bne.n	80062ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	0e1b      	lsrs	r3, r3, #24
 800629e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e02b      	b.n	8006308 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80062b0:	4b17      	ldr	r3, [pc, #92]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d01f      	beq.n	8006306 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80062c6:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ca:	4a11      	ldr	r2, [pc, #68]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062cc:	f023 0301 	bic.w	r3, r3, #1
 80062d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062d2:	f7fb ffad 	bl	8002230 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80062d8:	bf00      	nop
 80062da:	f7fb ffa9 	bl	8002230 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d0f9      	beq.n	80062da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <HAL_RCC_OscConfig+0x7b0>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80062f2:	00d2      	lsls	r2, r2, #3
 80062f4:	4906      	ldr	r1, [pc, #24]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4a04      	ldr	r2, [pc, #16]	; (8006310 <HAL_RCC_OscConfig+0x7ac>)
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3730      	adds	r7, #48	; 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	58024400 	.word	0x58024400
 8006314:	ffff0007 	.word	0xffff0007

08006318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e19c      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800632c:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d910      	bls.n	800635c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4985      	ldr	r1, [pc, #532]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b83      	ldr	r3, [pc, #524]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e184      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d010      	beq.n	800638a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	4b7b      	ldr	r3, [pc, #492]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006374:	429a      	cmp	r2, r3
 8006376:	d908      	bls.n	800638a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006378:	4b78      	ldr	r3, [pc, #480]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	4975      	ldr	r1, [pc, #468]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006386:	4313      	orrs	r3, r2
 8006388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d010      	beq.n	80063b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	4b70      	ldr	r3, [pc, #448]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d908      	bls.n	80063b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063a6:	4b6d      	ldr	r3, [pc, #436]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	496a      	ldr	r1, [pc, #424]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d908      	bls.n	80063e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80063d4:	4b61      	ldr	r3, [pc, #388]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	495e      	ldr	r1, [pc, #376]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d010      	beq.n	8006414 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	4b59      	ldr	r3, [pc, #356]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063fe:	429a      	cmp	r2, r3
 8006400:	d908      	bls.n	8006414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006402:	4b56      	ldr	r3, [pc, #344]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	4953      	ldr	r1, [pc, #332]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006410:	4313      	orrs	r3, r2
 8006412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d010      	beq.n	8006442 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	4b4d      	ldr	r3, [pc, #308]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	429a      	cmp	r2, r3
 800642e:	d908      	bls.n	8006442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006430:	4b4a      	ldr	r3, [pc, #296]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f023 020f 	bic.w	r2, r3, #15
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4947      	ldr	r1, [pc, #284]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800643e:	4313      	orrs	r3, r2
 8006440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d055      	beq.n	80064fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800644e:	4b43      	ldr	r3, [pc, #268]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	4940      	ldr	r1, [pc, #256]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800645c:	4313      	orrs	r3, r2
 800645e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d107      	bne.n	8006478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006468:	4b3c      	ldr	r3, [pc, #240]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d121      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e0f6      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b03      	cmp	r3, #3
 800647e:	d107      	bne.n	8006490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e0ea      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006498:	4b30      	ldr	r3, [pc, #192]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0de      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064a8:	4b2c      	ldr	r3, [pc, #176]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0d6      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064b8:	4b28      	ldr	r3, [pc, #160]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f023 0207 	bic.w	r2, r3, #7
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4925      	ldr	r1, [pc, #148]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ca:	f7fb feb1 	bl	8002230 <HAL_GetTick>
 80064ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d0:	e00a      	b.n	80064e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d2:	f7fb fead 	bl	8002230 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0be      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e8:	4b1c      	ldr	r3, [pc, #112]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d1eb      	bne.n	80064d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68da      	ldr	r2, [r3, #12]
 800650a:	4b14      	ldr	r3, [pc, #80]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	429a      	cmp	r2, r3
 8006514:	d208      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f023 020f 	bic.w	r2, r3, #15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	490e      	ldr	r1, [pc, #56]	; (800655c <HAL_RCC_ClockConfig+0x244>)
 8006524:	4313      	orrs	r3, r2
 8006526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006528:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 030f 	and.w	r3, r3, #15
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d214      	bcs.n	8006560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 020f 	bic.w	r2, r3, #15
 800653e:	4906      	ldr	r1, [pc, #24]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	4313      	orrs	r3, r2
 8006544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006546:	4b04      	ldr	r3, [pc, #16]	; (8006558 <HAL_RCC_ClockConfig+0x240>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	429a      	cmp	r2, r3
 8006552:	d005      	beq.n	8006560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e086      	b.n	8006666 <HAL_RCC_ClockConfig+0x34e>
 8006558:	52002000 	.word	0x52002000
 800655c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	4b3f      	ldr	r3, [pc, #252]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006578:	429a      	cmp	r2, r3
 800657a:	d208      	bcs.n	800658e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800657c:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	4939      	ldr	r1, [pc, #228]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 800658a:	4313      	orrs	r3, r2
 800658c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	d010      	beq.n	80065bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d208      	bcs.n	80065bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065aa:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065ac:	69db      	ldr	r3, [r3, #28]
 80065ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	492e      	ldr	r1, [pc, #184]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d010      	beq.n	80065ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699a      	ldr	r2, [r3, #24]
 80065cc:	4b28      	ldr	r3, [pc, #160]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d208      	bcs.n	80065ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	4922      	ldr	r1, [pc, #136]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d010      	beq.n	8006618 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006602:	429a      	cmp	r2, r3
 8006604:	d208      	bcs.n	8006618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	4917      	ldr	r1, [pc, #92]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006614:	4313      	orrs	r3, r2
 8006616:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006618:	f000 f834 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	4912      	ldr	r1, [pc, #72]	; (8006674 <HAL_RCC_ClockConfig+0x35c>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
 8006634:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006636:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <HAL_RCC_ClockConfig+0x358>)
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	4a0d      	ldr	r2, [pc, #52]	; (8006674 <HAL_RCC_ClockConfig+0x35c>)
 8006640:	5cd3      	ldrb	r3, [r2, r3]
 8006642:	f003 031f 	and.w	r3, r3, #31
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	fa22 f303 	lsr.w	r3, r2, r3
 800664c:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <HAL_RCC_ClockConfig+0x360>)
 800664e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <HAL_RCC_ClockConfig+0x364>)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <HAL_RCC_ClockConfig+0x368>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb fd9e 	bl	800219c <HAL_InitTick>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	58024400 	.word	0x58024400
 8006674:	08010b78 	.word	0x08010b78
 8006678:	24000004 	.word	0x24000004
 800667c:	24000000 	.word	0x24000000
 8006680:	24000008 	.word	0x24000008

08006684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006684:	b480      	push	{r7}
 8006686:	b089      	sub	sp, #36	; 0x24
 8006688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800668a:	4bb3      	ldr	r3, [pc, #716]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006692:	2b18      	cmp	r3, #24
 8006694:	f200 8155 	bhi.w	8006942 <HAL_RCC_GetSysClockFreq+0x2be>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	08006705 	.word	0x08006705
 80066a4:	08006943 	.word	0x08006943
 80066a8:	08006943 	.word	0x08006943
 80066ac:	08006943 	.word	0x08006943
 80066b0:	08006943 	.word	0x08006943
 80066b4:	08006943 	.word	0x08006943
 80066b8:	08006943 	.word	0x08006943
 80066bc:	08006943 	.word	0x08006943
 80066c0:	0800672b 	.word	0x0800672b
 80066c4:	08006943 	.word	0x08006943
 80066c8:	08006943 	.word	0x08006943
 80066cc:	08006943 	.word	0x08006943
 80066d0:	08006943 	.word	0x08006943
 80066d4:	08006943 	.word	0x08006943
 80066d8:	08006943 	.word	0x08006943
 80066dc:	08006943 	.word	0x08006943
 80066e0:	08006731 	.word	0x08006731
 80066e4:	08006943 	.word	0x08006943
 80066e8:	08006943 	.word	0x08006943
 80066ec:	08006943 	.word	0x08006943
 80066f0:	08006943 	.word	0x08006943
 80066f4:	08006943 	.word	0x08006943
 80066f8:	08006943 	.word	0x08006943
 80066fc:	08006943 	.word	0x08006943
 8006700:	08006737 	.word	0x08006737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006704:	4b94      	ldr	r3, [pc, #592]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006710:	4b91      	ldr	r3, [pc, #580]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	4a90      	ldr	r2, [pc, #576]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006722:	e111      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006724:	4b8d      	ldr	r3, [pc, #564]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006726:	61bb      	str	r3, [r7, #24]
      break;
 8006728:	e10e      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800672a:	4b8d      	ldr	r3, [pc, #564]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800672c:	61bb      	str	r3, [r7, #24]
      break;
 800672e:	e10b      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006730:	4b8c      	ldr	r3, [pc, #560]	; (8006964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006732:	61bb      	str	r3, [r7, #24]
      break;
 8006734:	e108      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006736:	4b88      	ldr	r3, [pc, #544]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006740:	4b85      	ldr	r3, [pc, #532]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800674a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800674c:	4b82      	ldr	r3, [pc, #520]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006756:	4b80      	ldr	r3, [pc, #512]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	08db      	lsrs	r3, r3, #3
 800675c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800676e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80e1 	beq.w	800693c <HAL_RCC_GetSysClockFreq+0x2b8>
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b02      	cmp	r3, #2
 800677e:	f000 8083 	beq.w	8006888 <HAL_RCC_GetSysClockFreq+0x204>
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b02      	cmp	r3, #2
 8006786:	f200 80a1 	bhi.w	80068cc <HAL_RCC_GetSysClockFreq+0x248>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x114>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d056      	beq.n	8006844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006796:	e099      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006798:	4b6f      	ldr	r3, [pc, #444]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02d      	beq.n	8006800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a4:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	08db      	lsrs	r3, r3, #3
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	4a6b      	ldr	r2, [pc, #428]	; (800695c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	ee07 3a90 	vmov	s15, r3
 80067c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ce:	4b62      	ldr	r3, [pc, #392]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067de:	ed97 6a02 	vldr	s12, [r7, #8]
 80067e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80067fe:	e087      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800696c <HAL_RCC_GetSysClockFreq+0x2e8>
 800680e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006812:	4b51      	ldr	r3, [pc, #324]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006822:	ed97 6a02 	vldr	s12, [r7, #8]
 8006826:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800682a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006842:	e065      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006856:	4b40      	ldr	r3, [pc, #256]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800685e:	ee07 3a90 	vmov	s15, r3
 8006862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006866:	ed97 6a02 	vldr	s12, [r7, #8]
 800686a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800686e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800687e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006886:	e043      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689a:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a2:	ee07 3a90 	vmov	s15, r3
 80068a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ca:	e021      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068de:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80068f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800690e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006910:	4b11      	ldr	r3, [pc, #68]	; (8006958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	0a5b      	lsrs	r3, r3, #9
 8006916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691a:	3301      	adds	r3, #1
 800691c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006928:	edd7 6a07 	vldr	s13, [r7, #28]
 800692c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006934:	ee17 3a90 	vmov	r3, s15
 8006938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800693a:	e005      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	61bb      	str	r3, [r7, #24]
      break;
 8006940:	e002      	b.n	8006948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006944:	61bb      	str	r3, [r7, #24]
      break;
 8006946:	bf00      	nop
  }

  return sysclockfreq;
 8006948:	69bb      	ldr	r3, [r7, #24]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3724      	adds	r7, #36	; 0x24
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	03d09000 	.word	0x03d09000
 8006960:	003d0900 	.word	0x003d0900
 8006964:	017d7840 	.word	0x017d7840
 8006968:	46000000 	.word	0x46000000
 800696c:	4c742400 	.word	0x4c742400
 8006970:	4a742400 	.word	0x4a742400
 8006974:	4bbebc20 	.word	0x4bbebc20

08006978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800697e:	f7ff fe81 	bl	8006684 <HAL_RCC_GetSysClockFreq>
 8006982:	4602      	mov	r2, r0
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	490f      	ldr	r1, [pc, #60]	; (80069cc <HAL_RCC_GetHCLKFreq+0x54>)
 8006990:	5ccb      	ldrb	r3, [r1, r3]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	fa22 f303 	lsr.w	r3, r2, r3
 800699a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800699c:	4b0a      	ldr	r3, [pc, #40]	; (80069c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <HAL_RCC_GetHCLKFreq+0x54>)
 80069a6:	5cd3      	ldrb	r3, [r2, r3]
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	fa22 f303 	lsr.w	r3, r2, r3
 80069b2:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069b6:	4a07      	ldr	r2, [pc, #28]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	58024400 	.word	0x58024400
 80069cc:	08010b78 	.word	0x08010b78
 80069d0:	24000004 	.word	0x24000004
 80069d4:	24000000 	.word	0x24000000

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80069dc:	f7ff ffcc 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	091b      	lsrs	r3, r3, #4
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	f003 031f 	and.w	r3, r3, #31
 80069f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	58024400 	.word	0x58024400
 8006a00:	08010b78 	.word	0x08010b78

08006a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006a08:	f7ff ffb6 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	4904      	ldr	r1, [pc, #16]	; (8006a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a1a:	5ccb      	ldrb	r3, [r1, r3]
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	58024400 	.word	0x58024400
 8006a2c:	08010b78 	.word	0x08010b78

08006a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b0c6      	sub	sp, #280	; 0x118
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006a42:	2300      	movs	r3, #0
 8006a44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006a54:	2500      	movs	r5, #0
 8006a56:	ea54 0305 	orrs.w	r3, r4, r5
 8006a5a:	d049      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a66:	d02f      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006a68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a6c:	d828      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a72:	d01a      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a78:	d822      	bhi.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a82:	d007      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a84:	e01c      	b.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a86:	4bab      	ldr	r3, [pc, #684]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	4aaa      	ldr	r2, [pc, #680]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006a92:	e01a      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	3308      	adds	r3, #8
 8006a9a:	2102      	movs	r1, #2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fc25 	bl	80082ec <RCCEx_PLL2_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006aa8:	e00f      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aae:	3328      	adds	r3, #40	; 0x28
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fccc 	bl	8008450 <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006abe:	e004      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ad2:	4b98      	ldr	r3, [pc, #608]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae0:	4a94      	ldr	r2, [pc, #592]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	6513      	str	r3, [r2, #80]	; 0x50
 8006ae6:	e003      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006afc:	f04f 0900 	mov.w	r9, #0
 8006b00:	ea58 0309 	orrs.w	r3, r8, r9
 8006b04:	d047      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d82a      	bhi.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b2d 	.word	0x08006b2d
 8006b1c:	08006b3b 	.word	0x08006b3b
 8006b20:	08006b51 	.word	0x08006b51
 8006b24:	08006b6f 	.word	0x08006b6f
 8006b28:	08006b6f 	.word	0x08006b6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b2c:	4b81      	ldr	r3, [pc, #516]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b30:	4a80      	ldr	r2, [pc, #512]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b38:	e01a      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3e:	3308      	adds	r3, #8
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fbd2 	bl	80082ec <RCCEx_PLL2_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b4e:	e00f      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b54:	3328      	adds	r3, #40	; 0x28
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 fc79 	bl	8008450 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b64:	e004      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b78:	4b6e      	ldr	r3, [pc, #440]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b7c:	f023 0107 	bic.w	r1, r3, #7
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	4a6b      	ldr	r2, [pc, #428]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	6513      	str	r3, [r2, #80]	; 0x50
 8006b8c:	e003      	b.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006ba2:	f04f 0b00 	mov.w	fp, #0
 8006ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006baa:	d05b      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bb4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006bb8:	d03b      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006bba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006bbe:	d834      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc4:	d037      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bca:	d82e      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bd0:	d033      	beq.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006bd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006bd6:	d828      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bdc:	d01a      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be2:	d822      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d003      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bec:	d007      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006bee:	e01c      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf0:	4b50      	ldr	r3, [pc, #320]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a4f      	ldr	r2, [pc, #316]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bfc:	e01e      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c02:	3308      	adds	r3, #8
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fb70 	bl	80082ec <RCCEx_PLL2_Config>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c12:	e013      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	3328      	adds	r3, #40	; 0x28
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 fc17 	bl	8008450 <RCCEx_PLL3_Config>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c28:	e008      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c30:	e004      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c32:	bf00      	nop
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c36:	bf00      	nop
 8006c38:	e000      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006c44:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c54:	4a37      	ldr	r2, [pc, #220]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6593      	str	r3, [r2, #88]	; 0x58
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006c7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d05d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c8c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c90:	d03b      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006c92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c96:	d834      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c9c:	d037      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ca2:	d82e      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ca4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ca8:	d033      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006cae:	d828      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cb4:	d01a      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cba:	d822      	bhi.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc4:	d007      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006cc6:	e01c      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cd4:	e01e      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cda:	3308      	adds	r3, #8
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 fb04 	bl	80082ec <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cea:	e013      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	3328      	adds	r3, #40	; 0x28
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fbab 	bl	8008450 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d00:	e008      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d08:	e004      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d0a:	bf00      	nop
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d20:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d2c:	4a01      	ldr	r2, [pc, #4]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	6593      	str	r3, [r2, #88]	; 0x58
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006d4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006d50:	2300      	movs	r3, #0
 8006d52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	d03a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	2b30      	cmp	r3, #48	; 0x30
 8006d68:	d01f      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006d6a:	2b30      	cmp	r3, #48	; 0x30
 8006d6c:	d819      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d00c      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d815      	bhi.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d019      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d111      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7e:	4baa      	ldr	r3, [pc, #680]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	4aa9      	ldr	r2, [pc, #676]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006d8a:	e011      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d90:	3308      	adds	r3, #8
 8006d92:	2102      	movs	r1, #2
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 faa9 	bl	80082ec <RCCEx_PLL2_Config>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006da8:	e002      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006daa:	bf00      	nop
 8006dac:	e000      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10a      	bne.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006db8:	4b9b      	ldr	r3, [pc, #620]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	4a98      	ldr	r2, [pc, #608]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dc8:	430b      	orrs	r3, r1
 8006dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dcc:	e003      	b.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006de6:	2300      	movs	r3, #0
 8006de8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006dec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006df0:	460b      	mov	r3, r1
 8006df2:	4313      	orrs	r3, r2
 8006df4:	d051      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e00:	d035      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e06:	d82e      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e0c:	d031      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006e0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e12:	d828      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e18:	d01a      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	d822      	bhi.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e28:	d007      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006e2a:	e01c      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e2c:	4b7e      	ldr	r3, [pc, #504]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	4a7d      	ldr	r2, [pc, #500]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e38:	e01c      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3e:	3308      	adds	r3, #8
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fa52 	bl	80082ec <RCCEx_PLL2_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e4e:	e011      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e54:	3328      	adds	r3, #40	; 0x28
 8006e56:	2100      	movs	r1, #0
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 faf9 	bl	8008450 <RCCEx_PLL3_Config>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006e64:	e006      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e6c:	e002      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e6e:	bf00      	nop
 8006e70:	e000      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e7c:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8a:	4a67      	ldr	r2, [pc, #412]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8006e90:	e003      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eb0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	d053      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ec4:	d033      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006eca:	d82c      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed0:	d02f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ed6:	d826      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006edc:	d02b      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ee2:	d820      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee8:	d012      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eee:	d81a      	bhi.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d022      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d115      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	3308      	adds	r3, #8
 8006f00:	2101      	movs	r1, #1
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 f9f2 	bl	80082ec <RCCEx_PLL2_Config>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f0e:	e015      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f14:	3328      	adds	r3, #40	; 0x28
 8006f16:	2101      	movs	r1, #1
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fa99 	bl	8008450 <RCCEx_PLL3_Config>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006f24:	e00a      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f2c:	e006      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f2e:	bf00      	nop
 8006f30:	e004      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006f44:	4b38      	ldr	r3, [pc, #224]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	4a35      	ldr	r2, [pc, #212]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f54:	430b      	orrs	r3, r1
 8006f56:	6513      	str	r3, [r2, #80]	; 0x50
 8006f58:	e003      	b.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f72:	2300      	movs	r3, #0
 8006f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	d058      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f8e:	d033      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f94:	d82c      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9a:	d02f      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d826      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fa6:	d02b      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fac:	d820      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb2:	d012      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d81a      	bhi.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d022      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fc2:	d115      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc8:	3308      	adds	r3, #8
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 f98d 	bl	80082ec <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fd8:	e015      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fde:	3328      	adds	r3, #40	; 0x28
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 fa34 	bl	8008450 <RCCEx_PLL3_Config>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006fee:	e00a      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ff6:	e006      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e004      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ffc:	bf00      	nop
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10e      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007012:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800701e:	4a02      	ldr	r2, [pc, #8]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007020:	430b      	orrs	r3, r1
 8007022:	6593      	str	r3, [r2, #88]	; 0x58
 8007024:	e006      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007026:	bf00      	nop
 8007028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007030:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007044:	2300      	movs	r3, #0
 8007046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800704a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800704e:	460b      	mov	r3, r1
 8007050:	4313      	orrs	r3, r2
 8007052:	d037      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d00e      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d816      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d018      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800706a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706e:	d111      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007070:	4bc4      	ldr	r3, [pc, #784]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	4ac3      	ldr	r2, [pc, #780]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800707c:	e00f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007082:	3308      	adds	r3, #8
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f001 f930 	bl	80082ec <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80070a6:	4bb7      	ldr	r3, [pc, #732]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b4:	4ab3      	ldr	r2, [pc, #716]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6513      	str	r3, [r2, #80]	; 0x50
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80070d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d039      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80070e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d81c      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	08007131 	.word	0x08007131
 80070f8:	08007105 	.word	0x08007105
 80070fc:	08007113 	.word	0x08007113
 8007100:	08007131 	.word	0x08007131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007104:	4b9f      	ldr	r3, [pc, #636]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	4a9e      	ldr	r2, [pc, #632]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007110:	e00f      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007116:	3308      	adds	r3, #8
 8007118:	2102      	movs	r1, #2
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f8e6 	bl	80082ec <RCCEx_PLL2_Config>
 8007120:	4603      	mov	r3, r0
 8007122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007126:	e004      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800712e:	e000      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007132:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800713a:	4b92      	ldr	r3, [pc, #584]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800713c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800713e:	f023 0103 	bic.w	r1, r3, #3
 8007142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007148:	4a8e      	ldr	r2, [pc, #568]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800714a:	430b      	orrs	r3, r1
 800714c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800714e:	e003      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007150:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007154:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007168:	2300      	movs	r3, #0
 800716a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800716e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007172:	460b      	mov	r3, r1
 8007174:	4313      	orrs	r3, r2
 8007176:	f000 8099 	beq.w	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800717a:	4b83      	ldr	r3, [pc, #524]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a82      	ldr	r2, [pc, #520]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007186:	f7fb f853 	bl	8002230 <HAL_GetTick>
 800718a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800718e:	e00b      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007190:	f7fb f84e 	bl	8002230 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b64      	cmp	r3, #100	; 0x64
 800719e:	d903      	bls.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071a6:	e005      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071a8:	4b77      	ldr	r3, [pc, #476]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0ed      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80071b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d173      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071bc:	4b71      	ldr	r3, [pc, #452]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80071c8:	4053      	eors	r3, r2
 80071ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d015      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071d2:	4b6c      	ldr	r3, [pc, #432]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071de:	4b69      	ldr	r3, [pc, #420]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	4a68      	ldr	r2, [pc, #416]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ea:	4b66      	ldr	r3, [pc, #408]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a65      	ldr	r2, [pc, #404]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80071f6:	4a63      	ldr	r2, [pc, #396]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720a:	d118      	bne.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fb f810 	bl	8002230 <HAL_GetTick>
 8007210:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007214:	e00d      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fb f80b 	bl	8002230 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	f241 3388 	movw	r3, #5000	; 0x1388
 8007226:	429a      	cmp	r2, r3
 8007228:	d903      	bls.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8007230:	e005      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007232:	4b54      	ldr	r3, [pc, #336]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0eb      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800723e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007242:	2b00      	cmp	r3, #0
 8007244:	d129      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800724a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800724e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007256:	d10e      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007258:	4b4a      	ldr	r3, [pc, #296]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007268:	091a      	lsrs	r2, r3, #4
 800726a:	4b48      	ldr	r3, [pc, #288]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800726c:	4013      	ands	r3, r2
 800726e:	4a45      	ldr	r2, [pc, #276]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007270:	430b      	orrs	r3, r1
 8007272:	6113      	str	r3, [r2, #16]
 8007274:	e005      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007276:	4b43      	ldr	r3, [pc, #268]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	4a42      	ldr	r2, [pc, #264]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007280:	6113      	str	r3, [r2, #16]
 8007282:	4b40      	ldr	r3, [pc, #256]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007284:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800728e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007292:	4a3c      	ldr	r2, [pc, #240]	; (8007384 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007294:	430b      	orrs	r3, r1
 8007296:	6713      	str	r3, [r2, #112]	; 0x70
 8007298:	e008      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800729a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800729e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80072a2:	e003      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b4:	f002 0301 	and.w	r3, r2, #1
 80072b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072bc:	2300      	movs	r3, #0
 80072be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80072c6:	460b      	mov	r3, r1
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f000 808f 	beq.w	80073ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072d4:	2b28      	cmp	r3, #40	; 0x28
 80072d6:	d871      	bhi.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	080073c5 	.word	0x080073c5
 80072e4:	080073bd 	.word	0x080073bd
 80072e8:	080073bd 	.word	0x080073bd
 80072ec:	080073bd 	.word	0x080073bd
 80072f0:	080073bd 	.word	0x080073bd
 80072f4:	080073bd 	.word	0x080073bd
 80072f8:	080073bd 	.word	0x080073bd
 80072fc:	080073bd 	.word	0x080073bd
 8007300:	08007391 	.word	0x08007391
 8007304:	080073bd 	.word	0x080073bd
 8007308:	080073bd 	.word	0x080073bd
 800730c:	080073bd 	.word	0x080073bd
 8007310:	080073bd 	.word	0x080073bd
 8007314:	080073bd 	.word	0x080073bd
 8007318:	080073bd 	.word	0x080073bd
 800731c:	080073bd 	.word	0x080073bd
 8007320:	080073a7 	.word	0x080073a7
 8007324:	080073bd 	.word	0x080073bd
 8007328:	080073bd 	.word	0x080073bd
 800732c:	080073bd 	.word	0x080073bd
 8007330:	080073bd 	.word	0x080073bd
 8007334:	080073bd 	.word	0x080073bd
 8007338:	080073bd 	.word	0x080073bd
 800733c:	080073bd 	.word	0x080073bd
 8007340:	080073c5 	.word	0x080073c5
 8007344:	080073bd 	.word	0x080073bd
 8007348:	080073bd 	.word	0x080073bd
 800734c:	080073bd 	.word	0x080073bd
 8007350:	080073bd 	.word	0x080073bd
 8007354:	080073bd 	.word	0x080073bd
 8007358:	080073bd 	.word	0x080073bd
 800735c:	080073bd 	.word	0x080073bd
 8007360:	080073c5 	.word	0x080073c5
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073bd 	.word	0x080073bd
 800736c:	080073bd 	.word	0x080073bd
 8007370:	080073bd 	.word	0x080073bd
 8007374:	080073bd 	.word	0x080073bd
 8007378:	080073bd 	.word	0x080073bd
 800737c:	080073bd 	.word	0x080073bd
 8007380:	080073c5 	.word	0x080073c5
 8007384:	58024400 	.word	0x58024400
 8007388:	58024800 	.word	0x58024800
 800738c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	3308      	adds	r3, #8
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ffa7 	bl	80082ec <RCCEx_PLL2_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00f      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073aa:	3328      	adds	r3, #40	; 0x28
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f84e 	bl	8008450 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80073ba:	e004      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073c2:	e000      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073ce:	4bbf      	ldr	r3, [pc, #764]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073dc:	4abb      	ldr	r2, [pc, #748]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073de:	430b      	orrs	r3, r1
 80073e0:	6553      	str	r3, [r2, #84]	; 0x54
 80073e2:	e003      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f002 0302 	and.w	r3, r2, #2
 80073f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073fc:	2300      	movs	r3, #0
 80073fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007402:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007406:	460b      	mov	r3, r1
 8007408:	4313      	orrs	r3, r2
 800740a:	d041      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800740c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007412:	2b05      	cmp	r3, #5
 8007414:	d824      	bhi.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007469 	.word	0x08007469
 8007420:	08007435 	.word	0x08007435
 8007424:	0800744b 	.word	0x0800744b
 8007428:	08007469 	.word	0x08007469
 800742c:	08007469 	.word	0x08007469
 8007430:	08007469 	.word	0x08007469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007438:	3308      	adds	r3, #8
 800743a:	2101      	movs	r1, #1
 800743c:	4618      	mov	r0, r3
 800743e:	f000 ff55 	bl	80082ec <RCCEx_PLL2_Config>
 8007442:	4603      	mov	r3, r0
 8007444:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007448:	e00f      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	3328      	adds	r3, #40	; 0x28
 8007450:	2101      	movs	r1, #1
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fffc 	bl	8008450 <RCCEx_PLL3_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800745e:	e004      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800746a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10a      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007472:	4b96      	ldr	r3, [pc, #600]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	f023 0107 	bic.w	r1, r3, #7
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007480:	4a92      	ldr	r2, [pc, #584]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007482:	430b      	orrs	r3, r1
 8007484:	6553      	str	r3, [r2, #84]	; 0x54
 8007486:	e003      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007488:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800748c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f002 0304 	and.w	r3, r2, #4
 800749c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074a0:	2300      	movs	r3, #0
 80074a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074aa:	460b      	mov	r3, r1
 80074ac:	4313      	orrs	r3, r2
 80074ae:	d044      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	2b05      	cmp	r3, #5
 80074ba:	d825      	bhi.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80074bc:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80074be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c2:	bf00      	nop
 80074c4:	08007511 	.word	0x08007511
 80074c8:	080074dd 	.word	0x080074dd
 80074cc:	080074f3 	.word	0x080074f3
 80074d0:	08007511 	.word	0x08007511
 80074d4:	08007511 	.word	0x08007511
 80074d8:	08007511 	.word	0x08007511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e0:	3308      	adds	r3, #8
 80074e2:	2101      	movs	r1, #1
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 ff01 	bl	80082ec <RCCEx_PLL2_Config>
 80074ea:	4603      	mov	r3, r0
 80074ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80074f0:	e00f      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f6:	3328      	adds	r3, #40	; 0x28
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 ffa8 	bl	8008450 <RCCEx_PLL3_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007506:	e004      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800750e:	e000      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007512:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800751a:	4b6c      	ldr	r3, [pc, #432]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	f023 0107 	bic.w	r1, r3, #7
 8007522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	4a68      	ldr	r2, [pc, #416]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800752c:	430b      	orrs	r3, r1
 800752e:	6593      	str	r3, [r2, #88]	; 0x58
 8007530:	e003      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007536:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f002 0320 	and.w	r3, r2, #32
 8007546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800754a:	2300      	movs	r3, #0
 800754c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007550:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007554:	460b      	mov	r3, r1
 8007556:	4313      	orrs	r3, r2
 8007558:	d055      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800755a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007566:	d033      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800756c:	d82c      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800756e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007572:	d02f      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007578:	d826      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800757a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800757e:	d02b      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007584:	d820      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758a:	d012      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800758c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007590:	d81a      	bhi.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007592:	2b00      	cmp	r3, #0
 8007594:	d022      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800759a:	d115      	bne.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	3308      	adds	r3, #8
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fea1 	bl	80082ec <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075b0:	e015      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b6:	3328      	adds	r3, #40	; 0x28
 80075b8:	2102      	movs	r1, #2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 ff48 	bl	8008450 <RCCEx_PLL3_Config>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80075c6:	e00a      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075ce:	e006      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d0:	bf00      	nop
 80075d2:	e004      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d4:	bf00      	nop
 80075d6:	e002      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075d8:	bf00      	nop
 80075da:	e000      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80075dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10b      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075e6:	4b39      	ldr	r3, [pc, #228]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f6:	4a35      	ldr	r2, [pc, #212]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6553      	str	r3, [r2, #84]	; 0x54
 80075fc:	e003      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007602:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007612:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007616:	2300      	movs	r3, #0
 8007618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800761c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007620:	460b      	mov	r3, r1
 8007622:	4313      	orrs	r3, r2
 8007624:	d058      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800762a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007632:	d033      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007634:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007638:	d82c      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	d02f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007644:	d826      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800764a:	d02b      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800764c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007650:	d820      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007656:	d012      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765c:	d81a      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d022      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007666:	d115      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766c:	3308      	adds	r3, #8
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fe3b 	bl	80082ec <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800767c:	e015      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800767e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007682:	3328      	adds	r3, #40	; 0x28
 8007684:	2102      	movs	r1, #2
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fee2 	bl	8008450 <RCCEx_PLL3_Config>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007692:	e00a      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800769a:	e006      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800769c:	bf00      	nop
 800769e:	e004      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a0:	bf00      	nop
 80076a2:	e002      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a4:	bf00      	nop
 80076a6:	e000      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80076a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10e      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076c2:	4a02      	ldr	r2, [pc, #8]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6593      	str	r3, [r2, #88]	; 0x58
 80076c8:	e006      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80076ca:	bf00      	nop
 80076cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80076d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80076e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80076f2:	460b      	mov	r3, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	d055      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007700:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007704:	d033      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007706:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800770a:	d82c      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800770c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007710:	d02f      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007716:	d826      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007718:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800771c:	d02b      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800771e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007722:	d820      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007728:	d012      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800772e:	d81a      	bhi.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d022      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007738:	d115      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773e:	3308      	adds	r3, #8
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f000 fdd2 	bl	80082ec <RCCEx_PLL2_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800774e:	e015      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	3328      	adds	r3, #40	; 0x28
 8007756:	2102      	movs	r1, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fe79 	bl	8008450 <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007764:	e00a      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800776c:	e006      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800776e:	bf00      	nop
 8007770:	e004      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007772:	bf00      	nop
 8007774:	e002      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007776:	bf00      	nop
 8007778:	e000      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800777a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800777c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10b      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007784:	4ba0      	ldr	r3, [pc, #640]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007794:	4a9c      	ldr	r2, [pc, #624]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007796:	430b      	orrs	r3, r1
 8007798:	6593      	str	r3, [r2, #88]	; 0x58
 800779a:	e003      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800779c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80077a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f002 0308 	and.w	r3, r2, #8
 80077b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077b4:	2300      	movs	r3, #0
 80077b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80077ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80077be:	460b      	mov	r3, r1
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d01e      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d0:	d10c      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80077d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d6:	3328      	adds	r3, #40	; 0x28
 80077d8:	2102      	movs	r1, #2
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fe38 	bl	8008450 <RCCEx_PLL3_Config>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80077ec:	4b86      	ldr	r3, [pc, #536]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077fc:	4a82      	ldr	r2, [pc, #520]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077fe:	430b      	orrs	r3, r1
 8007800:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f002 0310 	and.w	r3, r2, #16
 800780e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007812:	2300      	movs	r3, #0
 8007814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007818:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800781c:	460b      	mov	r3, r1
 800781e:	4313      	orrs	r3, r2
 8007820:	d01e      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800782a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800782e:	d10c      	bne.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	3328      	adds	r3, #40	; 0x28
 8007836:	2102      	movs	r1, #2
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fe09 	bl	8008450 <RCCEx_PLL3_Config>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800784a:	4b6f      	ldr	r3, [pc, #444]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800785a:	4a6b      	ldr	r2, [pc, #428]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800785c:	430b      	orrs	r3, r1
 800785e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800786c:	67bb      	str	r3, [r7, #120]	; 0x78
 800786e:	2300      	movs	r3, #0
 8007870:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007872:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007876:	460b      	mov	r3, r1
 8007878:	4313      	orrs	r3, r2
 800787a:	d03e      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007880:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007888:	d022      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d81b      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d00b      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800789a:	e015      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800789c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078a0:	3308      	adds	r3, #8
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fd21 	bl	80082ec <RCCEx_PLL2_Config>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078b0:	e00f      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b6:	3328      	adds	r3, #40	; 0x28
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fdc8 	bl	8008450 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80078c6:	e004      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80078ce:	e000      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80078d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10b      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078da:	4b4b      	ldr	r3, [pc, #300]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80078e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078ea:	4a47      	ldr	r2, [pc, #284]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ec:	430b      	orrs	r3, r1
 80078ee:	6593      	str	r3, [r2, #88]	; 0x58
 80078f0:	e003      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007906:	673b      	str	r3, [r7, #112]	; 0x70
 8007908:	2300      	movs	r3, #0
 800790a:	677b      	str	r3, [r7, #116]	; 0x74
 800790c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007910:	460b      	mov	r3, r1
 8007912:	4313      	orrs	r3, r2
 8007914:	d03b      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007922:	d01f      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007924:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007928:	d818      	bhi.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800792a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792e:	d003      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007934:	d007      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007936:	e011      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007938:	4b33      	ldr	r3, [pc, #204]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	4a32      	ldr	r2, [pc, #200]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800793e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007944:	e00f      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794a:	3328      	adds	r3, #40	; 0x28
 800794c:	2101      	movs	r1, #1
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fd7e 	bl	8008450 <RCCEx_PLL3_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800795a:	e004      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007966:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800796e:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007972:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800797e:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007980:	430b      	orrs	r3, r1
 8007982:	6553      	str	r3, [r2, #84]	; 0x54
 8007984:	e003      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800798a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800799a:	66bb      	str	r3, [r7, #104]	; 0x68
 800799c:	2300      	movs	r3, #0
 800799e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d034      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80079b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b8:	d007      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80079ba:	e011      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079bc:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079c8:	e00e      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ce:	3308      	adds	r3, #8
 80079d0:	2102      	movs	r1, #2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 fc8a 	bl	80082ec <RCCEx_PLL2_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80079de:	e003      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80079e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10d      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079fe:	4a02      	ldr	r2, [pc, #8]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a00:	430b      	orrs	r3, r1
 8007a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a04:	e006      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007a06:	bf00      	nop
 8007a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a20:	663b      	str	r3, [r7, #96]	; 0x60
 8007a22:	2300      	movs	r3, #0
 8007a24:	667b      	str	r3, [r7, #100]	; 0x64
 8007a26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	d00c      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a34:	3328      	adds	r3, #40	; 0x28
 8007a36:	2102      	movs	r1, #2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 fd09 	bl	8008450 <RCCEx_PLL3_Config>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a58:	2300      	movs	r3, #0
 8007a5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a5c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d036      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a70:	d018      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a76:	d811      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7c:	d014      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a82:	d80b      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d011      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8c:	d106      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a8e:	4bb7      	ldr	r3, [pc, #732]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a92:	4ab6      	ldr	r2, [pc, #728]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a9a:	e008      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007aa2:	e004      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ab6:	4bad      	ldr	r3, [pc, #692]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac4:	4aa9      	ldr	r2, [pc, #676]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	6553      	str	r3, [r2, #84]	; 0x54
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ad0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ae6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d009      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007af0:	4b9e      	ldr	r3, [pc, #632]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a9b      	ldr	r2, [pc, #620]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b00:	430b      	orrs	r3, r1
 8007b02:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b12:	2300      	movs	r3, #0
 8007b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007b20:	4b92      	ldr	r3, [pc, #584]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b2e:	4a8f      	ldr	r2, [pc, #572]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b30:	430b      	orrs	r3, r1
 8007b32:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
 8007b42:	2300      	movs	r3, #0
 8007b44:	647b      	str	r3, [r7, #68]	; 0x44
 8007b46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	d00e      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b50:	4b86      	ldr	r3, [pc, #536]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	4a85      	ldr	r2, [pc, #532]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b5a:	6113      	str	r3, [r2, #16]
 8007b5c:	4b83      	ldr	r3, [pc, #524]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b5e:	6919      	ldr	r1, [r3, #16]
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b68:	4a80      	ldr	r2, [pc, #512]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007b84:	460b      	mov	r3, r1
 8007b86:	4313      	orrs	r3, r2
 8007b88:	d009      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b8a:	4b78      	ldr	r3, [pc, #480]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	4a74      	ldr	r2, [pc, #464]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007baa:	633b      	str	r3, [r7, #48]	; 0x30
 8007bac:	2300      	movs	r3, #0
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d00a      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bba:	4b6c      	ldr	r3, [pc, #432]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bca:	4a68      	ldr	r2, [pc, #416]	; (8007d6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007be6:	460b      	mov	r3, r1
 8007be8:	4313      	orrs	r3, r2
 8007bea:	d011      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fb79 	bl	80082ec <RCCEx_PLL2_Config>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	6239      	str	r1, [r7, #32]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
 8007c22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c26:	460b      	mov	r3, r1
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	d011      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c30:	3308      	adds	r3, #8
 8007c32:	2101      	movs	r1, #1
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fb59 	bl	80082ec <RCCEx_PLL2_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	61b9      	str	r1, [r7, #24]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c66:	460b      	mov	r3, r1
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	d011      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c70:	3308      	adds	r3, #8
 8007c72:	2102      	movs	r1, #2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fb39 	bl	80082ec <RCCEx_PLL2_Config>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007c80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6139      	str	r1, [r7, #16]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	d011      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cb0:	3328      	adds	r3, #40	; 0x28
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fbcb 	bl	8008450 <RCCEx_PLL3_Config>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ccc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	d011      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf0:	3328      	adds	r3, #40	; 0x28
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fbab 	bl	8008450 <RCCEx_PLL3_Config>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	6039      	str	r1, [r7, #0]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d26:	460b      	mov	r3, r1
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	d011      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d30:	3328      	adds	r3, #40	; 0x28
 8007d32:	2102      	movs	r1, #2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 fb8b 	bl	8008450 <RCCEx_PLL3_Config>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007d40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007d50:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e000      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007d64:	46bd      	mov	sp, r7
 8007d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d6a:	bf00      	nop
 8007d6c:	58024400 	.word	0x58024400

08007d70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d74:	f7fe fe00 	bl	8006978 <HAL_RCC_GetHCLKFreq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	091b      	lsrs	r3, r3, #4
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	4904      	ldr	r1, [pc, #16]	; (8007d98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	58024400 	.word	0x58024400
 8007d98:	08010b78 	.word	0x08010b78

08007d9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b089      	sub	sp, #36	; 0x24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007da4:	4ba1      	ldr	r3, [pc, #644]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0303 	and.w	r3, r3, #3
 8007dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007dae:	4b9f      	ldr	r3, [pc, #636]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	0b1b      	lsrs	r3, r3, #12
 8007db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007dba:	4b9c      	ldr	r3, [pc, #624]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007dc6:	4b99      	ldr	r3, [pc, #612]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dca:	08db      	lsrs	r3, r3, #3
 8007dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	fb02 f303 	mul.w	r3, r2, r3
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8111 	beq.w	800800c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	f000 8083 	beq.w	8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	f200 80a1 	bhi.w	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d056      	beq.n	8007eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007e06:	e099      	b.n	8007f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e08:	4b88      	ldr	r3, [pc, #544]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d02d      	beq.n	8007e70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e14:	4b85      	ldr	r3, [pc, #532]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	4a84      	ldr	r2, [pc, #528]	; (8008030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007e20:	fa22 f303 	lsr.w	r3, r2, r3
 8007e24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	ee07 3a90 	vmov	s15, r3
 8007e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e3e:	4b7b      	ldr	r3, [pc, #492]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	ee07 3a90 	vmov	s15, r3
 8007e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e6e:	e087      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	ee07 3a90 	vmov	s15, r3
 8007e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e82:	4b6a      	ldr	r3, [pc, #424]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8a:	ee07 3a90 	vmov	s15, r3
 8007e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eb2:	e065      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	ee07 3a90 	vmov	s15, r3
 8007eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec6:	4b59      	ldr	r3, [pc, #356]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ece:	ee07 3a90 	vmov	s15, r3
 8007ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef6:	e043      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0a:	4b48      	ldr	r3, [pc, #288]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f12:	ee07 3a90 	vmov	s15, r3
 8007f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f3a:	e021      	b.n	8007f80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	ee07 3a90 	vmov	s15, r3
 8007f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800803c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f4e:	4b37      	ldr	r3, [pc, #220]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007f80:	4b2a      	ldr	r3, [pc, #168]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	0a5b      	lsrs	r3, r3, #9
 8007f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8a:	ee07 3a90 	vmov	s15, r3
 8007f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fa6:	ee17 2a90 	vmov	r2, s15
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fae:	4b1f      	ldr	r3, [pc, #124]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	ee07 3a90 	vmov	s15, r3
 8007fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fd4:	ee17 2a90 	vmov	r2, s15
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008002:	ee17 2a90 	vmov	r2, s15
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800800a:	e008      	b.n	800801e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	609a      	str	r2, [r3, #8]
}
 800801e:	bf00      	nop
 8008020:	3724      	adds	r7, #36	; 0x24
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	58024400 	.word	0x58024400
 8008030:	03d09000 	.word	0x03d09000
 8008034:	46000000 	.word	0x46000000
 8008038:	4c742400 	.word	0x4c742400
 800803c:	4a742400 	.word	0x4a742400
 8008040:	4bbebc20 	.word	0x4bbebc20

08008044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008044:	b480      	push	{r7}
 8008046:	b089      	sub	sp, #36	; 0x24
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800804c:	4ba1      	ldr	r3, [pc, #644]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f003 0303 	and.w	r3, r3, #3
 8008054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008056:	4b9f      	ldr	r3, [pc, #636]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008062:	4b9c      	ldr	r3, [pc, #624]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800806e:	4b99      	ldr	r3, [pc, #612]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008072:	08db      	lsrs	r3, r3, #3
 8008074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 8111 	beq.w	80082b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	2b02      	cmp	r3, #2
 8008096:	f000 8083 	beq.w	80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b02      	cmp	r3, #2
 800809e:	f200 80a1 	bhi.w	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d056      	beq.n	800815c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80080ae:	e099      	b.n	80081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d02d      	beq.n	8008118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080bc:	4b85      	ldr	r3, [pc, #532]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	08db      	lsrs	r3, r3, #3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	4a84      	ldr	r2, [pc, #528]	; (80082d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80080c8:	fa22 f303 	lsr.w	r3, r2, r3
 80080cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	ee07 3a90 	vmov	s15, r3
 80080d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	ee07 3a90 	vmov	s15, r3
 80080de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e6:	4b7b      	ldr	r3, [pc, #492]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ee:	ee07 3a90 	vmov	s15, r3
 80080f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800810a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008116:	e087      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	ee07 3a90 	vmov	s15, r3
 800811e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008122:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800812a:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	ed97 6a03 	vldr	s12, [r7, #12]
 800813e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800814a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800815a:	e065      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	ee07 3a90 	vmov	s15, r3
 8008162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008166:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800816a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816e:	4b59      	ldr	r3, [pc, #356]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008182:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800818a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800819a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800819e:	e043      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80081ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081b2:	4b48      	ldr	r3, [pc, #288]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ba:	ee07 3a90 	vmov	s15, r3
 80081be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081e2:	e021      	b.n	8008228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	ee07 3a90 	vmov	s15, r3
 80081ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80081f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a03 	vldr	s12, [r7, #12]
 800820a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008228:	4b2a      	ldr	r3, [pc, #168]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	0a5b      	lsrs	r3, r3, #9
 800822e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800823e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008242:	edd7 6a07 	vldr	s13, [r7, #28]
 8008246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800824a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800824e:	ee17 2a90 	vmov	r2, s15
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008256:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	0c1b      	lsrs	r3, r3, #16
 800825c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800826c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008270:	edd7 6a07 	vldr	s13, [r7, #28]
 8008274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800827c:	ee17 2a90 	vmov	r2, s15
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008284:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	0e1b      	lsrs	r3, r3, #24
 800828a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800829a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829e:	edd7 6a07 	vldr	s13, [r7, #28]
 80082a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082aa:	ee17 2a90 	vmov	r2, s15
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80082b2:	e008      	b.n	80082c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	bf00      	nop
 80082c8:	3724      	adds	r7, #36	; 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	58024400 	.word	0x58024400
 80082d8:	03d09000 	.word	0x03d09000
 80082dc:	46000000 	.word	0x46000000
 80082e0:	4c742400 	.word	0x4c742400
 80082e4:	4a742400 	.word	0x4a742400
 80082e8:	4bbebc20 	.word	0x4bbebc20

080082ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082fa:	4b53      	ldr	r3, [pc, #332]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	f003 0303 	and.w	r3, r3, #3
 8008302:	2b03      	cmp	r3, #3
 8008304:	d101      	bne.n	800830a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e099      	b.n	800843e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800830a:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a4e      	ldr	r2, [pc, #312]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008316:	f7f9 ff8b 	bl	8002230 <HAL_GetTick>
 800831a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800831c:	e008      	b.n	8008330 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800831e:	f7f9 ff87 	bl	8002230 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e086      	b.n	800843e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008330:	4b45      	ldr	r3, [pc, #276]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f0      	bne.n	800831e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	031b      	lsls	r3, r3, #12
 800834a:	493f      	ldr	r1, [pc, #252]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 800834c:	4313      	orrs	r3, r2
 800834e:	628b      	str	r3, [r1, #40]	; 0x28
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	3b01      	subs	r3, #1
 8008356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	3b01      	subs	r3, #1
 8008360:	025b      	lsls	r3, r3, #9
 8008362:	b29b      	uxth	r3, r3
 8008364:	431a      	orrs	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	3b01      	subs	r3, #1
 800836c:	041b      	lsls	r3, r3, #16
 800836e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	3b01      	subs	r3, #1
 800837a:	061b      	lsls	r3, r3, #24
 800837c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008380:	4931      	ldr	r1, [pc, #196]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008382:	4313      	orrs	r3, r2
 8008384:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008386:	4b30      	ldr	r3, [pc, #192]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	492d      	ldr	r1, [pc, #180]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008394:	4313      	orrs	r3, r2
 8008396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008398:	4b2b      	ldr	r3, [pc, #172]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	f023 0220 	bic.w	r2, r3, #32
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	4928      	ldr	r1, [pc, #160]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ae:	4a26      	ldr	r2, [pc, #152]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083b0:	f023 0310 	bic.w	r3, r3, #16
 80083b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80083b6:	4b24      	ldr	r3, [pc, #144]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <RCCEx_PLL2_Config+0x160>)
 80083bc:	4013      	ands	r3, r2
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	69d2      	ldr	r2, [r2, #28]
 80083c2:	00d2      	lsls	r2, r2, #3
 80083c4:	4920      	ldr	r1, [pc, #128]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80083ca:	4b1f      	ldr	r3, [pc, #124]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	4a1e      	ldr	r2, [pc, #120]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083d0:	f043 0310 	orr.w	r3, r3, #16
 80083d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	4a19      	ldr	r2, [pc, #100]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083e8:	e00f      	b.n	800840a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d106      	bne.n	80083fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80083f0:	4b15      	ldr	r3, [pc, #84]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	4a14      	ldr	r2, [pc, #80]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 80083f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083fc:	e005      	b.n	800840a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	4a11      	ldr	r2, [pc, #68]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800840a:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a0e      	ldr	r2, [pc, #56]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008416:	f7f9 ff0b 	bl	8002230 <HAL_GetTick>
 800841a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800841c:	e008      	b.n	8008430 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800841e:	f7f9 ff07 	bl	8002230 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e006      	b.n	800843e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <RCCEx_PLL2_Config+0x15c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	58024400 	.word	0x58024400
 800844c:	ffff0007 	.word	0xffff0007

08008450 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800845e:	4b53      	ldr	r3, [pc, #332]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b03      	cmp	r3, #3
 8008468:	d101      	bne.n	800846e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e099      	b.n	80085a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800846e:	4b4f      	ldr	r3, [pc, #316]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a4e      	ldr	r2, [pc, #312]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847a:	f7f9 fed9 	bl	8002230 <HAL_GetTick>
 800847e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008480:	e008      	b.n	8008494 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008482:	f7f9 fed5 	bl	8002230 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b02      	cmp	r3, #2
 800848e:	d901      	bls.n	8008494 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008490:	2303      	movs	r3, #3
 8008492:	e086      	b.n	80085a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008494:	4b45      	ldr	r3, [pc, #276]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1f0      	bne.n	8008482 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80084a0:	4b42      	ldr	r3, [pc, #264]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	051b      	lsls	r3, r3, #20
 80084ae:	493f      	ldr	r1, [pc, #252]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	628b      	str	r3, [r1, #40]	; 0x28
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	025b      	lsls	r3, r3, #9
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	431a      	orrs	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	3b01      	subs	r3, #1
 80084de:	061b      	lsls	r3, r3, #24
 80084e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084e4:	4931      	ldr	r1, [pc, #196]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80084ea:	4b30      	ldr	r3, [pc, #192]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	492d      	ldr	r1, [pc, #180]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80084fc:	4b2b      	ldr	r3, [pc, #172]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	4928      	ldr	r1, [pc, #160]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 800850a:	4313      	orrs	r3, r2
 800850c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800850e:	4b27      	ldr	r3, [pc, #156]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008512:	4a26      	ldr	r2, [pc, #152]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800851a:	4b24      	ldr	r3, [pc, #144]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 800851c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <RCCEx_PLL3_Config+0x160>)
 8008520:	4013      	ands	r3, r2
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	69d2      	ldr	r2, [r2, #28]
 8008526:	00d2      	lsls	r2, r2, #3
 8008528:	4920      	ldr	r1, [pc, #128]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 800852a:	4313      	orrs	r3, r2
 800852c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800852e:	4b1f      	ldr	r3, [pc, #124]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	4a1e      	ldr	r2, [pc, #120]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d106      	bne.n	800854e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008540:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	4a19      	ldr	r2, [pc, #100]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800854a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800854c:	e00f      	b.n	800856e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d106      	bne.n	8008562 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008554:	4b15      	ldr	r3, [pc, #84]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	4a14      	ldr	r2, [pc, #80]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 800855a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800855e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008560:	e005      	b.n	800856e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008562:	4b12      	ldr	r3, [pc, #72]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	4a11      	ldr	r2, [pc, #68]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800856c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a0e      	ldr	r2, [pc, #56]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857a:	f7f9 fe59 	bl	8002230 <HAL_GetTick>
 800857e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008580:	e008      	b.n	8008594 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008582:	f7f9 fe55 	bl	8002230 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	2b02      	cmp	r3, #2
 800858e:	d901      	bls.n	8008594 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008590:	2303      	movs	r3, #3
 8008592:	e006      	b.n	80085a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <RCCEx_PLL3_Config+0x15c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d0f0      	beq.n	8008582 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	58024400 	.word	0x58024400
 80085b0:	ffff0007 	.word	0xffff0007

080085b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e049      	b.n	800865a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d106      	bne.n	80085e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f9 fa28 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f000 fa98 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e049      	b.n	8008708 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7f9 f999 	bl	80019c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2202      	movs	r2, #2
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	3304      	adds	r3, #4
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f000 fa41 	bl	8008b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008726:	2b01      	cmp	r3, #1
 8008728:	d101      	bne.n	800872e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800872a:	2302      	movs	r3, #2
 800872c:	e0ff      	b.n	800892e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b14      	cmp	r3, #20
 800873a:	f200 80f0 	bhi.w	800891e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008799 	.word	0x08008799
 8008748:	0800891f 	.word	0x0800891f
 800874c:	0800891f 	.word	0x0800891f
 8008750:	0800891f 	.word	0x0800891f
 8008754:	080087d9 	.word	0x080087d9
 8008758:	0800891f 	.word	0x0800891f
 800875c:	0800891f 	.word	0x0800891f
 8008760:	0800891f 	.word	0x0800891f
 8008764:	0800881b 	.word	0x0800881b
 8008768:	0800891f 	.word	0x0800891f
 800876c:	0800891f 	.word	0x0800891f
 8008770:	0800891f 	.word	0x0800891f
 8008774:	0800885b 	.word	0x0800885b
 8008778:	0800891f 	.word	0x0800891f
 800877c:	0800891f 	.word	0x0800891f
 8008780:	0800891f 	.word	0x0800891f
 8008784:	0800889d 	.word	0x0800889d
 8008788:	0800891f 	.word	0x0800891f
 800878c:	0800891f 	.word	0x0800891f
 8008790:	0800891f 	.word	0x0800891f
 8008794:	080088dd 	.word	0x080088dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 fa68 	bl	8008c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	699a      	ldr	r2, [r3, #24]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f042 0208 	orr.w	r2, r2, #8
 80087b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 0204 	bic.w	r2, r2, #4
 80087c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6999      	ldr	r1, [r3, #24]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	619a      	str	r2, [r3, #24]
      break;
 80087d6:	e0a5      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 fad8 	bl	8008d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699a      	ldr	r2, [r3, #24]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6999      	ldr	r1, [r3, #24]
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	021a      	lsls	r2, r3, #8
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	619a      	str	r2, [r3, #24]
      break;
 8008818:	e084      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68b9      	ldr	r1, [r7, #8]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 fb41 	bl	8008ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	69da      	ldr	r2, [r3, #28]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0208 	orr.w	r2, r2, #8
 8008834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69da      	ldr	r2, [r3, #28]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0204 	bic.w	r2, r2, #4
 8008844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69d9      	ldr	r1, [r3, #28]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	691a      	ldr	r2, [r3, #16]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	61da      	str	r2, [r3, #28]
      break;
 8008858:	e064      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 fba9 	bl	8008fb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69d9      	ldr	r1, [r3, #28]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	021a      	lsls	r2, r3, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	61da      	str	r2, [r3, #28]
      break;
 800889a:	e043      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fbf2 	bl	800908c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0204 	bic.w	r2, r2, #4
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088da:	e023      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fc36 	bl	8009154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800891c:	e002      	b.n	8008924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	75fb      	strb	r3, [r7, #23]
      break;
 8008922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop

08008938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_TIM_ConfigClockSource+0x1c>
 8008950:	2302      	movs	r3, #2
 8008952:	e0dc      	b.n	8008b0e <HAL_TIM_ConfigClockSource+0x1d6>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	4b6a      	ldr	r3, [pc, #424]	; (8008b18 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008970:	4013      	ands	r3, r2
 8008972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800897a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a64      	ldr	r2, [pc, #400]	; (8008b1c <HAL_TIM_ConfigClockSource+0x1e4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	f000 80a9 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008990:	4a62      	ldr	r2, [pc, #392]	; (8008b1c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	f200 80ae 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008998:	4a61      	ldr	r2, [pc, #388]	; (8008b20 <HAL_TIM_ConfigClockSource+0x1e8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	f000 80a1 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089a0:	4a5f      	ldr	r2, [pc, #380]	; (8008b20 <HAL_TIM_ConfigClockSource+0x1e8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	f200 80a6 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089a8:	4a5e      	ldr	r2, [pc, #376]	; (8008b24 <HAL_TIM_ConfigClockSource+0x1ec>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	f000 8099 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089b0:	4a5c      	ldr	r2, [pc, #368]	; (8008b24 <HAL_TIM_ConfigClockSource+0x1ec>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	f200 809e 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089bc:	f000 8091 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80089c4:	f200 8096 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089cc:	f000 8089 	beq.w	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 80089d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d4:	f200 808e 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089dc:	d03e      	beq.n	8008a5c <HAL_TIM_ConfigClockSource+0x124>
 80089de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089e2:	f200 8087 	bhi.w	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ea:	f000 8086 	beq.w	8008afa <HAL_TIM_ConfigClockSource+0x1c2>
 80089ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f2:	d87f      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089f4:	2b70      	cmp	r3, #112	; 0x70
 80089f6:	d01a      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0xf6>
 80089f8:	2b70      	cmp	r3, #112	; 0x70
 80089fa:	d87b      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 80089fc:	2b60      	cmp	r3, #96	; 0x60
 80089fe:	d050      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0x16a>
 8008a00:	2b60      	cmp	r3, #96	; 0x60
 8008a02:	d877      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a04:	2b50      	cmp	r3, #80	; 0x50
 8008a06:	d03c      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x14a>
 8008a08:	2b50      	cmp	r3, #80	; 0x50
 8008a0a:	d873      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a0c:	2b40      	cmp	r3, #64	; 0x40
 8008a0e:	d058      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x18a>
 8008a10:	2b40      	cmp	r3, #64	; 0x40
 8008a12:	d86f      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a14:	2b30      	cmp	r3, #48	; 0x30
 8008a16:	d064      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a18:	2b30      	cmp	r3, #48	; 0x30
 8008a1a:	d86b      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d060      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d867      	bhi.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d05c      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a28:	2b10      	cmp	r3, #16
 8008a2a:	d05a      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008a2c:	e062      	b.n	8008af4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6899      	ldr	r1, [r3, #8]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f000 fc6d 	bl	800931c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	609a      	str	r2, [r3, #8]
      break;
 8008a5a:	e04f      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	6899      	ldr	r1, [r3, #8]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f000 fc56 	bl	800931c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a7e:	609a      	str	r2, [r3, #8]
      break;
 8008a80:	e03c      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6859      	ldr	r1, [r3, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f000 fbc6 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2150      	movs	r1, #80	; 0x50
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fc20 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008aa0:	e02c      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f000 fbe5 	bl	800927e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2160      	movs	r1, #96	; 0x60
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fc10 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008ac0:	e01c      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6818      	ldr	r0, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6859      	ldr	r1, [r3, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f000 fba6 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2140      	movs	r1, #64	; 0x40
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fc00 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008ae0:	e00c      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f000 fbf7 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008af2:	e003      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	73fb      	strb	r3, [r7, #15]
      break;
 8008af8:	e000      	b.n	8008afc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	ffceff88 	.word	0xffceff88
 8008b1c:	00100040 	.word	0x00100040
 8008b20:	00100030 	.word	0x00100030
 8008b24:	00100020 	.word	0x00100020

08008b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a44      	ldr	r2, [pc, #272]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d013      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b46:	d00f      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a41      	ldr	r2, [pc, #260]	; (8008c50 <TIM_Base_SetConfig+0x128>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00b      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a40      	ldr	r2, [pc, #256]	; (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d007      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a3f      	ldr	r2, [pc, #252]	; (8008c58 <TIM_Base_SetConfig+0x130>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a3e      	ldr	r2, [pc, #248]	; (8008c5c <TIM_Base_SetConfig+0x134>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d108      	bne.n	8008b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a33      	ldr	r2, [pc, #204]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d027      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d023      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a30      	ldr	r2, [pc, #192]	; (8008c50 <TIM_Base_SetConfig+0x128>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d01f      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a2f      	ldr	r2, [pc, #188]	; (8008c54 <TIM_Base_SetConfig+0x12c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d01b      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a2e      	ldr	r2, [pc, #184]	; (8008c58 <TIM_Base_SetConfig+0x130>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d017      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a2d      	ldr	r2, [pc, #180]	; (8008c5c <TIM_Base_SetConfig+0x134>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a2c      	ldr	r2, [pc, #176]	; (8008c60 <TIM_Base_SetConfig+0x138>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d00f      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a2b      	ldr	r2, [pc, #172]	; (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d00b      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a2a      	ldr	r2, [pc, #168]	; (8008c68 <TIM_Base_SetConfig+0x140>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d007      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a29      	ldr	r2, [pc, #164]	; (8008c6c <TIM_Base_SetConfig+0x144>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d003      	beq.n	8008bd2 <TIM_Base_SetConfig+0xaa>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a28      	ldr	r2, [pc, #160]	; (8008c70 <TIM_Base_SetConfig+0x148>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d108      	bne.n	8008be4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	68fa      	ldr	r2, [r7, #12]
 8008bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a10      	ldr	r2, [pc, #64]	; (8008c4c <TIM_Base_SetConfig+0x124>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00f      	beq.n	8008c30 <TIM_Base_SetConfig+0x108>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a12      	ldr	r2, [pc, #72]	; (8008c5c <TIM_Base_SetConfig+0x134>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <TIM_Base_SetConfig+0x108>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4a11      	ldr	r2, [pc, #68]	; (8008c60 <TIM_Base_SetConfig+0x138>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d007      	beq.n	8008c30 <TIM_Base_SetConfig+0x108>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a10      	ldr	r2, [pc, #64]	; (8008c64 <TIM_Base_SetConfig+0x13c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <TIM_Base_SetConfig+0x108>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a0f      	ldr	r2, [pc, #60]	; (8008c68 <TIM_Base_SetConfig+0x140>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d103      	bne.n	8008c38 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	615a      	str	r2, [r3, #20]
}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40000400 	.word	0x40000400
 8008c54:	40000800 	.word	0x40000800
 8008c58:	40000c00 	.word	0x40000c00
 8008c5c:	40010400 	.word	0x40010400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40014400 	.word	0x40014400
 8008c68:	40014800 	.word	0x40014800
 8008c6c:	4000e000 	.word	0x4000e000
 8008c70:	4000e400 	.word	0x4000e400

08008c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4b37      	ldr	r3, [pc, #220]	; (8008d7c <TIM_OC1_SetConfig+0x108>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f023 0303 	bic.w	r3, r3, #3
 8008caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f023 0302 	bic.w	r3, r3, #2
 8008cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a2d      	ldr	r2, [pc, #180]	; (8008d80 <TIM_OC1_SetConfig+0x10c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d00f      	beq.n	8008cf0 <TIM_OC1_SetConfig+0x7c>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a2c      	ldr	r2, [pc, #176]	; (8008d84 <TIM_OC1_SetConfig+0x110>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00b      	beq.n	8008cf0 <TIM_OC1_SetConfig+0x7c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a2b      	ldr	r2, [pc, #172]	; (8008d88 <TIM_OC1_SetConfig+0x114>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d007      	beq.n	8008cf0 <TIM_OC1_SetConfig+0x7c>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a2a      	ldr	r2, [pc, #168]	; (8008d8c <TIM_OC1_SetConfig+0x118>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d003      	beq.n	8008cf0 <TIM_OC1_SetConfig+0x7c>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a29      	ldr	r2, [pc, #164]	; (8008d90 <TIM_OC1_SetConfig+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d10c      	bne.n	8008d0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	f023 0308 	bic.w	r3, r3, #8
 8008cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 0304 	bic.w	r3, r3, #4
 8008d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a1c      	ldr	r2, [pc, #112]	; (8008d80 <TIM_OC1_SetConfig+0x10c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00f      	beq.n	8008d32 <TIM_OC1_SetConfig+0xbe>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a1b      	ldr	r2, [pc, #108]	; (8008d84 <TIM_OC1_SetConfig+0x110>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00b      	beq.n	8008d32 <TIM_OC1_SetConfig+0xbe>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a1a      	ldr	r2, [pc, #104]	; (8008d88 <TIM_OC1_SetConfig+0x114>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d007      	beq.n	8008d32 <TIM_OC1_SetConfig+0xbe>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a19      	ldr	r2, [pc, #100]	; (8008d8c <TIM_OC1_SetConfig+0x118>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d003      	beq.n	8008d32 <TIM_OC1_SetConfig+0xbe>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a18      	ldr	r2, [pc, #96]	; (8008d90 <TIM_OC1_SetConfig+0x11c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d111      	bne.n	8008d56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	621a      	str	r2, [r3, #32]
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	fffeff8f 	.word	0xfffeff8f
 8008d80:	40010000 	.word	0x40010000
 8008d84:	40010400 	.word	0x40010400
 8008d88:	40014000 	.word	0x40014000
 8008d8c:	40014400 	.word	0x40014400
 8008d90:	40014800 	.word	0x40014800

08008d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0210 	bic.w	r2, r3, #16
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4b34      	ldr	r3, [pc, #208]	; (8008e90 <TIM_OC2_SetConfig+0xfc>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f023 0320 	bic.w	r3, r3, #32
 8008dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a29      	ldr	r2, [pc, #164]	; (8008e94 <TIM_OC2_SetConfig+0x100>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d003      	beq.n	8008dfc <TIM_OC2_SetConfig+0x68>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a28      	ldr	r2, [pc, #160]	; (8008e98 <TIM_OC2_SetConfig+0x104>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d10d      	bne.n	8008e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	011b      	lsls	r3, r3, #4
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <TIM_OC2_SetConfig+0x100>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00f      	beq.n	8008e40 <TIM_OC2_SetConfig+0xac>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a1d      	ldr	r2, [pc, #116]	; (8008e98 <TIM_OC2_SetConfig+0x104>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00b      	beq.n	8008e40 <TIM_OC2_SetConfig+0xac>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	; (8008e9c <TIM_OC2_SetConfig+0x108>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d007      	beq.n	8008e40 <TIM_OC2_SetConfig+0xac>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a1b      	ldr	r2, [pc, #108]	; (8008ea0 <TIM_OC2_SetConfig+0x10c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_OC2_SetConfig+0xac>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ea4 <TIM_OC2_SetConfig+0x110>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d113      	bne.n	8008e68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	feff8fff 	.word	0xfeff8fff
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800

08008ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b33      	ldr	r3, [pc, #204]	; (8008fa0 <TIM_OC3_SetConfig+0xf8>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <TIM_OC3_SetConfig+0xfc>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_OC3_SetConfig+0x66>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a27      	ldr	r2, [pc, #156]	; (8008fa8 <TIM_OC3_SetConfig+0x100>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d10d      	bne.n	8008f2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a1d      	ldr	r2, [pc, #116]	; (8008fa4 <TIM_OC3_SetConfig+0xfc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <TIM_OC3_SetConfig+0xaa>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a1c      	ldr	r2, [pc, #112]	; (8008fa8 <TIM_OC3_SetConfig+0x100>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00b      	beq.n	8008f52 <TIM_OC3_SetConfig+0xaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a1b      	ldr	r2, [pc, #108]	; (8008fac <TIM_OC3_SetConfig+0x104>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d007      	beq.n	8008f52 <TIM_OC3_SetConfig+0xaa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a1a      	ldr	r2, [pc, #104]	; (8008fb0 <TIM_OC3_SetConfig+0x108>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d003      	beq.n	8008f52 <TIM_OC3_SetConfig+0xaa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <TIM_OC3_SetConfig+0x10c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d113      	bne.n	8008f7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	011b      	lsls	r3, r3, #4
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	693a      	ldr	r2, [r7, #16]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	621a      	str	r2, [r3, #32]
}
 8008f94:	bf00      	nop
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	fffeff8f 	.word	0xfffeff8f
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40010400 	.word	0x40010400
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	40014400 	.word	0x40014400
 8008fb4:	40014800 	.word	0x40014800

08008fb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4b24      	ldr	r3, [pc, #144]	; (8009074 <TIM_OC4_SetConfig+0xbc>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	031b      	lsls	r3, r3, #12
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	4313      	orrs	r3, r2
 800900e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a19      	ldr	r2, [pc, #100]	; (8009078 <TIM_OC4_SetConfig+0xc0>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d00f      	beq.n	8009038 <TIM_OC4_SetConfig+0x80>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a18      	ldr	r2, [pc, #96]	; (800907c <TIM_OC4_SetConfig+0xc4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00b      	beq.n	8009038 <TIM_OC4_SetConfig+0x80>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a17      	ldr	r2, [pc, #92]	; (8009080 <TIM_OC4_SetConfig+0xc8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d007      	beq.n	8009038 <TIM_OC4_SetConfig+0x80>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a16      	ldr	r2, [pc, #88]	; (8009084 <TIM_OC4_SetConfig+0xcc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_OC4_SetConfig+0x80>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a15      	ldr	r2, [pc, #84]	; (8009088 <TIM_OC4_SetConfig+0xd0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d109      	bne.n	800904c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800903e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	019b      	lsls	r3, r3, #6
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	693a      	ldr	r2, [r7, #16]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	feff8fff 	.word	0xfeff8fff
 8009078:	40010000 	.word	0x40010000
 800907c:	40010400 	.word	0x40010400
 8009080:	40014000 	.word	0x40014000
 8009084:	40014400 	.word	0x40014400
 8009088:	40014800 	.word	0x40014800

0800908c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	4b21      	ldr	r3, [pc, #132]	; (800913c <TIM_OC5_SetConfig+0xb0>)
 80090b8:	4013      	ands	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a18      	ldr	r2, [pc, #96]	; (8009140 <TIM_OC5_SetConfig+0xb4>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00f      	beq.n	8009102 <TIM_OC5_SetConfig+0x76>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a17      	ldr	r2, [pc, #92]	; (8009144 <TIM_OC5_SetConfig+0xb8>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00b      	beq.n	8009102 <TIM_OC5_SetConfig+0x76>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a16      	ldr	r2, [pc, #88]	; (8009148 <TIM_OC5_SetConfig+0xbc>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d007      	beq.n	8009102 <TIM_OC5_SetConfig+0x76>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a15      	ldr	r2, [pc, #84]	; (800914c <TIM_OC5_SetConfig+0xc0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d003      	beq.n	8009102 <TIM_OC5_SetConfig+0x76>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a14      	ldr	r2, [pc, #80]	; (8009150 <TIM_OC5_SetConfig+0xc4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d109      	bne.n	8009116 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	621a      	str	r2, [r3, #32]
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr
 800913c:	fffeff8f 	.word	0xfffeff8f
 8009140:	40010000 	.word	0x40010000
 8009144:	40010400 	.word	0x40010400
 8009148:	40014000 	.word	0x40014000
 800914c:	40014400 	.word	0x40014400
 8009150:	40014800 	.word	0x40014800

08009154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <TIM_OC6_SetConfig+0xb4>)
 8009180:	4013      	ands	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	4313      	orrs	r3, r2
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	051b      	lsls	r3, r3, #20
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a19      	ldr	r2, [pc, #100]	; (800920c <TIM_OC6_SetConfig+0xb8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00f      	beq.n	80091cc <TIM_OC6_SetConfig+0x78>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a18      	ldr	r2, [pc, #96]	; (8009210 <TIM_OC6_SetConfig+0xbc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00b      	beq.n	80091cc <TIM_OC6_SetConfig+0x78>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a17      	ldr	r2, [pc, #92]	; (8009214 <TIM_OC6_SetConfig+0xc0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <TIM_OC6_SetConfig+0x78>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a16      	ldr	r2, [pc, #88]	; (8009218 <TIM_OC6_SetConfig+0xc4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC6_SetConfig+0x78>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a15      	ldr	r2, [pc, #84]	; (800921c <TIM_OC6_SetConfig+0xc8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d109      	bne.n	80091e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	695b      	ldr	r3, [r3, #20]
 80091d8:	029b      	lsls	r3, r3, #10
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	feff8fff 	.word	0xfeff8fff
 800920c:	40010000 	.word	0x40010000
 8009210:	40010400 	.word	0x40010400
 8009214:	40014000 	.word	0x40014000
 8009218:	40014400 	.word	0x40014400
 800921c:	40014800 	.word	0x40014800

08009220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800924a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f023 030a 	bic.w	r3, r3, #10
 800925c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f023 0210 	bic.w	r2, r3, #16
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4b09      	ldr	r3, [pc, #36]	; (8009318 <TIM_ITRx_SetConfig+0x38>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	f043 0307 	orr.w	r3, r3, #7
 8009302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	609a      	str	r2, [r3, #8]
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	ffcfff8f 	.word	0xffcfff8f

0800931c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	021a      	lsls	r2, r3, #8
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	431a      	orrs	r2, r3
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	4313      	orrs	r3, r2
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	609a      	str	r2, [r3, #8]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d101      	bne.n	8009374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009370:	2302      	movs	r3, #2
 8009372:	e077      	b.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a35      	ldr	r2, [pc, #212]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d004      	beq.n	80093a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a34      	ldr	r2, [pc, #208]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d108      	bne.n	80093ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a25      	ldr	r2, [pc, #148]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d02c      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e6:	d027      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a22      	ldr	r2, [pc, #136]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d022      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a21      	ldr	r2, [pc, #132]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d01d      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d018      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d013      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a1b      	ldr	r2, [pc, #108]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00e      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a1a      	ldr	r2, [pc, #104]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d009      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a18      	ldr	r2, [pc, #96]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a17      	ldr	r2, [pc, #92]	; (8009490 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d10c      	bne.n	8009452 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800943e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4313      	orrs	r3, r2
 8009448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	40010000 	.word	0x40010000
 8009474:	40010400 	.word	0x40010400
 8009478:	40000400 	.word	0x40000400
 800947c:	40000800 	.word	0x40000800
 8009480:	40000c00 	.word	0x40000c00
 8009484:	40001800 	.word	0x40001800
 8009488:	40014000 	.word	0x40014000
 800948c:	4000e000 	.word	0x4000e000
 8009490:	4000e400 	.word	0x4000e400

08009494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e087      	b.n	80095c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	4313      	orrs	r3, r2
 800950a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	041b      	lsls	r3, r3, #16
 8009526:	4313      	orrs	r3, r2
 8009528:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a27      	ldr	r2, [pc, #156]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d004      	beq.n	800953e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a25      	ldr	r2, [pc, #148]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d106      	bne.n	800954c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	69db      	ldr	r3, [r3, #28]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a1e      	ldr	r2, [pc, #120]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d004      	beq.n	8009560 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a1d      	ldr	r2, [pc, #116]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d126      	bne.n	80095ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	051b      	lsls	r3, r3, #20
 800956c:	4313      	orrs	r3, r2
 800956e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	4313      	orrs	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a0e      	ldr	r2, [pc, #56]	; (80095cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d004      	beq.n	80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4a0d      	ldr	r2, [pc, #52]	; (80095d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d106      	bne.n	80095ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	40010000 	.word	0x40010000
 80095d0:	40010400 	.word	0x40010400

080095d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e042      	b.n	800966c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d106      	bne.n	80095fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7f8 fb71 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2224      	movs	r2, #36	; 0x24
 8009602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 0201 	bic.w	r2, r2, #1
 8009614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8ba 	bl	8009790 <UART_SetConfig>
 800961c:	4603      	mov	r3, r0
 800961e:	2b01      	cmp	r3, #1
 8009620:	d101      	bne.n	8009626 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e022      	b.n	800966c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 ff1a 	bl	800a468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0201 	orr.w	r2, r2, #1
 8009662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 ffa1 	bl	800a5ac <UART_CheckIdleState>
 800966a:	4603      	mov	r3, r0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b08a      	sub	sp, #40	; 0x28
 8009678:	af02      	add	r7, sp, #8
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	4613      	mov	r3, r2
 8009682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968a:	2b20      	cmp	r3, #32
 800968c:	d17b      	bne.n	8009786 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <HAL_UART_Transmit+0x26>
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e074      	b.n	8009788 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2221      	movs	r2, #33	; 0x21
 80096aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096ae:	f7f8 fdbf 	bl	8002230 <HAL_GetTick>
 80096b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	88fa      	ldrh	r2, [r7, #6]
 80096b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	88fa      	ldrh	r2, [r7, #6]
 80096c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096cc:	d108      	bne.n	80096e0 <HAL_UART_Transmit+0x6c>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d104      	bne.n	80096e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	e003      	b.n	80096e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80096e8:	e030      	b.n	800974c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	2200      	movs	r2, #0
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f001 f803 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e03d      	b.n	8009788 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	461a      	mov	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009720:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	3302      	adds	r3, #2
 8009726:	61bb      	str	r3, [r7, #24]
 8009728:	e007      	b.n	800973a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	3301      	adds	r3, #1
 8009738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009752:	b29b      	uxth	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1c8      	bne.n	80096ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2200      	movs	r2, #0
 8009760:	2140      	movs	r1, #64	; 0x40
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 ffcc 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e006      	b.n	8009788 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2220      	movs	r2, #32
 800977e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e000      	b.n	8009788 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
  }
}
 8009788:	4618      	mov	r0, r3
 800978a:	3720      	adds	r7, #32
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009794:	b092      	sub	sp, #72	; 0x48
 8009796:	af00      	add	r7, sp, #0
 8009798:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	689a      	ldr	r2, [r3, #8]
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	431a      	orrs	r2, r3
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4bbe      	ldr	r3, [pc, #760]	; (8009ab8 <UART_SetConfig+0x328>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	699b      	ldr	r3, [r3, #24]
 80097e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4ab3      	ldr	r2, [pc, #716]	; (8009abc <UART_SetConfig+0x32c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d004      	beq.n	80097fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097f8:	4313      	orrs	r3, r2
 80097fa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	4baf      	ldr	r3, [pc, #700]	; (8009ac0 <UART_SetConfig+0x330>)
 8009804:	4013      	ands	r3, r2
 8009806:	697a      	ldr	r2, [r7, #20]
 8009808:	6812      	ldr	r2, [r2, #0]
 800980a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800980c:	430b      	orrs	r3, r1
 800980e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	f023 010f 	bic.w	r1, r3, #15
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	430a      	orrs	r2, r1
 8009824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4aa6      	ldr	r2, [pc, #664]	; (8009ac4 <UART_SetConfig+0x334>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d177      	bne.n	8009920 <UART_SetConfig+0x190>
 8009830:	4ba5      	ldr	r3, [pc, #660]	; (8009ac8 <UART_SetConfig+0x338>)
 8009832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009838:	2b28      	cmp	r3, #40	; 0x28
 800983a:	d86d      	bhi.n	8009918 <UART_SetConfig+0x188>
 800983c:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <UART_SetConfig+0xb4>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	080098e9 	.word	0x080098e9
 8009848:	08009919 	.word	0x08009919
 800984c:	08009919 	.word	0x08009919
 8009850:	08009919 	.word	0x08009919
 8009854:	08009919 	.word	0x08009919
 8009858:	08009919 	.word	0x08009919
 800985c:	08009919 	.word	0x08009919
 8009860:	08009919 	.word	0x08009919
 8009864:	080098f1 	.word	0x080098f1
 8009868:	08009919 	.word	0x08009919
 800986c:	08009919 	.word	0x08009919
 8009870:	08009919 	.word	0x08009919
 8009874:	08009919 	.word	0x08009919
 8009878:	08009919 	.word	0x08009919
 800987c:	08009919 	.word	0x08009919
 8009880:	08009919 	.word	0x08009919
 8009884:	080098f9 	.word	0x080098f9
 8009888:	08009919 	.word	0x08009919
 800988c:	08009919 	.word	0x08009919
 8009890:	08009919 	.word	0x08009919
 8009894:	08009919 	.word	0x08009919
 8009898:	08009919 	.word	0x08009919
 800989c:	08009919 	.word	0x08009919
 80098a0:	08009919 	.word	0x08009919
 80098a4:	08009901 	.word	0x08009901
 80098a8:	08009919 	.word	0x08009919
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009919 	.word	0x08009919
 80098b8:	08009919 	.word	0x08009919
 80098bc:	08009919 	.word	0x08009919
 80098c0:	08009919 	.word	0x08009919
 80098c4:	08009909 	.word	0x08009909
 80098c8:	08009919 	.word	0x08009919
 80098cc:	08009919 	.word	0x08009919
 80098d0:	08009919 	.word	0x08009919
 80098d4:	08009919 	.word	0x08009919
 80098d8:	08009919 	.word	0x08009919
 80098dc:	08009919 	.word	0x08009919
 80098e0:	08009919 	.word	0x08009919
 80098e4:	08009911 	.word	0x08009911
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ee:	e326      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f6:	e322      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fe:	e31e      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009906:	e31a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009908:	2320      	movs	r3, #32
 800990a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800990e:	e316      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009916:	e312      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009918:	2380      	movs	r3, #128	; 0x80
 800991a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800991e:	e30e      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a69      	ldr	r2, [pc, #420]	; (8009acc <UART_SetConfig+0x33c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d130      	bne.n	800998c <UART_SetConfig+0x1fc>
 800992a:	4b67      	ldr	r3, [pc, #412]	; (8009ac8 <UART_SetConfig+0x338>)
 800992c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992e:	f003 0307 	and.w	r3, r3, #7
 8009932:	2b05      	cmp	r3, #5
 8009934:	d826      	bhi.n	8009984 <UART_SetConfig+0x1f4>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <UART_SetConfig+0x1ac>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009955 	.word	0x08009955
 8009940:	0800995d 	.word	0x0800995d
 8009944:	08009965 	.word	0x08009965
 8009948:	0800996d 	.word	0x0800996d
 800994c:	08009975 	.word	0x08009975
 8009950:	0800997d 	.word	0x0800997d
 8009954:	2300      	movs	r3, #0
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e2f0      	b.n	8009f3e <UART_SetConfig+0x7ae>
 800995c:	2304      	movs	r3, #4
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e2ec      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009964:	2308      	movs	r3, #8
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996a:	e2e8      	b.n	8009f3e <UART_SetConfig+0x7ae>
 800996c:	2310      	movs	r3, #16
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e2e4      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009974:	2320      	movs	r3, #32
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e2e0      	b.n	8009f3e <UART_SetConfig+0x7ae>
 800997c:	2340      	movs	r3, #64	; 0x40
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e2dc      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009984:	2380      	movs	r3, #128	; 0x80
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e2d8      	b.n	8009f3e <UART_SetConfig+0x7ae>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a4f      	ldr	r2, [pc, #316]	; (8009ad0 <UART_SetConfig+0x340>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d130      	bne.n	80099f8 <UART_SetConfig+0x268>
 8009996:	4b4c      	ldr	r3, [pc, #304]	; (8009ac8 <UART_SetConfig+0x338>)
 8009998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999a:	f003 0307 	and.w	r3, r3, #7
 800999e:	2b05      	cmp	r3, #5
 80099a0:	d826      	bhi.n	80099f0 <UART_SetConfig+0x260>
 80099a2:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0x218>)
 80099a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a8:	080099c1 	.word	0x080099c1
 80099ac:	080099c9 	.word	0x080099c9
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099d9 	.word	0x080099d9
 80099b8:	080099e1 	.word	0x080099e1
 80099bc:	080099e9 	.word	0x080099e9
 80099c0:	2300      	movs	r3, #0
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e2ba      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099c8:	2304      	movs	r3, #4
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e2b6      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099d0:	2308      	movs	r3, #8
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e2b2      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099d8:	2310      	movs	r3, #16
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e2ae      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099e0:	2320      	movs	r3, #32
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e2aa      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e2a6      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099f0:	2380      	movs	r3, #128	; 0x80
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e2a2      	b.n	8009f3e <UART_SetConfig+0x7ae>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a35      	ldr	r2, [pc, #212]	; (8009ad4 <UART_SetConfig+0x344>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d130      	bne.n	8009a64 <UART_SetConfig+0x2d4>
 8009a02:	4b31      	ldr	r3, [pc, #196]	; (8009ac8 <UART_SetConfig+0x338>)
 8009a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	d826      	bhi.n	8009a5c <UART_SetConfig+0x2cc>
 8009a0e:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <UART_SetConfig+0x284>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a35 	.word	0x08009a35
 8009a1c:	08009a3d 	.word	0x08009a3d
 8009a20:	08009a45 	.word	0x08009a45
 8009a24:	08009a4d 	.word	0x08009a4d
 8009a28:	08009a55 	.word	0x08009a55
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e284      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a34:	2304      	movs	r3, #4
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e280      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e27c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a44:	2310      	movs	r3, #16
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e278      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a4c:	2320      	movs	r3, #32
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e274      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a54:	2340      	movs	r3, #64	; 0x40
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e270      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a5c:	2380      	movs	r3, #128	; 0x80
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e26c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a1b      	ldr	r2, [pc, #108]	; (8009ad8 <UART_SetConfig+0x348>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d142      	bne.n	8009af4 <UART_SetConfig+0x364>
 8009a6e:	4b16      	ldr	r3, [pc, #88]	; (8009ac8 <UART_SetConfig+0x338>)
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	2b05      	cmp	r3, #5
 8009a78:	d838      	bhi.n	8009aec <UART_SetConfig+0x35c>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x2f0>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009add 	.word	0x08009add
 8009a94:	08009ae5 	.word	0x08009ae5
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e24e      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e24a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e246      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e242      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ab8:	cfff69f3 	.word	0xcfff69f3
 8009abc:	58000c00 	.word	0x58000c00
 8009ac0:	11fff4ff 	.word	0x11fff4ff
 8009ac4:	40011000 	.word	0x40011000
 8009ac8:	58024400 	.word	0x58024400
 8009acc:	40004400 	.word	0x40004400
 8009ad0:	40004800 	.word	0x40004800
 8009ad4:	40004c00 	.word	0x40004c00
 8009ad8:	40005000 	.word	0x40005000
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e22c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e228      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e224      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4ab1      	ldr	r2, [pc, #708]	; (8009dc0 <UART_SetConfig+0x630>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d176      	bne.n	8009bec <UART_SetConfig+0x45c>
 8009afe:	4bb1      	ldr	r3, [pc, #708]	; (8009dc4 <UART_SetConfig+0x634>)
 8009b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b06:	2b28      	cmp	r3, #40	; 0x28
 8009b08:	d86c      	bhi.n	8009be4 <UART_SetConfig+0x454>
 8009b0a:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <UART_SetConfig+0x380>)
 8009b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b10:	08009bb5 	.word	0x08009bb5
 8009b14:	08009be5 	.word	0x08009be5
 8009b18:	08009be5 	.word	0x08009be5
 8009b1c:	08009be5 	.word	0x08009be5
 8009b20:	08009be5 	.word	0x08009be5
 8009b24:	08009be5 	.word	0x08009be5
 8009b28:	08009be5 	.word	0x08009be5
 8009b2c:	08009be5 	.word	0x08009be5
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009be5 	.word	0x08009be5
 8009b38:	08009be5 	.word	0x08009be5
 8009b3c:	08009be5 	.word	0x08009be5
 8009b40:	08009be5 	.word	0x08009be5
 8009b44:	08009be5 	.word	0x08009be5
 8009b48:	08009be5 	.word	0x08009be5
 8009b4c:	08009be5 	.word	0x08009be5
 8009b50:	08009bc5 	.word	0x08009bc5
 8009b54:	08009be5 	.word	0x08009be5
 8009b58:	08009be5 	.word	0x08009be5
 8009b5c:	08009be5 	.word	0x08009be5
 8009b60:	08009be5 	.word	0x08009be5
 8009b64:	08009be5 	.word	0x08009be5
 8009b68:	08009be5 	.word	0x08009be5
 8009b6c:	08009be5 	.word	0x08009be5
 8009b70:	08009bcd 	.word	0x08009bcd
 8009b74:	08009be5 	.word	0x08009be5
 8009b78:	08009be5 	.word	0x08009be5
 8009b7c:	08009be5 	.word	0x08009be5
 8009b80:	08009be5 	.word	0x08009be5
 8009b84:	08009be5 	.word	0x08009be5
 8009b88:	08009be5 	.word	0x08009be5
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bd5 	.word	0x08009bd5
 8009b94:	08009be5 	.word	0x08009be5
 8009b98:	08009be5 	.word	0x08009be5
 8009b9c:	08009be5 	.word	0x08009be5
 8009ba0:	08009be5 	.word	0x08009be5
 8009ba4:	08009be5 	.word	0x08009be5
 8009ba8:	08009be5 	.word	0x08009be5
 8009bac:	08009be5 	.word	0x08009be5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e1c0      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e1bc      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e1b8      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1b4      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1b0      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1ac      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1a8      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a75      	ldr	r2, [pc, #468]	; (8009dc8 <UART_SetConfig+0x638>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d130      	bne.n	8009c58 <UART_SetConfig+0x4c8>
 8009bf6:	4b73      	ldr	r3, [pc, #460]	; (8009dc4 <UART_SetConfig+0x634>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d826      	bhi.n	8009c50 <UART_SetConfig+0x4c0>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x478>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e18a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e186      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e182      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e17e      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e17a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e176      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e172      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a5b      	ldr	r2, [pc, #364]	; (8009dcc <UART_SetConfig+0x63c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d130      	bne.n	8009cc4 <UART_SetConfig+0x534>
 8009c62:	4b58      	ldr	r3, [pc, #352]	; (8009dc4 <UART_SetConfig+0x634>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d826      	bhi.n	8009cbc <UART_SetConfig+0x52c>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x4e4>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e154      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e150      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e14c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e148      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009cac:	2320      	movs	r3, #32
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e144      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e140      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc2:	e13c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a41      	ldr	r2, [pc, #260]	; (8009dd0 <UART_SetConfig+0x640>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	f040 8082 	bne.w	8009dd4 <UART_SetConfig+0x644>
 8009cd0:	4b3c      	ldr	r3, [pc, #240]	; (8009dc4 <UART_SetConfig+0x634>)
 8009cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cd8:	2b28      	cmp	r3, #40	; 0x28
 8009cda:	d86d      	bhi.n	8009db8 <UART_SetConfig+0x628>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <UART_SetConfig+0x554>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009d89 	.word	0x08009d89
 8009ce8:	08009db9 	.word	0x08009db9
 8009cec:	08009db9 	.word	0x08009db9
 8009cf0:	08009db9 	.word	0x08009db9
 8009cf4:	08009db9 	.word	0x08009db9
 8009cf8:	08009db9 	.word	0x08009db9
 8009cfc:	08009db9 	.word	0x08009db9
 8009d00:	08009db9 	.word	0x08009db9
 8009d04:	08009d91 	.word	0x08009d91
 8009d08:	08009db9 	.word	0x08009db9
 8009d0c:	08009db9 	.word	0x08009db9
 8009d10:	08009db9 	.word	0x08009db9
 8009d14:	08009db9 	.word	0x08009db9
 8009d18:	08009db9 	.word	0x08009db9
 8009d1c:	08009db9 	.word	0x08009db9
 8009d20:	08009db9 	.word	0x08009db9
 8009d24:	08009d99 	.word	0x08009d99
 8009d28:	08009db9 	.word	0x08009db9
 8009d2c:	08009db9 	.word	0x08009db9
 8009d30:	08009db9 	.word	0x08009db9
 8009d34:	08009db9 	.word	0x08009db9
 8009d38:	08009db9 	.word	0x08009db9
 8009d3c:	08009db9 	.word	0x08009db9
 8009d40:	08009db9 	.word	0x08009db9
 8009d44:	08009da1 	.word	0x08009da1
 8009d48:	08009db9 	.word	0x08009db9
 8009d4c:	08009db9 	.word	0x08009db9
 8009d50:	08009db9 	.word	0x08009db9
 8009d54:	08009db9 	.word	0x08009db9
 8009d58:	08009db9 	.word	0x08009db9
 8009d5c:	08009db9 	.word	0x08009db9
 8009d60:	08009db9 	.word	0x08009db9
 8009d64:	08009da9 	.word	0x08009da9
 8009d68:	08009db9 	.word	0x08009db9
 8009d6c:	08009db9 	.word	0x08009db9
 8009d70:	08009db9 	.word	0x08009db9
 8009d74:	08009db9 	.word	0x08009db9
 8009d78:	08009db9 	.word	0x08009db9
 8009d7c:	08009db9 	.word	0x08009db9
 8009d80:	08009db9 	.word	0x08009db9
 8009d84:	08009db1 	.word	0x08009db1
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8e:	e0d6      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009d90:	2304      	movs	r3, #4
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d96:	e0d2      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009d98:	2308      	movs	r3, #8
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9e:	e0ce      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009da0:	2310      	movs	r3, #16
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e0ca      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009da8:	2320      	movs	r3, #32
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e0c6      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009db0:	2340      	movs	r3, #64	; 0x40
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e0c2      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009db8:	2380      	movs	r3, #128	; 0x80
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e0be      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009dc0:	40011400 	.word	0x40011400
 8009dc4:	58024400 	.word	0x58024400
 8009dc8:	40007800 	.word	0x40007800
 8009dcc:	40007c00 	.word	0x40007c00
 8009dd0:	40011800 	.word	0x40011800
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4aad      	ldr	r2, [pc, #692]	; (800a090 <UART_SetConfig+0x900>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d176      	bne.n	8009ecc <UART_SetConfig+0x73c>
 8009dde:	4bad      	ldr	r3, [pc, #692]	; (800a094 <UART_SetConfig+0x904>)
 8009de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009de6:	2b28      	cmp	r3, #40	; 0x28
 8009de8:	d86c      	bhi.n	8009ec4 <UART_SetConfig+0x734>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <UART_SetConfig+0x660>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e95 	.word	0x08009e95
 8009df4:	08009ec5 	.word	0x08009ec5
 8009df8:	08009ec5 	.word	0x08009ec5
 8009dfc:	08009ec5 	.word	0x08009ec5
 8009e00:	08009ec5 	.word	0x08009ec5
 8009e04:	08009ec5 	.word	0x08009ec5
 8009e08:	08009ec5 	.word	0x08009ec5
 8009e0c:	08009ec5 	.word	0x08009ec5
 8009e10:	08009e9d 	.word	0x08009e9d
 8009e14:	08009ec5 	.word	0x08009ec5
 8009e18:	08009ec5 	.word	0x08009ec5
 8009e1c:	08009ec5 	.word	0x08009ec5
 8009e20:	08009ec5 	.word	0x08009ec5
 8009e24:	08009ec5 	.word	0x08009ec5
 8009e28:	08009ec5 	.word	0x08009ec5
 8009e2c:	08009ec5 	.word	0x08009ec5
 8009e30:	08009ea5 	.word	0x08009ea5
 8009e34:	08009ec5 	.word	0x08009ec5
 8009e38:	08009ec5 	.word	0x08009ec5
 8009e3c:	08009ec5 	.word	0x08009ec5
 8009e40:	08009ec5 	.word	0x08009ec5
 8009e44:	08009ec5 	.word	0x08009ec5
 8009e48:	08009ec5 	.word	0x08009ec5
 8009e4c:	08009ec5 	.word	0x08009ec5
 8009e50:	08009ead 	.word	0x08009ead
 8009e54:	08009ec5 	.word	0x08009ec5
 8009e58:	08009ec5 	.word	0x08009ec5
 8009e5c:	08009ec5 	.word	0x08009ec5
 8009e60:	08009ec5 	.word	0x08009ec5
 8009e64:	08009ec5 	.word	0x08009ec5
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009ec5 	.word	0x08009ec5
 8009e70:	08009eb5 	.word	0x08009eb5
 8009e74:	08009ec5 	.word	0x08009ec5
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009ec5 	.word	0x08009ec5
 8009e80:	08009ec5 	.word	0x08009ec5
 8009e84:	08009ec5 	.word	0x08009ec5
 8009e88:	08009ec5 	.word	0x08009ec5
 8009e8c:	08009ec5 	.word	0x08009ec5
 8009e90:	08009ebd 	.word	0x08009ebd
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e050      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009e9c:	2304      	movs	r3, #4
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e04c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ea4:	2308      	movs	r3, #8
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eaa:	e048      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009eac:	2310      	movs	r3, #16
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e044      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e040      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e03c      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ec4:	2380      	movs	r3, #128	; 0x80
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e038      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a71      	ldr	r2, [pc, #452]	; (800a098 <UART_SetConfig+0x908>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d130      	bne.n	8009f38 <UART_SetConfig+0x7a8>
 8009ed6:	4b6f      	ldr	r3, [pc, #444]	; (800a094 <UART_SetConfig+0x904>)
 8009ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eda:	f003 0307 	and.w	r3, r3, #7
 8009ede:	2b05      	cmp	r3, #5
 8009ee0:	d826      	bhi.n	8009f30 <UART_SetConfig+0x7a0>
 8009ee2:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <UART_SetConfig+0x758>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009f01 	.word	0x08009f01
 8009eec:	08009f09 	.word	0x08009f09
 8009ef0:	08009f11 	.word	0x08009f11
 8009ef4:	08009f19 	.word	0x08009f19
 8009ef8:	08009f21 	.word	0x08009f21
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	2302      	movs	r3, #2
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f06:	e01a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0e:	e016      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f10:	2308      	movs	r3, #8
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f16:	e012      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e00e      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f20:	2320      	movs	r3, #32
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e00a      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f28:	2340      	movs	r3, #64	; 0x40
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e006      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f30:	2380      	movs	r3, #128	; 0x80
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e002      	b.n	8009f3e <UART_SetConfig+0x7ae>
 8009f38:	2380      	movs	r3, #128	; 0x80
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a55      	ldr	r2, [pc, #340]	; (800a098 <UART_SetConfig+0x908>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	f040 80f8 	bne.w	800a13a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f4e:	2b20      	cmp	r3, #32
 8009f50:	dc46      	bgt.n	8009fe0 <UART_SetConfig+0x850>
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	db75      	blt.n	800a042 <UART_SetConfig+0x8b2>
 8009f56:	3b02      	subs	r3, #2
 8009f58:	2b1e      	cmp	r3, #30
 8009f5a:	d872      	bhi.n	800a042 <UART_SetConfig+0x8b2>
 8009f5c:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <UART_SetConfig+0x7d4>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009fe7 	.word	0x08009fe7
 8009f68:	0800a043 	.word	0x0800a043
 8009f6c:	08009fef 	.word	0x08009fef
 8009f70:	0800a043 	.word	0x0800a043
 8009f74:	0800a043 	.word	0x0800a043
 8009f78:	0800a043 	.word	0x0800a043
 8009f7c:	08009fff 	.word	0x08009fff
 8009f80:	0800a043 	.word	0x0800a043
 8009f84:	0800a043 	.word	0x0800a043
 8009f88:	0800a043 	.word	0x0800a043
 8009f8c:	0800a043 	.word	0x0800a043
 8009f90:	0800a043 	.word	0x0800a043
 8009f94:	0800a043 	.word	0x0800a043
 8009f98:	0800a043 	.word	0x0800a043
 8009f9c:	0800a00f 	.word	0x0800a00f
 8009fa0:	0800a043 	.word	0x0800a043
 8009fa4:	0800a043 	.word	0x0800a043
 8009fa8:	0800a043 	.word	0x0800a043
 8009fac:	0800a043 	.word	0x0800a043
 8009fb0:	0800a043 	.word	0x0800a043
 8009fb4:	0800a043 	.word	0x0800a043
 8009fb8:	0800a043 	.word	0x0800a043
 8009fbc:	0800a043 	.word	0x0800a043
 8009fc0:	0800a043 	.word	0x0800a043
 8009fc4:	0800a043 	.word	0x0800a043
 8009fc8:	0800a043 	.word	0x0800a043
 8009fcc:	0800a043 	.word	0x0800a043
 8009fd0:	0800a043 	.word	0x0800a043
 8009fd4:	0800a043 	.word	0x0800a043
 8009fd8:	0800a043 	.word	0x0800a043
 8009fdc:	0800a035 	.word	0x0800a035
 8009fe0:	2b40      	cmp	r3, #64	; 0x40
 8009fe2:	d02a      	beq.n	800a03a <UART_SetConfig+0x8aa>
 8009fe4:	e02d      	b.n	800a042 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fe6:	f7fd fec3 	bl	8007d70 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fec:	e02f      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fd fed2 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffc:	e027      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffe:	f107 0318 	add.w	r3, r7, #24
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe f81e 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a00c:	e01f      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00e:	4b21      	ldr	r3, [pc, #132]	; (800a094 <UART_SetConfig+0x904>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d009      	beq.n	800a02e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a01a:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <UART_SetConfig+0x904>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	08db      	lsrs	r3, r3, #3
 800a020:	f003 0303 	and.w	r3, r3, #3
 800a024:	4a1d      	ldr	r2, [pc, #116]	; (800a09c <UART_SetConfig+0x90c>)
 800a026:	fa22 f303 	lsr.w	r3, r2, r3
 800a02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a02c:	e00f      	b.n	800a04e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a02e:	4b1b      	ldr	r3, [pc, #108]	; (800a09c <UART_SetConfig+0x90c>)
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a032:	e00c      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a034:	4b1a      	ldr	r3, [pc, #104]	; (800a0a0 <UART_SetConfig+0x910>)
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a038:	e009      	b.n	800a04e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a040:	e005      	b.n	800a04e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a04c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 81ee 	beq.w	800a432 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	4a12      	ldr	r2, [pc, #72]	; (800a0a4 <UART_SetConfig+0x914>)
 800a05c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a060:	461a      	mov	r2, r3
 800a062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a064:	fbb3 f3f2 	udiv	r3, r3, r2
 800a068:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	4413      	add	r3, r2
 800a074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a076:	429a      	cmp	r2, r3
 800a078:	d305      	bcc.n	800a086 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a082:	429a      	cmp	r2, r3
 800a084:	d910      	bls.n	800a0a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a08c:	e1d1      	b.n	800a432 <UART_SetConfig+0xca2>
 800a08e:	bf00      	nop
 800a090:	40011c00 	.word	0x40011c00
 800a094:	58024400 	.word	0x58024400
 800a098:	58000c00 	.word	0x58000c00
 800a09c:	03d09000 	.word	0x03d09000
 800a0a0:	003d0900 	.word	0x003d0900
 800a0a4:	08010b88 	.word	0x08010b88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	60fa      	str	r2, [r7, #12]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	4ac0      	ldr	r2, [pc, #768]	; (800a3b8 <UART_SetConfig+0xc28>)
 800a0b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2200      	movs	r2, #0
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0ca:	f7f6 f989 	bl	80003e0 <__aeabi_uldivmod>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	f04f 0200 	mov.w	r2, #0
 800a0da:	f04f 0300 	mov.w	r3, #0
 800a0de:	020b      	lsls	r3, r1, #8
 800a0e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0e4:	0202      	lsls	r2, r0, #8
 800a0e6:	6979      	ldr	r1, [r7, #20]
 800a0e8:	6849      	ldr	r1, [r1, #4]
 800a0ea:	0849      	lsrs	r1, r1, #1
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	eb12 0804 	adds.w	r8, r2, r4
 800a0f6:	eb43 0905 	adc.w	r9, r3, r5
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	469a      	mov	sl, r3
 800a102:	4693      	mov	fp, r2
 800a104:	4652      	mov	r2, sl
 800a106:	465b      	mov	r3, fp
 800a108:	4640      	mov	r0, r8
 800a10a:	4649      	mov	r1, r9
 800a10c:	f7f6 f968 	bl	80003e0 <__aeabi_uldivmod>
 800a110:	4602      	mov	r2, r0
 800a112:	460b      	mov	r3, r1
 800a114:	4613      	mov	r3, r2
 800a116:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a11e:	d308      	bcc.n	800a132 <UART_SetConfig+0x9a2>
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a126:	d204      	bcs.n	800a132 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a12e:	60da      	str	r2, [r3, #12]
 800a130:	e17f      	b.n	800a432 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a138:	e17b      	b.n	800a432 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a142:	f040 80bd 	bne.w	800a2c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a146:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a14a:	2b20      	cmp	r3, #32
 800a14c:	dc48      	bgt.n	800a1e0 <UART_SetConfig+0xa50>
 800a14e:	2b00      	cmp	r3, #0
 800a150:	db7b      	blt.n	800a24a <UART_SetConfig+0xaba>
 800a152:	2b20      	cmp	r3, #32
 800a154:	d879      	bhi.n	800a24a <UART_SetConfig+0xaba>
 800a156:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <UART_SetConfig+0x9cc>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a1e7 	.word	0x0800a1e7
 800a160:	0800a1ef 	.word	0x0800a1ef
 800a164:	0800a24b 	.word	0x0800a24b
 800a168:	0800a24b 	.word	0x0800a24b
 800a16c:	0800a1f7 	.word	0x0800a1f7
 800a170:	0800a24b 	.word	0x0800a24b
 800a174:	0800a24b 	.word	0x0800a24b
 800a178:	0800a24b 	.word	0x0800a24b
 800a17c:	0800a207 	.word	0x0800a207
 800a180:	0800a24b 	.word	0x0800a24b
 800a184:	0800a24b 	.word	0x0800a24b
 800a188:	0800a24b 	.word	0x0800a24b
 800a18c:	0800a24b 	.word	0x0800a24b
 800a190:	0800a24b 	.word	0x0800a24b
 800a194:	0800a24b 	.word	0x0800a24b
 800a198:	0800a24b 	.word	0x0800a24b
 800a19c:	0800a217 	.word	0x0800a217
 800a1a0:	0800a24b 	.word	0x0800a24b
 800a1a4:	0800a24b 	.word	0x0800a24b
 800a1a8:	0800a24b 	.word	0x0800a24b
 800a1ac:	0800a24b 	.word	0x0800a24b
 800a1b0:	0800a24b 	.word	0x0800a24b
 800a1b4:	0800a24b 	.word	0x0800a24b
 800a1b8:	0800a24b 	.word	0x0800a24b
 800a1bc:	0800a24b 	.word	0x0800a24b
 800a1c0:	0800a24b 	.word	0x0800a24b
 800a1c4:	0800a24b 	.word	0x0800a24b
 800a1c8:	0800a24b 	.word	0x0800a24b
 800a1cc:	0800a24b 	.word	0x0800a24b
 800a1d0:	0800a24b 	.word	0x0800a24b
 800a1d4:	0800a24b 	.word	0x0800a24b
 800a1d8:	0800a24b 	.word	0x0800a24b
 800a1dc:	0800a23d 	.word	0x0800a23d
 800a1e0:	2b40      	cmp	r3, #64	; 0x40
 800a1e2:	d02e      	beq.n	800a242 <UART_SetConfig+0xab2>
 800a1e4:	e031      	b.n	800a24a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1e6:	f7fc fbf7 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 800a1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1ec:	e033      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ee:	f7fc fc09 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 800a1f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1f4:	e02f      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fd fdce 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a204:	e027      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a206:	f107 0318 	add.w	r3, r7, #24
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fd ff1a 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a214:	e01f      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a216:	4b69      	ldr	r3, [pc, #420]	; (800a3bc <UART_SetConfig+0xc2c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 0320 	and.w	r3, r3, #32
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a222:	4b66      	ldr	r3, [pc, #408]	; (800a3bc <UART_SetConfig+0xc2c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	08db      	lsrs	r3, r3, #3
 800a228:	f003 0303 	and.w	r3, r3, #3
 800a22c:	4a64      	ldr	r2, [pc, #400]	; (800a3c0 <UART_SetConfig+0xc30>)
 800a22e:	fa22 f303 	lsr.w	r3, r2, r3
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a234:	e00f      	b.n	800a256 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a236:	4b62      	ldr	r3, [pc, #392]	; (800a3c0 <UART_SetConfig+0xc30>)
 800a238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a23a:	e00c      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a23c:	4b61      	ldr	r3, [pc, #388]	; (800a3c4 <UART_SetConfig+0xc34>)
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a240:	e009      	b.n	800a256 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a248:	e005      	b.n	800a256 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 80ea 	beq.w	800a432 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	4a55      	ldr	r2, [pc, #340]	; (800a3b8 <UART_SetConfig+0xc28>)
 800a264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a268:	461a      	mov	r2, r3
 800a26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a270:	005a      	lsls	r2, r3, #1
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	441a      	add	r2, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a282:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	2b0f      	cmp	r3, #15
 800a288:	d916      	bls.n	800a2b8 <UART_SetConfig+0xb28>
 800a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a290:	d212      	bcs.n	800a2b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	b29b      	uxth	r3, r3
 800a296:	f023 030f 	bic.w	r3, r3, #15
 800a29a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2b4:	60da      	str	r2, [r3, #12]
 800a2b6:	e0bc      	b.n	800a432 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2be:	e0b8      	b.n	800a432 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	dc4b      	bgt.n	800a360 <UART_SetConfig+0xbd0>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f2c0 8087 	blt.w	800a3dc <UART_SetConfig+0xc4c>
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	f200 8084 	bhi.w	800a3dc <UART_SetConfig+0xc4c>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0xb4c>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a367 	.word	0x0800a367
 800a2e0:	0800a36f 	.word	0x0800a36f
 800a2e4:	0800a3dd 	.word	0x0800a3dd
 800a2e8:	0800a3dd 	.word	0x0800a3dd
 800a2ec:	0800a377 	.word	0x0800a377
 800a2f0:	0800a3dd 	.word	0x0800a3dd
 800a2f4:	0800a3dd 	.word	0x0800a3dd
 800a2f8:	0800a3dd 	.word	0x0800a3dd
 800a2fc:	0800a387 	.word	0x0800a387
 800a300:	0800a3dd 	.word	0x0800a3dd
 800a304:	0800a3dd 	.word	0x0800a3dd
 800a308:	0800a3dd 	.word	0x0800a3dd
 800a30c:	0800a3dd 	.word	0x0800a3dd
 800a310:	0800a3dd 	.word	0x0800a3dd
 800a314:	0800a3dd 	.word	0x0800a3dd
 800a318:	0800a3dd 	.word	0x0800a3dd
 800a31c:	0800a397 	.word	0x0800a397
 800a320:	0800a3dd 	.word	0x0800a3dd
 800a324:	0800a3dd 	.word	0x0800a3dd
 800a328:	0800a3dd 	.word	0x0800a3dd
 800a32c:	0800a3dd 	.word	0x0800a3dd
 800a330:	0800a3dd 	.word	0x0800a3dd
 800a334:	0800a3dd 	.word	0x0800a3dd
 800a338:	0800a3dd 	.word	0x0800a3dd
 800a33c:	0800a3dd 	.word	0x0800a3dd
 800a340:	0800a3dd 	.word	0x0800a3dd
 800a344:	0800a3dd 	.word	0x0800a3dd
 800a348:	0800a3dd 	.word	0x0800a3dd
 800a34c:	0800a3dd 	.word	0x0800a3dd
 800a350:	0800a3dd 	.word	0x0800a3dd
 800a354:	0800a3dd 	.word	0x0800a3dd
 800a358:	0800a3dd 	.word	0x0800a3dd
 800a35c:	0800a3cf 	.word	0x0800a3cf
 800a360:	2b40      	cmp	r3, #64	; 0x40
 800a362:	d037      	beq.n	800a3d4 <UART_SetConfig+0xc44>
 800a364:	e03a      	b.n	800a3dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a366:	f7fc fb37 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 800a36a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a36c:	e03c      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a36e:	f7fc fb49 	bl	8006a04 <HAL_RCC_GetPCLK2Freq>
 800a372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a374:	e038      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fd fd0e 	bl	8007d9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a384:	e030      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a386:	f107 0318 	add.w	r3, r7, #24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fd fe5a 	bl	8008044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a394:	e028      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <UART_SetConfig+0xc2c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d012      	beq.n	800a3c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <UART_SetConfig+0xc2c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	08db      	lsrs	r3, r3, #3
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	4a04      	ldr	r2, [pc, #16]	; (800a3c0 <UART_SetConfig+0xc30>)
 800a3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3b4:	e018      	b.n	800a3e8 <UART_SetConfig+0xc58>
 800a3b6:	bf00      	nop
 800a3b8:	08010b88 	.word	0x08010b88
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	03d09000 	.word	0x03d09000
 800a3c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a3c8:	4b24      	ldr	r3, [pc, #144]	; (800a45c <UART_SetConfig+0xccc>)
 800a3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3cc:	e00c      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3ce:	4b24      	ldr	r3, [pc, #144]	; (800a460 <UART_SetConfig+0xcd0>)
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d2:	e009      	b.n	800a3e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3da:	e005      	b.n	800a3e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3e6:	bf00      	nop
    }

    if (pclk != 0U)
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d021      	beq.n	800a432 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	4a1c      	ldr	r2, [pc, #112]	; (800a464 <UART_SetConfig+0xcd4>)
 800a3f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3fc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	085b      	lsrs	r3, r3, #1
 800a406:	441a      	add	r2, r3
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a410:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a414:	2b0f      	cmp	r3, #15
 800a416:	d909      	bls.n	800a42c <UART_SetConfig+0xc9c>
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41e:	d205      	bcs.n	800a42c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	b29a      	uxth	r2, r3
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	e002      	b.n	800a432 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a42c:	2301      	movs	r3, #1
 800a42e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2201      	movs	r2, #1
 800a436:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	2200      	movs	r2, #0
 800a446:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a44e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a452:	4618      	mov	r0, r3
 800a454:	3748      	adds	r7, #72	; 0x48
 800a456:	46bd      	mov	sp, r7
 800a458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a45c:	03d09000 	.word	0x03d09000
 800a460:	003d0900 	.word	0x003d0900
 800a464:	08010b88 	.word	0x08010b88

0800a468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	f003 0302 	and.w	r3, r3, #2
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00a      	beq.n	800a4d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	f003 0308 	and.w	r3, r3, #8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00a      	beq.n	800a51a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	430a      	orrs	r2, r1
 800a518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00a      	beq.n	800a53c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	430a      	orrs	r2, r1
 800a53a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01a      	beq.n	800a57e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a566:	d10a      	bne.n	800a57e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	605a      	str	r2, [r3, #4]
  }
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b098      	sub	sp, #96	; 0x60
 800a5b0:	af02      	add	r7, sp, #8
 800a5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5bc:	f7f7 fe38 	bl	8002230 <HAL_GetTick>
 800a5c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0308 	and.w	r3, r3, #8
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d12f      	bne.n	800a630 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f88e 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d022      	beq.n	800a630 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5fe:	653b      	str	r3, [r7, #80]	; 0x50
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a608:	647b      	str	r3, [r7, #68]	; 0x44
 800a60a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a60e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e6      	bne.n	800a5ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2220      	movs	r2, #32
 800a620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e063      	b.n	800a6f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0304 	and.w	r3, r3, #4
 800a63a:	2b04      	cmp	r3, #4
 800a63c:	d149      	bne.n	800a6d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a63e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a646:	2200      	movs	r2, #0
 800a648:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f857 	bl	800a700 <UART_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d03c      	beq.n	800a6d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	623b      	str	r3, [r7, #32]
   return(result);
 800a666:	6a3b      	ldr	r3, [r7, #32]
 800a668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a66c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a676:	633b      	str	r3, [r7, #48]	; 0x30
 800a678:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67e:	e841 2300 	strex	r3, r2, [r1]
 800a682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1e6      	bne.n	800a658 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3308      	adds	r3, #8
 800a690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	60fb      	str	r3, [r7, #12]
   return(result);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f023 0301 	bic.w	r3, r3, #1
 800a6a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6aa:	61fa      	str	r2, [r7, #28]
 800a6ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ae:	69b9      	ldr	r1, [r7, #24]
 800a6b0:	69fa      	ldr	r2, [r7, #28]
 800a6b2:	e841 2300 	strex	r3, r2, [r1]
 800a6b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e5      	bne.n	800a68a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e012      	b.n	800a6f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2220      	movs	r2, #32
 800a6d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3758      	adds	r7, #88	; 0x58
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	4613      	mov	r3, r2
 800a70e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a710:	e049      	b.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a718:	d045      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a71a:	f7f7 fd89 	bl	8002230 <HAL_GetTick>
 800a71e:	4602      	mov	r2, r0
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	429a      	cmp	r2, r3
 800a728:	d302      	bcc.n	800a730 <UART_WaitOnFlagUntilTimeout+0x30>
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e048      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0304 	and.w	r3, r3, #4
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d031      	beq.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	f003 0308 	and.w	r3, r3, #8
 800a74c:	2b08      	cmp	r3, #8
 800a74e:	d110      	bne.n	800a772 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2208      	movs	r2, #8
 800a756:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 f839 	bl	800a7d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2208      	movs	r2, #8
 800a762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e029      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a77c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a780:	d111      	bne.n	800a7a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a78a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 f81f 	bl	800a7d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2220      	movs	r2, #32
 800a796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e00f      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69da      	ldr	r2, [r3, #28]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	bf0c      	ite	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	2300      	movne	r3, #0
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d0a6      	beq.n	800a712 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b095      	sub	sp, #84	; 0x54
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e6      	bne.n	800a7d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	61fb      	str	r3, [r7, #28]
   return(result);
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	4b1e      	ldr	r3, [pc, #120]	; (800a898 <UART_EndRxTransfer+0xc8>)
 800a81e:	4013      	ands	r3, r2
 800a820:	64bb      	str	r3, [r7, #72]	; 0x48
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a82a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a82c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e5      	bne.n	800a80a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d118      	bne.n	800a878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	60bb      	str	r3, [r7, #8]
   return(result);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f023 0310 	bic.w	r3, r3, #16
 800a85a:	647b      	str	r3, [r7, #68]	; 0x44
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	461a      	mov	r2, r3
 800a862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a868:	6979      	ldr	r1, [r7, #20]
 800a86a:	69ba      	ldr	r2, [r7, #24]
 800a86c:	e841 2300 	strex	r3, r2, [r1]
 800a870:	613b      	str	r3, [r7, #16]
   return(result);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e6      	bne.n	800a846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a88c:	bf00      	nop
 800a88e:	3754      	adds	r7, #84	; 0x54
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	effffffe 	.word	0xeffffffe

0800a89c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e027      	b.n	800a902 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2224      	movs	r2, #36	; 0x24
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f022 0201 	bic.w	r2, r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d101      	bne.n	800a926 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a922:	2302      	movs	r3, #2
 800a924:	e02d      	b.n	800a982 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2224      	movs	r2, #36	; 0x24
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f022 0201 	bic.w	r2, r2, #1
 800a94c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f850 	bl	800aa08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2220      	movs	r2, #32
 800a974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b084      	sub	sp, #16
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d101      	bne.n	800a9a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e02d      	b.n	800a9fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2224      	movs	r2, #36	; 0x24
 800a9ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0201 	bic.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f812 	bl	800aa08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d108      	bne.n	800aa2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa28:	e031      	b.n	800aa8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa2a:	2310      	movs	r3, #16
 800aa2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa2e:	2310      	movs	r3, #16
 800aa30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	0e5b      	lsrs	r3, r3, #25
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	f003 0307 	and.w	r3, r3, #7
 800aa40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	0f5b      	lsrs	r3, r3, #29
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	7b3a      	ldrb	r2, [r7, #12]
 800aa56:	4911      	ldr	r1, [pc, #68]	; (800aa9c <UARTEx_SetNbDataToProcess+0x94>)
 800aa58:	5c8a      	ldrb	r2, [r1, r2]
 800aa5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa5e:	7b3a      	ldrb	r2, [r7, #12]
 800aa60:	490f      	ldr	r1, [pc, #60]	; (800aaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa64:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	7b7a      	ldrb	r2, [r7, #13]
 800aa74:	4909      	ldr	r1, [pc, #36]	; (800aa9c <UARTEx_SetNbDataToProcess+0x94>)
 800aa76:	5c8a      	ldrb	r2, [r1, r2]
 800aa78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa7c:	7b7a      	ldrb	r2, [r7, #13]
 800aa7e:	4908      	ldr	r1, [pc, #32]	; (800aaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa82:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa8e:	bf00      	nop
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	08010ba0 	.word	0x08010ba0
 800aaa0:	08010ba8 	.word	0x08010ba8

0800aaa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aaa4:	b084      	sub	sp, #16
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b084      	sub	sp, #16
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
 800aaae:	f107 001c 	add.w	r0, r7, #28
 800aab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d120      	bne.n	800aafe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	4b2a      	ldr	r3, [pc, #168]	; (800ab78 <USB_CoreInit+0xd4>)
 800aace:	4013      	ands	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d105      	bne.n	800aaf2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fa1c 	bl	800bf30 <USB_CoreReset>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	73fb      	strb	r3, [r7, #15]
 800aafc:	e01a      	b.n	800ab34 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fa10 	bl	800bf30 <USB_CoreReset>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d106      	bne.n	800ab28 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
 800ab26:	e005      	b.n	800ab34 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d116      	bne.n	800ab68 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab48:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <USB_CoreInit+0xd8>)
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	f043 0206 	orr.w	r2, r3, #6
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	f043 0220 	orr.w	r2, r3, #32
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab74:	b004      	add	sp, #16
 800ab76:	4770      	bx	lr
 800ab78:	ffbdffbf 	.word	0xffbdffbf
 800ab7c:	03ee0000 	.word	0x03ee0000

0800ab80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d165      	bne.n	800ac60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	4a41      	ldr	r2, [pc, #260]	; (800ac9c <USB_SetTurnaroundTime+0x11c>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d906      	bls.n	800abaa <USB_SetTurnaroundTime+0x2a>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	4a40      	ldr	r2, [pc, #256]	; (800aca0 <USB_SetTurnaroundTime+0x120>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d202      	bcs.n	800abaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aba4:	230f      	movs	r3, #15
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	e062      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4a3c      	ldr	r2, [pc, #240]	; (800aca0 <USB_SetTurnaroundTime+0x120>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d306      	bcc.n	800abc0 <USB_SetTurnaroundTime+0x40>
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	4a3b      	ldr	r2, [pc, #236]	; (800aca4 <USB_SetTurnaroundTime+0x124>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d202      	bcs.n	800abc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800abba:	230e      	movs	r3, #14
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	e057      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4a38      	ldr	r2, [pc, #224]	; (800aca4 <USB_SetTurnaroundTime+0x124>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d306      	bcc.n	800abd6 <USB_SetTurnaroundTime+0x56>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4a37      	ldr	r2, [pc, #220]	; (800aca8 <USB_SetTurnaroundTime+0x128>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d202      	bcs.n	800abd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800abd0:	230d      	movs	r3, #13
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	e04c      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	4a33      	ldr	r2, [pc, #204]	; (800aca8 <USB_SetTurnaroundTime+0x128>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d306      	bcc.n	800abec <USB_SetTurnaroundTime+0x6c>
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a32      	ldr	r2, [pc, #200]	; (800acac <USB_SetTurnaroundTime+0x12c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d802      	bhi.n	800abec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800abe6:	230c      	movs	r3, #12
 800abe8:	617b      	str	r3, [r7, #20]
 800abea:	e041      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	4a2f      	ldr	r2, [pc, #188]	; (800acac <USB_SetTurnaroundTime+0x12c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d906      	bls.n	800ac02 <USB_SetTurnaroundTime+0x82>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	4a2e      	ldr	r2, [pc, #184]	; (800acb0 <USB_SetTurnaroundTime+0x130>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d802      	bhi.n	800ac02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800abfc:	230b      	movs	r3, #11
 800abfe:	617b      	str	r3, [r7, #20]
 800ac00:	e036      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	4a2a      	ldr	r2, [pc, #168]	; (800acb0 <USB_SetTurnaroundTime+0x130>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d906      	bls.n	800ac18 <USB_SetTurnaroundTime+0x98>
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4a29      	ldr	r2, [pc, #164]	; (800acb4 <USB_SetTurnaroundTime+0x134>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d802      	bhi.n	800ac18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ac12:	230a      	movs	r3, #10
 800ac14:	617b      	str	r3, [r7, #20]
 800ac16:	e02b      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	4a26      	ldr	r2, [pc, #152]	; (800acb4 <USB_SetTurnaroundTime+0x134>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d906      	bls.n	800ac2e <USB_SetTurnaroundTime+0xae>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	4a25      	ldr	r2, [pc, #148]	; (800acb8 <USB_SetTurnaroundTime+0x138>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d202      	bcs.n	800ac2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ac28:	2309      	movs	r3, #9
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	e020      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	4a21      	ldr	r2, [pc, #132]	; (800acb8 <USB_SetTurnaroundTime+0x138>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d306      	bcc.n	800ac44 <USB_SetTurnaroundTime+0xc4>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4a20      	ldr	r2, [pc, #128]	; (800acbc <USB_SetTurnaroundTime+0x13c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d802      	bhi.n	800ac44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ac3e:	2308      	movs	r3, #8
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	e015      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	4a1d      	ldr	r2, [pc, #116]	; (800acbc <USB_SetTurnaroundTime+0x13c>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d906      	bls.n	800ac5a <USB_SetTurnaroundTime+0xda>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	4a1c      	ldr	r2, [pc, #112]	; (800acc0 <USB_SetTurnaroundTime+0x140>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d202      	bcs.n	800ac5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ac54:	2307      	movs	r3, #7
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	e00a      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ac5a:	2306      	movs	r3, #6
 800ac5c:	617b      	str	r3, [r7, #20]
 800ac5e:	e007      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ac60:	79fb      	ldrb	r3, [r7, #7]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d102      	bne.n	800ac6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ac66:	2309      	movs	r3, #9
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	e001      	b.n	800ac70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ac6c:	2309      	movs	r3, #9
 800ac6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	68da      	ldr	r2, [r3, #12]
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	029b      	lsls	r3, r3, #10
 800ac84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	371c      	adds	r7, #28
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	00d8acbf 	.word	0x00d8acbf
 800aca0:	00e4e1c0 	.word	0x00e4e1c0
 800aca4:	00f42400 	.word	0x00f42400
 800aca8:	01067380 	.word	0x01067380
 800acac:	011a499f 	.word	0x011a499f
 800acb0:	01312cff 	.word	0x01312cff
 800acb4:	014ca43f 	.word	0x014ca43f
 800acb8:	016e3600 	.word	0x016e3600
 800acbc:	01a6ab1f 	.word	0x01a6ab1f
 800acc0:	01e84800 	.word	0x01e84800

0800acc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f043 0201 	orr.w	r2, r3, #1
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b083      	sub	sp, #12
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f023 0201 	bic.w	r2, r3, #1
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d115      	bne.n	800ad56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	68db      	ldr	r3, [r3, #12]
 800ad2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad36:	2001      	movs	r0, #1
 800ad38:	f7f7 fa86 	bl	8002248 <HAL_Delay>
      ms++;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 f863 	bl	800be0e <USB_GetMode>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d01e      	beq.n	800ad8c <USB_SetCurrentMode+0x84>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b31      	cmp	r3, #49	; 0x31
 800ad52:	d9f0      	bls.n	800ad36 <USB_SetCurrentMode+0x2e>
 800ad54:	e01a      	b.n	800ad8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d115      	bne.n	800ad88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ad68:	2001      	movs	r0, #1
 800ad6a:	f7f7 fa6d 	bl	8002248 <HAL_Delay>
      ms++;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3301      	adds	r3, #1
 800ad72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f001 f84a 	bl	800be0e <USB_GetMode>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <USB_SetCurrentMode+0x84>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b31      	cmp	r3, #49	; 0x31
 800ad84:	d9f0      	bls.n	800ad68 <USB_SetCurrentMode+0x60>
 800ad86:	e001      	b.n	800ad8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e005      	b.n	800ad98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b32      	cmp	r3, #50	; 0x32
 800ad90:	d101      	bne.n	800ad96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ada0:	b084      	sub	sp, #16
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b086      	sub	sp, #24
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800adae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	e009      	b.n	800add4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	3340      	adds	r3, #64	; 0x40
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	3301      	adds	r3, #1
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	2b0e      	cmp	r3, #14
 800add8:	d9f2      	bls.n	800adc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800adda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d11c      	bne.n	800ae1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e005      	b.n	800ae26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae40:	461a      	mov	r2, r3
 800ae42:	680b      	ldr	r3, [r1, #0]
 800ae44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d10c      	bne.n	800ae66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae52:	2100      	movs	r1, #0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f965 	bl	800b124 <USB_SetDevSpeed>
 800ae5a:	e008      	b.n	800ae6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f960 	bl	800b124 <USB_SetDevSpeed>
 800ae64:	e003      	b.n	800ae6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae66:	2103      	movs	r1, #3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f95b 	bl	800b124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae6e:	2110      	movs	r1, #16
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 f8f3 	bl	800b05c <USB_FlushTxFifo>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f91f 	bl	800b0c4 <USB_FlushRxFifo>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae96:	461a      	mov	r2, r3
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea2:	461a      	mov	r2, r3
 800aea4:	2300      	movs	r3, #0
 800aea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeae:	461a      	mov	r2, r3
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	613b      	str	r3, [r7, #16]
 800aeb8:	e043      	b.n	800af42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aed0:	d118      	bne.n	800af04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee4:	461a      	mov	r2, r3
 800aee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	e013      	b.n	800af16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	015a      	lsls	r2, r3, #5
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	4413      	add	r3, r2
 800aef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefa:	461a      	mov	r2, r3
 800aefc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	e008      	b.n	800af16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af10:	461a      	mov	r2, r3
 800af12:	2300      	movs	r3, #0
 800af14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	461a      	mov	r2, r3
 800af24:	2300      	movs	r3, #0
 800af26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af34:	461a      	mov	r2, r3
 800af36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3301      	adds	r3, #1
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	429a      	cmp	r2, r3
 800af48:	d3b7      	bcc.n	800aeba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]
 800af4e:	e043      	b.n	800afd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af66:	d118      	bne.n	800af9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7a:	461a      	mov	r2, r3
 800af7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	e013      	b.n	800afac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af90:	461a      	mov	r2, r3
 800af92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af96:	6013      	str	r3, [r2, #0]
 800af98:	e008      	b.n	800afac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	015a      	lsls	r2, r3, #5
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa6:	461a      	mov	r2, r3
 800afa8:	2300      	movs	r3, #0
 800afaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb8:	461a      	mov	r2, r3
 800afba:	2300      	movs	r3, #0
 800afbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afca:	461a      	mov	r2, r3
 800afcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800afd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	3301      	adds	r3, #1
 800afd6:	613b      	str	r3, [r7, #16]
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d3b7      	bcc.n	800af50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	68fa      	ldr	r2, [r7, #12]
 800afea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d105      	bne.n	800b014 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	f043 0210 	orr.w	r2, r3, #16
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	699a      	ldr	r2, [r3, #24]
 800b018:	4b0e      	ldr	r3, [pc, #56]	; (800b054 <USB_DevInit+0x2b4>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	2b00      	cmp	r3, #0
 800b024:	d005      	beq.n	800b032 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	f043 0208 	orr.w	r2, r3, #8
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b034:	2b01      	cmp	r3, #1
 800b036:	d105      	bne.n	800b044 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699a      	ldr	r2, [r3, #24]
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <USB_DevInit+0x2b8>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b050:	b004      	add	sp, #16
 800b052:	4770      	bx	lr
 800b054:	803c3800 	.word	0x803c3800
 800b058:	40000004 	.word	0x40000004

0800b05c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4a13      	ldr	r2, [pc, #76]	; (800b0c0 <USB_FlushTxFifo+0x64>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d901      	bls.n	800b07c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e01b      	b.n	800b0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	daf2      	bge.n	800b06a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b084:	2300      	movs	r3, #0
 800b086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	019b      	lsls	r3, r3, #6
 800b08c:	f043 0220 	orr.w	r2, r3, #32
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3301      	adds	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <USB_FlushTxFifo+0x64>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d901      	bls.n	800b0a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e006      	b.n	800b0b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	f003 0320 	and.w	r3, r3, #32
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d0f0      	beq.n	800b094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	00030d40 	.word	0x00030d40

0800b0c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4a11      	ldr	r2, [pc, #68]	; (800b120 <USB_FlushRxFifo+0x5c>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d901      	bls.n	800b0e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e018      	b.n	800b114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	daf2      	bge.n	800b0d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2210      	movs	r2, #16
 800b0f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	4a08      	ldr	r2, [pc, #32]	; (800b120 <USB_FlushRxFifo+0x5c>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e006      	b.n	800b114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0310 	and.w	r3, r3, #16
 800b10e:	2b10      	cmp	r3, #16
 800b110:	d0f0      	beq.n	800b0f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr
 800b120:	00030d40 	.word	0x00030d40

0800b124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b144:	4313      	orrs	r3, r2
 800b146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr

0800b156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b156:	b480      	push	{r7}
 800b158:	b087      	sub	sp, #28
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	f003 0306 	and.w	r3, r3, #6
 800b16e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d102      	bne.n	800b17c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b176:	2300      	movs	r3, #0
 800b178:	75fb      	strb	r3, [r7, #23]
 800b17a:	e00a      	b.n	800b192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d002      	beq.n	800b188 <USB_GetDevSpeed+0x32>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b06      	cmp	r3, #6
 800b186:	d102      	bne.n	800b18e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b188:	2302      	movs	r3, #2
 800b18a:	75fb      	strb	r3, [r7, #23]
 800b18c:	e001      	b.n	800b192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b18e:	230f      	movs	r3, #15
 800b190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
}
 800b194:	4618      	mov	r0, r3
 800b196:	371c      	adds	r7, #28
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	785b      	ldrb	r3, [r3, #1]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d139      	bne.n	800b230 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1c2:	69da      	ldr	r2, [r3, #28]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	f003 030f 	and.w	r3, r3, #15
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	68f9      	ldr	r1, [r7, #12]
 800b1d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d153      	bne.n	800b29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	791b      	ldrb	r3, [r3, #4]
 800b20e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	059b      	lsls	r3, r3, #22
 800b216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b218:	431a      	orrs	r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	0159      	lsls	r1, r3, #5
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	440b      	add	r3, r1
 800b222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b226:	4619      	mov	r1, r3
 800b228:	4b20      	ldr	r3, [pc, #128]	; (800b2ac <USB_ActivateEndpoint+0x10c>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	600b      	str	r3, [r1, #0]
 800b22e:	e035      	b.n	800b29c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b236:	69da      	ldr	r2, [r3, #28]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	2101      	movs	r1, #1
 800b242:	fa01 f303 	lsl.w	r3, r1, r3
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	68f9      	ldr	r1, [r7, #12]
 800b24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b24e:	4313      	orrs	r3, r2
 800b250:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	015a      	lsls	r2, r3, #5
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d119      	bne.n	800b29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	015a      	lsls	r2, r3, #5
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	791b      	ldrb	r3, [r3, #4]
 800b282:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b284:	430b      	orrs	r3, r1
 800b286:	431a      	orrs	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	0159      	lsls	r1, r3, #5
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	440b      	add	r3, r1
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	4619      	mov	r1, r3
 800b296:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <USB_ActivateEndpoint+0x10c>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	10008000 	.word	0x10008000

0800b2b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08a      	sub	sp, #40	; 0x28
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	785b      	ldrb	r3, [r3, #1]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	f040 8181 	bne.w	800b5d4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d132      	bne.n	800b340 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e6:	691a      	ldr	r2, [r3, #16]
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	0159      	lsls	r1, r3, #5
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	440b      	add	r3, r1
 800b2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	4ba5      	ldr	r3, [pc, #660]	; (800b58c <USB_EPStartXfer+0x2dc>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	69ba      	ldr	r2, [r7, #24]
 800b30c:	0151      	lsls	r1, r2, #5
 800b30e:	69fa      	ldr	r2, [r7, #28]
 800b310:	440a      	add	r2, r1
 800b312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b31a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b328:	691a      	ldr	r2, [r3, #16]
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	0159      	lsls	r1, r3, #5
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	440b      	add	r3, r1
 800b332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b336:	4619      	mov	r1, r3
 800b338:	4b95      	ldr	r3, [pc, #596]	; (800b590 <USB_EPStartXfer+0x2e0>)
 800b33a:	4013      	ands	r3, r2
 800b33c:	610b      	str	r3, [r1, #16]
 800b33e:	e092      	b.n	800b466 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34c:	691a      	ldr	r2, [r3, #16]
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	0159      	lsls	r1, r3, #5
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	440b      	add	r3, r1
 800b356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35a:	4619      	mov	r1, r3
 800b35c:	4b8c      	ldr	r3, [pc, #560]	; (800b590 <USB_EPStartXfer+0x2e0>)
 800b35e:	4013      	ands	r3, r2
 800b360:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b36e:	691a      	ldr	r2, [r3, #16]
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	0159      	lsls	r1, r3, #5
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	440b      	add	r3, r1
 800b378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37c:	4619      	mov	r1, r3
 800b37e:	4b83      	ldr	r3, [pc, #524]	; (800b58c <USB_EPStartXfer+0x2dc>)
 800b380:	4013      	ands	r3, r2
 800b382:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d11a      	bne.n	800b3c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	691a      	ldr	r2, [r3, #16]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	429a      	cmp	r2, r3
 800b394:	d903      	bls.n	800b39e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	689a      	ldr	r2, [r3, #8]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3bc:	6113      	str	r3, [r2, #16]
 800b3be:	e01b      	b.n	800b3f8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	015a      	lsls	r2, r3, #5
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3cc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	6919      	ldr	r1, [r3, #16]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	440b      	add	r3, r1
 800b3d8:	1e59      	subs	r1, r3, #1
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3e2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b3e4:	4b6b      	ldr	r3, [pc, #428]	; (800b594 <USB_EPStartXfer+0x2e4>)
 800b3e6:	400b      	ands	r3, r1
 800b3e8:	69b9      	ldr	r1, [r7, #24]
 800b3ea:	0148      	lsls	r0, r1, #5
 800b3ec:	69f9      	ldr	r1, [r7, #28]
 800b3ee:	4401      	add	r1, r0
 800b3f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	015a      	lsls	r2, r3, #5
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	4413      	add	r3, r2
 800b400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b404:	691a      	ldr	r2, [r3, #16]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b40e:	69b9      	ldr	r1, [r7, #24]
 800b410:	0148      	lsls	r0, r1, #5
 800b412:	69f9      	ldr	r1, [r7, #28]
 800b414:	4401      	add	r1, r0
 800b416:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b41a:	4313      	orrs	r3, r2
 800b41c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	791b      	ldrb	r3, [r3, #4]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d11f      	bne.n	800b466 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	0151      	lsls	r1, r2, #5
 800b438:	69fa      	ldr	r2, [r7, #28]
 800b43a:	440a      	add	r2, r1
 800b43c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b440:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b444:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	69ba      	ldr	r2, [r7, #24]
 800b456:	0151      	lsls	r1, r2, #5
 800b458:	69fa      	ldr	r2, [r7, #28]
 800b45a:	440a      	add	r2, r1
 800b45c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b464:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d14b      	bne.n	800b504 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	69db      	ldr	r3, [r3, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b480:	461a      	mov	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d128      	bne.n	800b4e2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d110      	bne.n	800b4c2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	e00f      	b.n	800b4e2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	0151      	lsls	r1, r2, #5
 800b4f4:	69fa      	ldr	r2, [r7, #28]
 800b4f6:	440a      	add	r2, r1
 800b4f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	e16a      	b.n	800b7da <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	69fa      	ldr	r2, [r7, #28]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b51e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b522:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d015      	beq.n	800b558 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 8152 	beq.w	800b7da <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	f003 030f 	and.w	r3, r3, #15
 800b546:	2101      	movs	r1, #1
 800b548:	fa01 f303 	lsl.w	r3, r1, r3
 800b54c:	69f9      	ldr	r1, [r7, #28]
 800b54e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b552:	4313      	orrs	r3, r2
 800b554:	634b      	str	r3, [r1, #52]	; 0x34
 800b556:	e140      	b.n	800b7da <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b564:	2b00      	cmp	r3, #0
 800b566:	d117      	bne.n	800b598 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69ba      	ldr	r2, [r7, #24]
 800b578:	0151      	lsls	r1, r2, #5
 800b57a:	69fa      	ldr	r2, [r7, #28]
 800b57c:	440a      	add	r2, r1
 800b57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	e016      	b.n	800b5b8 <USB_EPStartXfer+0x308>
 800b58a:	bf00      	nop
 800b58c:	e007ffff 	.word	0xe007ffff
 800b590:	fff80000 	.word	0xfff80000
 800b594:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	0151      	lsls	r1, r2, #5
 800b5aa:	69fa      	ldr	r2, [r7, #28]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5b6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	68d9      	ldr	r1, [r3, #12]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	781a      	ldrb	r2, [r3, #0]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	b298      	uxth	r0, r3
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f000 f9b9 	bl	800b944 <USB_WritePacket>
 800b5d2:	e102      	b.n	800b7da <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	691a      	ldr	r2, [r3, #16]
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	0159      	lsls	r1, r3, #5
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	440b      	add	r3, r1
 800b5ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4b7c      	ldr	r3, [pc, #496]	; (800b7e4 <USB_EPStartXfer+0x534>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	0159      	lsls	r1, r3, #5
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	440b      	add	r3, r1
 800b60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b610:	4619      	mov	r1, r3
 800b612:	4b75      	ldr	r3, [pc, #468]	; (800b7e8 <USB_EPStartXfer+0x538>)
 800b614:	4013      	ands	r3, r2
 800b616:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d12f      	bne.n	800b67e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	689a      	ldr	r2, [r3, #8]
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	689a      	ldr	r2, [r3, #8]
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b642:	691a      	ldr	r2, [r3, #16]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b64c:	69b9      	ldr	r1, [r7, #24]
 800b64e:	0148      	lsls	r0, r1, #5
 800b650:	69f9      	ldr	r1, [r7, #28]
 800b652:	4401      	add	r1, r0
 800b654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b658:	4313      	orrs	r3, r2
 800b65a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	0151      	lsls	r1, r2, #5
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	440a      	add	r2, r1
 800b672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b67a:	6113      	str	r3, [r2, #16]
 800b67c:	e05f      	b.n	800b73e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d123      	bne.n	800b6ce <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	015a      	lsls	r2, r3, #5
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b692:	691a      	ldr	r2, [r3, #16]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	689b      	ldr	r3, [r3, #8]
 800b698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b69c:	69b9      	ldr	r1, [r7, #24]
 800b69e:	0148      	lsls	r0, r1, #5
 800b6a0:	69f9      	ldr	r1, [r7, #28]
 800b6a2:	4401      	add	r1, r0
 800b6a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	015a      	lsls	r2, r3, #5
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	69ba      	ldr	r2, [r7, #24]
 800b6bc:	0151      	lsls	r1, r2, #5
 800b6be:	69fa      	ldr	r2, [r7, #28]
 800b6c0:	440a      	add	r2, r1
 800b6c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6ca:	6113      	str	r3, [r2, #16]
 800b6cc:	e037      	b.n	800b73e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	691a      	ldr	r2, [r3, #16]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	1e5a      	subs	r2, r3, #1
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6e2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	8afa      	ldrh	r2, [r7, #22]
 800b6ea:	fb03 f202 	mul.w	r2, r3, r2
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	015a      	lsls	r2, r3, #5
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6fe:	691a      	ldr	r2, [r3, #16]
 800b700:	8afb      	ldrh	r3, [r7, #22]
 800b702:	04d9      	lsls	r1, r3, #19
 800b704:	4b39      	ldr	r3, [pc, #228]	; (800b7ec <USB_EPStartXfer+0x53c>)
 800b706:	400b      	ands	r3, r1
 800b708:	69b9      	ldr	r1, [r7, #24]
 800b70a:	0148      	lsls	r0, r1, #5
 800b70c:	69f9      	ldr	r1, [r7, #28]
 800b70e:	4401      	add	r1, r0
 800b710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b714:	4313      	orrs	r3, r2
 800b716:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b724:	691a      	ldr	r2, [r3, #16]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b72e:	69b9      	ldr	r1, [r7, #24]
 800b730:	0148      	lsls	r0, r1, #5
 800b732:	69f9      	ldr	r1, [r7, #28]
 800b734:	4401      	add	r1, r0
 800b736:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b73a:	4313      	orrs	r3, r2
 800b73c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d10d      	bne.n	800b760 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d009      	beq.n	800b760 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	68d9      	ldr	r1, [r3, #12]
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75c:	460a      	mov	r2, r1
 800b75e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	791b      	ldrb	r3, [r3, #4]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d128      	bne.n	800b7ba <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b774:	2b00      	cmp	r3, #0
 800b776:	d110      	bne.n	800b79a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b792:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	e00f      	b.n	800b7ba <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69ba      	ldr	r2, [r7, #24]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3720      	adds	r7, #32
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	fff80000 	.word	0xfff80000
 800b7e8:	e007ffff 	.word	0xe007ffff
 800b7ec:	1ff80000 	.word	0x1ff80000

0800b7f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	785b      	ldrb	r3, [r3, #1]
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d14a      	bne.n	800b8a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	015a      	lsls	r2, r3, #5
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	4413      	add	r3, r2
 800b818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b826:	f040 8086 	bne.w	800b936 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	015a      	lsls	r2, r3, #5
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	4413      	add	r3, r2
 800b834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	683a      	ldr	r2, [r7, #0]
 800b83c:	7812      	ldrb	r2, [r2, #0]
 800b83e:	0151      	lsls	r1, r2, #5
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	440a      	add	r2, r1
 800b844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b84c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	015a      	lsls	r2, r3, #5
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	4413      	add	r3, r2
 800b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	7812      	ldrb	r2, [r2, #0]
 800b862:	0151      	lsls	r1, r2, #5
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	440a      	add	r2, r1
 800b868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b870:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3301      	adds	r3, #1
 800b876:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b87e:	4293      	cmp	r3, r2
 800b880:	d902      	bls.n	800b888 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	75fb      	strb	r3, [r7, #23]
          break;
 800b886:	e056      	b.n	800b936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b89c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8a0:	d0e7      	beq.n	800b872 <USB_EPStopXfer+0x82>
 800b8a2:	e048      	b.n	800b936 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8bc:	d13b      	bne.n	800b936 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	7812      	ldrb	r2, [r2, #0]
 800b8d2:	0151      	lsls	r1, r2, #5
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	440a      	add	r2, r1
 800b8d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b8e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	7812      	ldrb	r2, [r2, #0]
 800b8f6:	0151      	lsls	r1, r2, #5
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	440a      	add	r2, r1
 800b8fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b904:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3301      	adds	r3, #1
 800b90a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b912:	4293      	cmp	r3, r2
 800b914:	d902      	bls.n	800b91c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	75fb      	strb	r3, [r7, #23]
          break;
 800b91a:	e00c      	b.n	800b936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b934:	d0e7      	beq.n	800b906 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	371c      	adds	r7, #28
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b944:	b480      	push	{r7}
 800b946:	b089      	sub	sp, #36	; 0x24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4611      	mov	r1, r2
 800b950:	461a      	mov	r2, r3
 800b952:	460b      	mov	r3, r1
 800b954:	71fb      	strb	r3, [r7, #7]
 800b956:	4613      	mov	r3, r2
 800b958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b966:	2b00      	cmp	r3, #0
 800b968:	d123      	bne.n	800b9b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b96a:	88bb      	ldrh	r3, [r7, #4]
 800b96c:	3303      	adds	r3, #3
 800b96e:	089b      	lsrs	r3, r3, #2
 800b970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b972:	2300      	movs	r3, #0
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	e018      	b.n	800b9aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b978:	79fb      	ldrb	r3, [r7, #7]
 800b97a:	031a      	lsls	r2, r3, #12
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b984:	461a      	mov	r2, r3
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	3301      	adds	r3, #1
 800b990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	3301      	adds	r3, #1
 800b996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	3301      	adds	r3, #1
 800b99c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	61bb      	str	r3, [r7, #24]
 800b9aa:	69ba      	ldr	r2, [r7, #24]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d3e2      	bcc.n	800b978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3724      	adds	r7, #36	; 0x24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b08b      	sub	sp, #44	; 0x2c
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b9d6:	88fb      	ldrh	r3, [r7, #6]
 800b9d8:	089b      	lsrs	r3, r3, #2
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9de:	88fb      	ldrh	r3, [r7, #6]
 800b9e0:	f003 0303 	and.w	r3, r3, #3
 800b9e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	623b      	str	r3, [r7, #32]
 800b9ea:	e014      	b.n	800ba16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	3301      	adds	r3, #1
 800ba02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	3301      	adds	r3, #1
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	3301      	adds	r3, #1
 800ba14:	623b      	str	r3, [r7, #32]
 800ba16:	6a3a      	ldr	r2, [r7, #32]
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d3e6      	bcc.n	800b9ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ba1e:	8bfb      	ldrh	r3, [r7, #30]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01e      	beq.n	800ba62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ba24:	2300      	movs	r3, #0
 800ba26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f107 0310 	add.w	r3, r7, #16
 800ba34:	6812      	ldr	r2, [r2, #0]
 800ba36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	6a3b      	ldr	r3, [r7, #32]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	fa22 f303 	lsr.w	r3, r2, r3
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	701a      	strb	r2, [r3, #0]
      i++;
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	3301      	adds	r3, #1
 800ba54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ba56:	8bfb      	ldrh	r3, [r7, #30]
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba5c:	8bfb      	ldrh	r3, [r7, #30]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1ea      	bne.n	800ba38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	372c      	adds	r7, #44	; 0x2c
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	785b      	ldrb	r3, [r3, #1]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d12c      	bne.n	800bae6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	db12      	blt.n	800bac4 <USB_EPSetStall+0x54>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00f      	beq.n	800bac4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	0151      	lsls	r1, r2, #5
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	440a      	add	r2, r1
 800baba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800babe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bac2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	0151      	lsls	r1, r2, #5
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	440a      	add	r2, r1
 800bada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	e02b      	b.n	800bb3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	db12      	blt.n	800bb1e <USB_EPSetStall+0xae>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00f      	beq.n	800bb1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	015a      	lsls	r2, r3, #5
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	4413      	add	r3, r2
 800bb06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	0151      	lsls	r1, r2, #5
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	440a      	add	r2, r1
 800bb14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bb1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	0151      	lsls	r1, r2, #5
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	440a      	add	r2, r1
 800bb34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bb3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d128      	bne.n	800bbba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68ba      	ldr	r2, [r7, #8]
 800bb78:	0151      	lsls	r1, r2, #5
 800bb7a:	68fa      	ldr	r2, [r7, #12]
 800bb7c:	440a      	add	r2, r1
 800bb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	791b      	ldrb	r3, [r3, #4]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	d003      	beq.n	800bb98 <USB_EPClearStall+0x4c>
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	791b      	ldrb	r3, [r3, #4]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d138      	bne.n	800bc0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	015a      	lsls	r2, r3, #5
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	4413      	add	r3, r2
 800bba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	0151      	lsls	r1, r2, #5
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	440a      	add	r2, r1
 800bbae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	e027      	b.n	800bc0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	015a      	lsls	r2, r3, #5
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4413      	add	r3, r2
 800bbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	0151      	lsls	r1, r2, #5
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	440a      	add	r2, r1
 800bbd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bbd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	791b      	ldrb	r3, [r3, #4]
 800bbde:	2b03      	cmp	r3, #3
 800bbe0:	d003      	beq.n	800bbea <USB_EPClearStall+0x9e>
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	791b      	ldrb	r3, [r3, #4]
 800bbe6:	2b02      	cmp	r3, #2
 800bbe8:	d10f      	bne.n	800bc0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	015a      	lsls	r2, r3, #5
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	0151      	lsls	r1, r2, #5
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	440a      	add	r2, r1
 800bc00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	460b      	mov	r3, r1
 800bc22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bc3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	78fb      	ldrb	r3, [r7, #3]
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bc4c:	68f9      	ldr	r1, [r7, #12]
 800bc4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc52:	4313      	orrs	r3, r2
 800bc54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc92:	f023 0302 	bic.w	r3, r3, #2
 800bc96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3714      	adds	r7, #20
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcc0:	f023 0303 	bic.w	r3, r3, #3
 800bcc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcd4:	f043 0302 	orr.w	r3, r3, #2
 800bcd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bd00:	68fb      	ldr	r3, [r7, #12]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	4013      	ands	r3, r2
 800bd30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	0c1b      	lsrs	r3, r3, #16
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5e:	69db      	ldr	r3, [r3, #28]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	4013      	ands	r3, r2
 800bd64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	b29b      	uxth	r3, r3
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd76:	b480      	push	{r7}
 800bd78:	b085      	sub	sp, #20
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
 800bd7e:	460b      	mov	r3, r1
 800bd80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	4013      	ands	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bda4:	68bb      	ldr	r3, [r7, #8]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr

0800bdb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bdb2:	b480      	push	{r7}
 800bdb4:	b087      	sub	sp, #28
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bdd6:	78fb      	ldrb	r3, [r7, #3]
 800bdd8:	f003 030f 	and.w	r3, r3, #15
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	fa22 f303 	lsr.w	r3, r2, r3
 800bde2:	01db      	lsls	r3, r3, #7
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdec:	78fb      	ldrb	r3, [r7, #3]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800be00:	68bb      	ldr	r3, [r7, #8]
}
 800be02:	4618      	mov	r0, r3
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	f003 0301 	and.w	r3, r3, #1
}
 800be1e:	4618      	mov	r0, r3
 800be20:	370c      	adds	r7, #12
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
	...

0800be2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b085      	sub	sp, #20
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be46:	4619      	mov	r1, r3
 800be48:	4b09      	ldr	r3, [pc, #36]	; (800be70 <USB_ActivateSetup+0x44>)
 800be4a:	4013      	ands	r3, r2
 800be4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be62:	2300      	movs	r3, #0
}
 800be64:	4618      	mov	r0, r3
 800be66:	3714      	adds	r7, #20
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	fffff800 	.word	0xfffff800

0800be74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	460b      	mov	r3, r1
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	333c      	adds	r3, #60	; 0x3c
 800be8a:	3304      	adds	r3, #4
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	4a26      	ldr	r2, [pc, #152]	; (800bf2c <USB_EP0_OutStart+0xb8>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d90a      	bls.n	800beae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bea8:	d101      	bne.n	800beae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	e037      	b.n	800bf1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb4:	461a      	mov	r2, r3
 800beb6:	2300      	movs	r3, #0
 800beb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	697a      	ldr	r2, [r7, #20]
 800bec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800becc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bedc:	f043 0318 	orr.w	r3, r3, #24
 800bee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bef0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bef4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bef6:	7afb      	ldrb	r3, [r7, #11]
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d10f      	bne.n	800bf1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf02:	461a      	mov	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bf1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	4f54300a 	.word	0x4f54300a

0800bf30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	4a13      	ldr	r2, [pc, #76]	; (800bf94 <USB_CoreReset+0x64>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d901      	bls.n	800bf4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e01b      	b.n	800bf86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	daf2      	bge.n	800bf3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf56:	2300      	movs	r3, #0
 800bf58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	f043 0201 	orr.w	r2, r3, #1
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	4a09      	ldr	r2, [pc, #36]	; (800bf94 <USB_CoreReset+0x64>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d901      	bls.n	800bf78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf74:	2303      	movs	r3, #3
 800bf76:	e006      	b.n	800bf86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	f003 0301 	and.w	r3, r3, #1
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d0f0      	beq.n	800bf66 <USB_CoreReset+0x36>

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	00030d40 	.word	0x00030d40

0800bf98 <__NVIC_SystemReset>:
{
 800bf98:	b480      	push	{r7}
 800bf9a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bf9c:	f3bf 8f4f 	dsb	sy
}
 800bfa0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bfa2:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <__NVIC_SystemReset+0x24>)
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bfaa:	4904      	ldr	r1, [pc, #16]	; (800bfbc <__NVIC_SystemReset+0x24>)
 800bfac:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <__NVIC_SystemReset+0x28>)
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bfb2:	f3bf 8f4f 	dsb	sy
}
 800bfb6:	bf00      	nop
    __NOP();
 800bfb8:	bf00      	nop
 800bfba:	e7fd      	b.n	800bfb8 <__NVIC_SystemReset+0x20>
 800bfbc:	e000ed00 	.word	0xe000ed00
 800bfc0:	05fa0004 	.word	0x05fa0004

0800bfc4 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 800bfd0:	f240 401c 	movw	r0, #1052	; 0x41c
 800bfd4:	f002 fe6e 	bl	800ecb4 <USBD_static_malloc>
 800bfd8:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	32b0      	adds	r2, #176	; 0xb0
 800bfea:	2100      	movs	r1, #0
 800bfec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bff0:	2302      	movs	r3, #2
 800bff2:	e051      	b.n	800c098 <USBD_DFU_Init+0xd4>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	32b0      	adds	r2, #176	; 0xb0
 800bffe:	68f9      	ldr	r1, [r7, #12]
 800c000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	32b0      	adds	r2, #176	; 0xb0
 800c00e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4a1f      	ldr	r2, [pc, #124]	; (800c0a0 <USBD_DFU_Init+0xdc>)
 800c024:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2200      	movs	r2, #0
 800c02c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2200      	movs	r2, #0
 800c034:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2202      	movs	r2, #2
 800c044:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	33b0      	adds	r3, #176	; 0xb0
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	4798      	blx	r3
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d001      	beq.n	800c096 <USBD_DFU_Init+0xd2>
  {
    return (uint8_t)USBD_FAIL;
 800c092:	2303      	movs	r3, #3
 800c094:	e000      	b.n	800c098 <USBD_DFU_Init+0xd4>
  }

  return (uint8_t)USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	08020000 	.word	0x08020000

0800c0a4 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b084      	sub	sp, #16
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	32b0      	adds	r2, #176	; 0xb0
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e03c      	b.n	800c140 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	32b0      	adds	r2, #176	; 0xb0
 800c0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d4:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2202      	movs	r2, #2
 800c0ea:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	33b0      	adds	r3, #176	; 0xb0
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	32b0      	adds	r2, #176	; 0xb0
 800c11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c120:	4618      	mov	r0, r3
 800c122:	f002 fdd5 	bl	800ecd0 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	32b0      	adds	r2, #176	; 0xb0
 800c130:	2100      	movs	r1, #0
 800c132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 800c13e:	2300      	movs	r3, #0
}
 800c140:	4618      	mov	r0, r3
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	32b0      	adds	r2, #176	; 0xb0
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	e0e8      	b.n	800c346 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d03e      	beq.n	800c1fe <USBD_DFU_Setup+0xb6>
 800c180:	2b20      	cmp	r3, #32
 800c182:	f040 80d8 	bne.w	800c336 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	785b      	ldrb	r3, [r3, #1]
 800c18a:	2b06      	cmp	r3, #6
 800c18c:	d82f      	bhi.n	800c1ee <USBD_DFU_Setup+0xa6>
 800c18e:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <USBD_DFU_Setup+0x4c>)
 800c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c194:	0800c1e5 	.word	0x0800c1e5
 800c198:	0800c1b1 	.word	0x0800c1b1
 800c19c:	0800c1bb 	.word	0x0800c1bb
 800c1a0:	0800c1c5 	.word	0x0800c1c5
 800c1a4:	0800c1cd 	.word	0x0800c1cd
 800c1a8:	0800c1d5 	.word	0x0800c1d5
 800c1ac:	0800c1dd 	.word	0x0800c1dd
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 faa0 	bl	800c6f8 <DFU_Download>
          break;
 800c1b8:	e020      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fb11 	bl	800c7e4 <DFU_Upload>
          break;
 800c1c2:	e01b      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fbf5 	bl	800c9b4 <DFU_GetStatus>
          break;
 800c1ca:	e017      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fcbd 	bl	800cb4c <DFU_ClearStatus>
          break;
 800c1d2:	e013      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fd11 	bl	800cbfc <DFU_GetState>
          break;
 800c1da:	e00f      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 fd29 	bl	800cc34 <DFU_Abort>
          break;
 800c1e2:	e00b      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 fa16 	bl	800c618 <DFU_Detach>
          break;
 800c1ec:	e006      	b.n	800c1fc <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f002 f80c 	bl	800e20e <USBD_CtlError>
          ret = USBD_FAIL;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800c1fa:	bf00      	nop
      }
      break;
 800c1fc:	e0a2      	b.n	800c344 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	2b0b      	cmp	r3, #11
 800c204:	f200 808c 	bhi.w	800c320 <USBD_DFU_Setup+0x1d8>
 800c208:	a201      	add	r2, pc, #4	; (adr r2, 800c210 <USBD_DFU_Setup+0xc8>)
 800c20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20e:	bf00      	nop
 800c210:	0800c241 	.word	0x0800c241
 800c214:	0800c32f 	.word	0x0800c32f
 800c218:	0800c321 	.word	0x0800c321
 800c21c:	0800c321 	.word	0x0800c321
 800c220:	0800c321 	.word	0x0800c321
 800c224:	0800c321 	.word	0x0800c321
 800c228:	0800c26b 	.word	0x0800c26b
 800c22c:	0800c321 	.word	0x0800c321
 800c230:	0800c321 	.word	0x0800c321
 800c234:	0800c321 	.word	0x0800c321
 800c238:	0800c2b3 	.word	0x0800c2b3
 800c23c:	0800c2df 	.word	0x0800c2df
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d107      	bne.n	800c25c <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c24c:	f107 0308 	add.w	r3, r7, #8
 800c250:	2202      	movs	r2, #2
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f002 f84b 	bl	800e2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c25a:	e06b      	b.n	800c334 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 ffd5 	bl	800e20e <USBD_CtlError>
            ret = USBD_FAIL;
 800c264:	2303      	movs	r3, #3
 800c266:	75fb      	strb	r3, [r7, #23]
          break;
 800c268:	e064      	b.n	800c334 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	b29b      	uxth	r3, r3
 800c272:	2b21      	cmp	r3, #33	; 0x21
 800c274:	d15d      	bne.n	800c332 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 fd87 	bl	800cd90 <USBD_DFU_GetDfuFuncDesc>
 800c282:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00c      	beq.n	800c2a4 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	88db      	ldrh	r3, [r3, #6]
 800c28e:	2b09      	cmp	r3, #9
 800c290:	bf28      	it	cs
 800c292:	2309      	movcs	r3, #9
 800c294:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 800c296:	897b      	ldrh	r3, [r7, #10]
 800c298:	461a      	mov	r2, r3
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f002 f827 	bl	800e2f0 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800c2a2:	e046      	b.n	800c332 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 ffb1 	bl	800e20e <USBD_CtlError>
              ret = USBD_FAIL;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	75fb      	strb	r3, [r7, #23]
          break;
 800c2b0:	e03f      	b.n	800c332 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d108      	bne.n	800c2d0 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f002 f811 	bl	800e2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2ce:	e031      	b.n	800c334 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f001 ff9b 	bl	800e20e <USBD_CtlError>
            ret = USBD_FAIL;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	75fb      	strb	r3, [r7, #23]
          break;
 800c2dc:	e02a      	b.n	800c334 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	885b      	ldrh	r3, [r3, #2]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d114      	bne.n	800c312 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d107      	bne.n	800c304 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	885b      	ldrh	r3, [r3, #2]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c302:	e017      	b.n	800c334 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 ff81 	bl	800e20e <USBD_CtlError>
              ret = USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
          break;
 800c310:	e010      	b.n	800c334 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f001 ff7a 	bl	800e20e <USBD_CtlError>
            ret = USBD_FAIL;
 800c31a:	2303      	movs	r3, #3
 800c31c:	75fb      	strb	r3, [r7, #23]
          break;
 800c31e:	e009      	b.n	800c334 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f001 ff73 	bl	800e20e <USBD_CtlError>
          ret = USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	75fb      	strb	r3, [r7, #23]
          break;
 800c32c:	e002      	b.n	800c334 <USBD_DFU_Setup+0x1ec>
          break;
 800c32e:	bf00      	nop
 800c330:	e008      	b.n	800c344 <USBD_DFU_Setup+0x1fc>
          break;
 800c332:	bf00      	nop
      }
      break;
 800c334:	e006      	b.n	800c344 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 ff68 	bl	800e20e <USBD_CtlError>
      ret = USBD_FAIL;
 800c33e:	2303      	movs	r3, #3
 800c340:	75fb      	strb	r3, [r7, #23]
      break;
 800c342:	bf00      	nop
  }

  return (uint8_t)ret;
 800c344:	7dfb      	ldrb	r3, [r7, #23]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop

0800c350 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	221b      	movs	r2, #27
 800c35c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 800c35e:	4b03      	ldr	r3, [pc, #12]	; (800c36c <USBD_DFU_GetCfgDesc+0x1c>)
}
 800c360:	4618      	mov	r0, r3
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	2400004c 	.word	0x2400004c

0800c370 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b088      	sub	sp, #32
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	32b0      	adds	r2, #176	; 0xb0
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	33b0      	adds	r3, #176	; 0xb0
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4413      	add	r3, r2
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e0ce      	b.n	800c558 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	f040 80bd 	bne.w	800c540 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d17c      	bne.n	800c4ca <USBD_DFU_EP0_TxReady+0x144>
    {
      if (hdfu->wlength == 1U)
 800c3d0:	69fb      	ldr	r3, [r7, #28]
 800c3d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	f000 8093 	beq.w	800c502 <USBD_DFU_EP0_TxReady+0x17c>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c3e2:	2b05      	cmp	r3, #5
 800c3e4:	d15e      	bne.n	800c4a4 <USBD_DFU_EP0_TxReady+0x11e>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b21      	cmp	r3, #33	; 0x21
 800c3ec:	d124      	bne.n	800c438 <USBD_DFU_EP0_TxReady+0xb2>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	789b      	ldrb	r3, [r3, #2]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	441a      	add	r2, r3
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	78db      	ldrb	r3, [r3, #3]
 800c418:	041b      	lsls	r3, r3, #16
 800c41a:	441a      	add	r2, r3
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	791b      	ldrb	r3, [r3, #4]
 800c42c:	061b      	lsls	r3, r3, #24
 800c42e:	441a      	add	r2, r3
 800c430:	69fb      	ldr	r3, [r7, #28]
 800c432:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800c436:	e064      	b.n	800c502 <USBD_DFU_EP0_TxReady+0x17c>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	2b41      	cmp	r3, #65	; 0x41
 800c43e:	d12f      	bne.n	800c4a0 <USBD_DFU_EP0_TxReady+0x11a>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	785b      	ldrb	r3, [r3, #1]
 800c444:	461a      	mov	r2, r3
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	789b      	ldrb	r3, [r3, #2]
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	441a      	add	r2, r3
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	78db      	ldrb	r3, [r3, #3]
 800c46a:	041b      	lsls	r3, r3, #16
 800c46c:	441a      	add	r2, r3
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	791b      	ldrb	r3, [r3, #4]
 800c47e:	061b      	lsls	r3, r3, #24
 800c480:	441a      	add	r2, r3
 800c482:	69fb      	ldr	r3, [r7, #28]
 800c484:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	69fa      	ldr	r2, [r7, #28]
 800c48e:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 800c492:	4610      	mov	r0, r2
 800c494:	4798      	blx	r3
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d032      	beq.n	800c502 <USBD_DFU_EP0_TxReady+0x17c>
          {
            return (uint8_t)USBD_FAIL;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e05b      	b.n	800c558 <USBD_DFU_EP0_TxReady+0x1d2>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	e059      	b.n	800c558 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 800c4bc:	f107 030c 	add.w	r3, r7, #12
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f001 fea3 	bl	800e20e <USBD_CtlError>
 800c4c8:	e01b      	b.n	800c502 <USBD_DFU_EP0_TxReady+0x17c>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d916      	bls.n	800c502 <USBD_DFU_EP0_TxReady+0x17c>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800c4d4:	69fb      	ldr	r3, [r7, #28]
 800c4d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c4da:	3b02      	subs	r3, #2
 800c4dc:	029a      	lsls	r2, r3, #10
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c4e4:	4413      	add	r3, r2
 800c4e6:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	69f8      	ldr	r0, [r7, #28]
 800c4ee:	6979      	ldr	r1, [r7, #20]
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800c4f6:	4798      	blx	r3
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <USBD_DFU_EP0_TxReady+0x17c>
        {
          return (uint8_t)USBD_FAIL;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e02a      	b.n	800c558 <USBD_DFU_EP0_TxReady+0x1d2>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 800c502:	69fb      	ldr	r3, [r7, #28]
 800c504:	2200      	movs	r2, #0
 800c506:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	2203      	movs	r2, #3
 800c516:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	2200      	movs	r2, #0
 800c526:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c53e:	e00a      	b.n	800c556 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c546:	2b07      	cmp	r3, #7
 800c548:	d103      	bne.n	800c552 <USBD_DFU_EP0_TxReady+0x1cc>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 fbc7 	bl	800ccde <DFU_Leave>
 800c550:	e001      	b.n	800c556 <USBD_DFU_EP0_TxReady+0x1d0>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 800c552:	2303      	movs	r3, #3
 800c554:	e000      	b.n	800c558 <USBD_DFU_EP0_TxReady+0x1d2>
  }

  return (uint8_t)USBD_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
	...

0800c578 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	220a      	movs	r2, #10
 800c584:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 800c586:	4b03      	ldr	r3, [pc, #12]	; (800c594 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 800c588:	4618      	mov	r0, r3
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	24000068 	.word	0x24000068

0800c598 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	607a      	str	r2, [r7, #4]
 800c5a4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	33b0      	adds	r3, #176	; 0xb0
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	4413      	add	r3, r2
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800c5b8:	7afb      	ldrb	r3, [r7, #11]
 800c5ba:	2b06      	cmp	r3, #6
 800c5bc:	d808      	bhi.n	800c5d0 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	4906      	ldr	r1, [pc, #24]	; (800c5e0 <USBD_DFU_GetUsrStringDesc+0x48>)
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f001 fe32 	bl	800e230 <USBD_GetString>
    return USBD_StrDesc;
 800c5cc:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <USBD_DFU_GetUsrStringDesc+0x48>)
 800c5ce:	e002      	b.n	800c5d6 <USBD_DFU_GetUsrStringDesc+0x3e>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    length = 0U;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	607b      	str	r3, [r7, #4]
    return NULL;
 800c5d4:	2300      	movs	r3, #0
  }
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3718      	adds	r7, #24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	24000574 	.word	0x24000574

0800c5e4 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e009      	b.n	800c60c <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	33b0      	adds	r3, #176	; 0xb0
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	32b0      	adds	r2, #176	; 0xb0
 800c62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c630:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fba9 	bl	800cd90 <USBD_DFU_GetDfuFuncDesc>
 800c63e:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d054      	beq.n	800c6f0 <DFU_Detach+0xd8>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d051      	beq.n	800c6f0 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c652:	2b02      	cmp	r3, #2
 800c654:	d013      	beq.n	800c67e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800c65c:	2b03      	cmp	r3, #3
 800c65e:	d00e      	beq.n	800c67e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800c666:	2b05      	cmp	r3, #5
 800c668:	d009      	beq.n	800c67e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800c670:	2b06      	cmp	r3, #6
 800c672:	d004      	beq.n	800c67e <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	d125      	bne.n	800c6ca <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2202      	movs	r2, #2
 800c682:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	789b      	ldrb	r3, [r3, #2]
 800c6ce:	f003 0308 	and.w	r3, r3, #8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d006      	beq.n	800c6e4 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fbfc 	bl	800ced4 <USBD_Stop>
    (void)USBD_Start(pdev);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fbed 	bl	800cebc <USBD_Start>
 800c6e2:	e006      	b.n	800c6f2 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	885b      	ldrh	r3, [r3, #2]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f5 fdad 	bl	8002248 <HAL_Delay>
 800c6ee:	e000      	b.n	800c6f2 <DFU_Detach+0xda>
    return;
 800c6f0:	bf00      	nop
  }
}
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	32b0      	adds	r2, #176	; 0xb0
 800c70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c710:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d061      	beq.n	800c7dc <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	88db      	ldrh	r3, [r3, #6]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d033      	beq.n	800c788 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c726:	2b02      	cmp	r3, #2
 800c728:	d004      	beq.n	800c734 <DFU_Download+0x3c>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c730:	2b05      	cmp	r3, #5
 800c732:	d124      	bne.n	800c77e <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	885b      	ldrh	r3, [r3, #2]
 800c738:	461a      	mov	r2, r3
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	88db      	ldrh	r3, [r3, #6]
 800c744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c748:	bf28      	it	cs
 800c74a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800c74e:	b29b      	uxth	r3, r3
 800c750:	461a      	mov	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2203      	movs	r2, #3
 800c75c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 800c76c:	68f9      	ldr	r1, [r7, #12]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c774:	461a      	mov	r2, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f001 fde6 	bl	800e348 <USBD_CtlPrepareRx>
 800c77c:	e02f      	b.n	800c7de <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f001 fd44 	bl	800e20e <USBD_CtlError>
 800c786:	e02a      	b.n	800c7de <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c78e:	2b05      	cmp	r3, #5
 800c790:	d004      	beq.n	800c79c <DFU_Download+0xa4>
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d11a      	bne.n	800c7d2 <DFU_Download+0xda>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2206      	movs	r2, #6
 800c7a8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c7d0:	e005      	b.n	800c7de <DFU_Download+0xe6>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 fd1a 	bl	800e20e <USBD_CtlError>
 800c7da:	e000      	b.n	800c7de <DFU_Download+0xe6>
    return;
 800c7dc:	bf00      	nop
    }
  }
}
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b086      	sub	sp, #24
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	32b0      	adds	r2, #176	; 0xb0
 800c7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fc:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	33b0      	adds	r3, #176	; 0xb0
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	4413      	add	r3, r2
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 80ca 	beq.w	800c9ac <DFU_Upload+0x1c8>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	88db      	ldrh	r3, [r3, #6]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 80ae 	beq.w	800c97e <DFU_Upload+0x19a>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c828:	2b02      	cmp	r3, #2
 800c82a:	d005      	beq.n	800c838 <DFU_Upload+0x54>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800c832:	2b09      	cmp	r3, #9
 800c834:	f040 8096 	bne.w	800c964 <DFU_Upload+0x180>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	461a      	mov	r2, r3
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	88db      	ldrh	r3, [r3, #6]
 800c848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84c:	bf28      	it	cs
 800c84e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800c852:	b29b      	uxth	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c862:	2b00      	cmp	r3, #0
 800c864:	d12c      	bne.n	800c8c0 <DFU_Upload+0xdc>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c86c:	2b03      	cmp	r3, #3
 800c86e:	d901      	bls.n	800c874 <DFU_Upload+0x90>
 800c870:	2202      	movs	r2, #2
 800c872:	e000      	b.n	800c876 <DFU_Upload+0x92>
 800c874:	2209      	movs	r2, #9
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2200      	movs	r2, #0
 800c880:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2221      	movs	r2, #33	; 0x21
 800c8aa:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	2241      	movs	r2, #65	; 0x41
 800c8b0:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6878      	ldr	r0, [r7, #4]
 800c8ba:	f001 fd19 	bl	800e2f0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800c8be:	e076      	b.n	800c9ae <DFU_Upload+0x1ca>
      }
      else if (hdfu->wblock_num > 1U)
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d931      	bls.n	800c92e <DFU_Upload+0x14a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2209      	movs	r2, #9
 800c8ce:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800c8fc:	3b02      	subs	r3, #2
 800c8fe:	029a      	lsls	r2, r3, #10
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800c906:	4413      	add	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	6979      	ldr	r1, [r7, #20]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800c918:	4798      	blx	r3
 800c91a:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800c922:	461a      	mov	r2, r3
 800c924:	68b9      	ldr	r1, [r7, #8]
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f001 fce2 	bl	800e2f0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800c92c:	e03f      	b.n	800c9ae <DFU_Upload+0x1ca>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	220f      	movs	r2, #15
 800c932:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2200      	movs	r2, #0
 800c942:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fc56 	bl	800e20e <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800c962:	e024      	b.n	800c9ae <DFU_Upload+0x1ca>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	2200      	movs	r2, #0
 800c970:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fc49 	bl	800e20e <USBD_CtlError>
 800c97c:	e017      	b.n	800c9ae <DFU_Upload+0x1ca>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2200      	movs	r2, #0
 800c98a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800c9aa:	e000      	b.n	800c9ae <DFU_Upload+0x1ca>
    return;
 800c9ac:	bf00      	nop
  }
}
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	32b0      	adds	r2, #176	; 0xb0
 800c9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9ca:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	33b0      	adds	r3, #176	; 0xb0
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 f9d3 	bl	800cd90 <USBD_DFU_GetDfuFuncDesc>
 800c9ea:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 80a8 	beq.w	800cb44 <DFU_GetStatus+0x190>
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 80a4 	beq.w	800cb44 <DFU_GetStatus+0x190>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	f000 80a0 	beq.w	800cb44 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d002      	beq.n	800ca14 <DFU_GetStatus+0x60>
 800ca0e:	2b06      	cmp	r3, #6
 800ca10:	d051      	beq.n	800cab6 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 800ca12:	e08e      	b.n	800cb32 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d034      	beq.n	800ca88 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2204      	movs	r2, #4
 800ca22:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d10e      	bne.n	800ca72 <DFU_GetStatus+0xbe>
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b41      	cmp	r3, #65	; 0x41
 800ca5a:	d10a      	bne.n	800ca72 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	699b      	ldr	r3, [r3, #24]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	4798      	blx	r3
      break;
 800ca70:	e05f      	b.n	800cb32 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	699b      	ldr	r3, [r3, #24]
 800ca76:	697a      	ldr	r2, [r7, #20]
 800ca78:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800ca82:	2101      	movs	r1, #1
 800ca84:	4798      	blx	r3
      break;
 800ca86:	e054      	b.n	800cb32 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2205      	movs	r2, #5
 800ca8c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800cab4:	e03d      	b.n	800cb32 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d116      	bne.n	800caee <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2207      	movs	r2, #7
 800cac4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800caec:	e020      	b.n	800cb30 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d11b      	bne.n	800cb30 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	789b      	ldrb	r3, [r3, #2]
 800cafc:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d015      	beq.n	800cb30 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2202      	movs	r2, #2
 800cb08:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 800cb30:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800cb38:	2206      	movs	r2, #6
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 fbd7 	bl	800e2f0 <USBD_CtlSendData>
 800cb42:	e000      	b.n	800cb46 <DFU_GetStatus+0x192>
    return;
 800cb44:	bf00      	nop
}
 800cb46:	3718      	adds	r7, #24
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	32b0      	adds	r2, #176	; 0xb0
 800cb5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb62:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d042      	beq.n	800cbf0 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cb70:	2b0a      	cmp	r3, #10
 800cb72:	d11e      	bne.n	800cbb2 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2202      	movs	r2, #2
 800cb78:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800cbb0:	e01f      	b.n	800cbf2 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	220a      	movs	r2, #10
 800cbb6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	220e      	movs	r2, #14
 800cbbe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800cbee:	e000      	b.n	800cbf2 <DFU_ClearStatus+0xa6>
    return;
 800cbf0:	bf00      	nop
  }
}
 800cbf2:	3714      	adds	r7, #20
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	32b0      	adds	r2, #176	; 0xb0
 800cc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc12:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d008      	beq.n	800cc2c <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800cc20:	2201      	movs	r2, #1
 800cc22:	4619      	mov	r1, r3
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f001 fb63 	bl	800e2f0 <USBD_CtlSendData>
 800cc2a:	e000      	b.n	800cc2e <DFU_GetState+0x32>
    return;
 800cc2c:	bf00      	nop
}
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	32b0      	adds	r2, #176	; 0xb0
 800cc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc4a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d03f      	beq.n	800ccd2 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800cc58:	2b02      	cmp	r3, #2
 800cc5a:	d013      	beq.n	800cc84 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d00e      	beq.n	800cc84 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800cc6c:	2b05      	cmp	r3, #5
 800cc6e:	d009      	beq.n	800cc84 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800cc76:	2b06      	cmp	r3, #6
 800cc78:	d004      	beq.n	800cc84 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800cc80:	2b09      	cmp	r3, #9
 800cc82:	d127      	bne.n	800ccd4 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800ccd0:	e000      	b.n	800ccd4 <DFU_Abort+0xa0>
    return;
 800ccd2:	bf00      	nop
  }
}
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	32b0      	adds	r2, #176	; 0xb0
 800ccf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf4:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f847 	bl	800cd90 <USBD_DFU_GetDfuFuncDesc>
 800cd02:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d03e      	beq.n	800cd88 <DFU_Leave+0xaa>
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d03b      	beq.n	800cd88 <DFU_Leave+0xaa>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	789b      	ldrb	r3, [r3, #2]
 800cd1c:	f003 0304 	and.w	r3, r3, #4
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d016      	beq.n	800cd52 <DFU_Leave+0x74>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2206      	movs	r2, #6
 800cd28:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800cd50:	e01b      	b.n	800cd8a <DFU_Leave+0xac>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2208      	movs	r2, #8
 800cd56:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f8a8 	bl	800ced4 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800cd84:	f7ff f908 	bl	800bf98 <__NVIC_SystemReset>
    return;
 800cd88:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b086      	sub	sp, #24
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 800cda0:	2300      	movs	r3, #0
 800cda2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	885b      	ldrh	r3, [r3, #2]
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	b29b      	uxth	r3, r3
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d918      	bls.n	800cde6 <USBD_DFU_GetDfuFuncDesc+0x56>
  {
    ptr = desc->bLength;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cdbc:	e00d      	b.n	800cdda <USBD_DFU_GetDfuFuncDesc+0x4a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cdbe:	f107 030a 	add.w	r3, r7, #10
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6978      	ldr	r0, [r7, #20]
 800cdc6:	f000 fbfd 	bl	800d5c4 <USBD_GetNextDesc>
 800cdca:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	785b      	ldrb	r3, [r3, #1]
 800cdd0:	2b21      	cmp	r3, #33	; 0x21
 800cdd2:	d102      	bne.n	800cdda <USBD_DFU_GetDfuFuncDesc+0x4a>
      {
        pDfuDesc = (uint8_t *)pdesc;
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	613b      	str	r3, [r7, #16]
        break;
 800cdd8:	e005      	b.n	800cde6 <USBD_DFU_GetDfuFuncDesc+0x56>
    while (ptr < desc->wTotalLength)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	885b      	ldrh	r3, [r3, #2]
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	897b      	ldrh	r3, [r7, #10]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d8eb      	bhi.n	800cdbe <USBD_DFU_GetDfuFuncDesc+0x2e>
      }
    }
  }
  return pDfuDesc;
 800cde6:	693b      	ldr	r3, [r7, #16]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e01f      	b.n	800ce48 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d003      	beq.n	800ce2e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	68ba      	ldr	r2, [r7, #8]
 800ce2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	79fa      	ldrb	r2, [r7, #7]
 800ce3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f001 fdbf 	bl	800e9c0 <USBD_LL_Init>
 800ce42:	4603      	mov	r3, r0
 800ce44:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d101      	bne.n	800ce68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e025      	b.n	800ceb4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	32ae      	adds	r2, #174	; 0xae
 800ce7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d00f      	beq.n	800cea4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	32ae      	adds	r2, #174	; 0xae
 800ce8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce94:	f107 020e 	add.w	r2, r7, #14
 800ce98:	4610      	mov	r0, r2
 800ce9a:	4798      	blx	r3
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f001 fdcd 	bl	800ea64 <USBD_LL_Start>
 800ceca:	4603      	mov	r3, r0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f001 fddc 	bl	800ea9a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d009      	beq.n	800cf00 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	6852      	ldr	r2, [r2, #4]
 800cef8:	b2d2      	uxtb	r2, r2
 800cefa:	4611      	mov	r1, r2
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cf0a:	b480      	push	{r7}
 800cf0c:	b083      	sub	sp, #12
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf12:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d009      	beq.n	800cf4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	78fa      	ldrb	r2, [r7, #3]
 800cf44:	4611      	mov	r1, r2
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	78fa      	ldrb	r2, [r7, #3]
 800cf72:	4611      	mov	r1, r2
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	4798      	blx	r3
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f001 f8fb 	bl	800e19a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cfc0:	f003 031f 	and.w	r3, r3, #31
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d01a      	beq.n	800cffe <USBD_LL_SetupStage+0x72>
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d822      	bhi.n	800d012 <USBD_LL_SetupStage+0x86>
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <USBD_LL_SetupStage+0x4a>
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d00a      	beq.n	800cfea <USBD_LL_SetupStage+0x5e>
 800cfd4:	e01d      	b.n	800d012 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fb2c 	bl	800d63c <USBD_StdDevReq>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
      break;
 800cfe8:	e020      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fb94 	bl	800d720 <USBD_StdItfReq>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
      break;
 800cffc:	e016      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fbf6 	bl	800d7f8 <USBD_StdEPReq>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]
      break;
 800d010:	e00c      	b.n	800d02c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d018:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f001 fd7b 	bl	800eb1c <USBD_LL_StallEP>
 800d026:	4603      	mov	r3, r0
 800d028:	73fb      	strb	r3, [r7, #15]
      break;
 800d02a:	bf00      	nop
  }

  return ret;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}

0800d036 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b086      	sub	sp, #24
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	60f8      	str	r0, [r7, #12]
 800d03e:	460b      	mov	r3, r1
 800d040:	607a      	str	r2, [r7, #4]
 800d042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d16e      	bne.n	800d12c <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d054:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	f040 8098 	bne.w	800d192 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	689a      	ldr	r2, [r3, #8]
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d913      	bls.n	800d096 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	689a      	ldr	r2, [r3, #8]
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	1ad2      	subs	r2, r2, r3
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	4293      	cmp	r3, r2
 800d086:	bf28      	it	cs
 800d088:	4613      	movcs	r3, r2
 800d08a:	461a      	mov	r2, r3
 800d08c:	6879      	ldr	r1, [r7, #4]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f001 f977 	bl	800e382 <USBD_CtlContinueRx>
 800d094:	e07d      	b.n	800d192 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d09c:	f003 031f 	and.w	r3, r3, #31
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d014      	beq.n	800d0ce <USBD_LL_DataOutStage+0x98>
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d81d      	bhi.n	800d0e4 <USBD_LL_DataOutStage+0xae>
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d002      	beq.n	800d0b2 <USBD_LL_DataOutStage+0x7c>
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d003      	beq.n	800d0b8 <USBD_LL_DataOutStage+0x82>
 800d0b0:	e018      	b.n	800d0e4 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75bb      	strb	r3, [r7, #22]
            break;
 800d0b6:	e018      	b.n	800d0ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 fa64 	bl	800d590 <USBD_CoreFindIF>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d0cc:	e00d      	b.n	800d0ea <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 fa66 	bl	800d5aa <USBD_CoreFindEP>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	75bb      	strb	r3, [r7, #22]
            break;
 800d0e2:	e002      	b.n	800d0ea <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	75bb      	strb	r3, [r7, #22]
            break;
 800d0e8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d0ea:	7dbb      	ldrb	r3, [r7, #22]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d119      	bne.n	800d124 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b03      	cmp	r3, #3
 800d0fa:	d113      	bne.n	800d124 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d0fc:	7dba      	ldrb	r2, [r7, #22]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	32ae      	adds	r2, #174	; 0xae
 800d102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d10c:	7dba      	ldrb	r2, [r7, #22]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d114:	7dba      	ldrb	r2, [r7, #22]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	32ae      	adds	r2, #174	; 0xae
 800d11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f001 f93d 	bl	800e3a4 <USBD_CtlSendStatus>
 800d12a:	e032      	b.n	800d192 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d12c:	7afb      	ldrb	r3, [r7, #11]
 800d12e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d132:	b2db      	uxtb	r3, r3
 800d134:	4619      	mov	r1, r3
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f000 fa37 	bl	800d5aa <USBD_CoreFindEP>
 800d13c:	4603      	mov	r3, r0
 800d13e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d140:	7dbb      	ldrb	r3, [r7, #22]
 800d142:	2bff      	cmp	r3, #255	; 0xff
 800d144:	d025      	beq.n	800d192 <USBD_LL_DataOutStage+0x15c>
 800d146:	7dbb      	ldrb	r3, [r7, #22]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d122      	bne.n	800d192 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b03      	cmp	r3, #3
 800d156:	d117      	bne.n	800d188 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d158:	7dba      	ldrb	r2, [r7, #22]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	32ae      	adds	r2, #174	; 0xae
 800d15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d162:	699b      	ldr	r3, [r3, #24]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00f      	beq.n	800d188 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d168:	7dba      	ldrb	r2, [r7, #22]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d170:	7dba      	ldrb	r2, [r7, #22]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	32ae      	adds	r2, #174	; 0xae
 800d176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d17a:	699b      	ldr	r3, [r3, #24]
 800d17c:	7afa      	ldrb	r2, [r7, #11]
 800d17e:	4611      	mov	r1, r2
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	4798      	blx	r3
 800d184:	4603      	mov	r3, r0
 800d186:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d188:	7dfb      	ldrb	r3, [r7, #23]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d001      	beq.n	800d192 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	e000      	b.n	800d194 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d192:	2300      	movs	r3, #0
}
 800d194:	4618      	mov	r0, r3
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d1aa:	7afb      	ldrb	r3, [r7, #11]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d16f      	bne.n	800d290 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	3314      	adds	r3, #20
 800d1b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d15a      	bne.n	800d276 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	689a      	ldr	r2, [r3, #8]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d914      	bls.n	800d1f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	689a      	ldr	r2, [r3, #8]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	1ad2      	subs	r2, r2, r3
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	461a      	mov	r2, r3
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f001 f89f 	bl	800e326 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f001 fd3e 	bl	800ec70 <USBD_LL_PrepareReceive>
 800d1f4:	e03f      	b.n	800d276 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d11c      	bne.n	800d23c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d316      	bcc.n	800d23c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d218:	429a      	cmp	r2, r3
 800d21a:	d20f      	bcs.n	800d23c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f001 f880 	bl	800e326 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d22e:	2300      	movs	r3, #0
 800d230:	2200      	movs	r2, #0
 800d232:	2100      	movs	r1, #0
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f001 fd1b 	bl	800ec70 <USBD_LL_PrepareReceive>
 800d23a:	e01c      	b.n	800d276 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b03      	cmp	r3, #3
 800d246:	d10f      	bne.n	800d268 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d009      	beq.n	800d268 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	68f8      	ldr	r0, [r7, #12]
 800d266:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d268:	2180      	movs	r1, #128	; 0x80
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f001 fc56 	bl	800eb1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f001 f8aa 	bl	800e3ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d03a      	beq.n	800d2f6 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff fe42 	bl	800cf0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d28e:	e032      	b.n	800d2f6 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d290:	7afb      	ldrb	r3, [r7, #11]
 800d292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d296:	b2db      	uxtb	r3, r3
 800d298:	4619      	mov	r1, r3
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 f985 	bl	800d5aa <USBD_CoreFindEP>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
 800d2a6:	2bff      	cmp	r3, #255	; 0xff
 800d2a8:	d025      	beq.n	800d2f6 <USBD_LL_DataInStage+0x15a>
 800d2aa:	7dfb      	ldrb	r3, [r7, #23]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d122      	bne.n	800d2f6 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d11c      	bne.n	800d2f6 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d2bc:	7dfa      	ldrb	r2, [r7, #23]
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	32ae      	adds	r2, #174	; 0xae
 800d2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c6:	695b      	ldr	r3, [r3, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d014      	beq.n	800d2f6 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d2cc:	7dfa      	ldrb	r2, [r7, #23]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d2d4:	7dfa      	ldrb	r2, [r7, #23]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	32ae      	adds	r2, #174	; 0xae
 800d2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	7afa      	ldrb	r2, [r7, #11]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	4798      	blx	r3
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d2ec:	7dbb      	ldrb	r3, [r7, #22]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d001      	beq.n	800d2f6 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d2f2:	7dbb      	ldrb	r3, [r7, #22]
 800d2f4:	e000      	b.n	800d2f8 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3718      	adds	r7, #24
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2200      	movs	r2, #0
 800d320:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2200      	movs	r2, #0
 800d326:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d014      	beq.n	800d366 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00e      	beq.n	800d366 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	6852      	ldr	r2, [r2, #4]
 800d354:	b2d2      	uxtb	r2, r2
 800d356:	4611      	mov	r1, r2
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	4798      	blx	r3
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d362:	2303      	movs	r3, #3
 800d364:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d366:	2340      	movs	r3, #64	; 0x40
 800d368:	2200      	movs	r2, #0
 800d36a:	2100      	movs	r1, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 fbaf 	bl	800ead0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2201      	movs	r2, #1
 800d376:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2240      	movs	r2, #64	; 0x40
 800d37e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d382:	2340      	movs	r3, #64	; 0x40
 800d384:	2200      	movs	r2, #0
 800d386:	2180      	movs	r1, #128	; 0x80
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f001 fba1 	bl	800ead0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2201      	movs	r2, #1
 800d392:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2240      	movs	r2, #64	; 0x40
 800d398:	621a      	str	r2, [r3, #32]

  return ret;
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	78fa      	ldrb	r2, [r7, #3]
 800d3b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d3b6:	2300      	movs	r3, #0
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	d006      	beq.n	800d3e6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3de:	b2da      	uxtb	r2, r3
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2204      	movs	r2, #4
 800d3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40a:	b2db      	uxtb	r3, r3
 800d40c:	2b04      	cmp	r3, #4
 800d40e:	d106      	bne.n	800d41e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d416:	b2da      	uxtb	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b03      	cmp	r3, #3
 800d43e:	d110      	bne.n	800d462 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00b      	beq.n	800d462 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d462:	2300      	movs	r3, #0
}
 800d464:	4618      	mov	r0, r3
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32ae      	adds	r2, #174	; 0xae
 800d482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e01c      	b.n	800d4c8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b03      	cmp	r3, #3
 800d498:	d115      	bne.n	800d4c6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	32ae      	adds	r2, #174	; 0xae
 800d4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a8:	6a1b      	ldr	r3, [r3, #32]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d00b      	beq.n	800d4c6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	32ae      	adds	r2, #174	; 0xae
 800d4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	78fa      	ldrb	r2, [r7, #3]
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	460b      	mov	r3, r1
 800d4da:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	32ae      	adds	r2, #174	; 0xae
 800d4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d101      	bne.n	800d4f2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	e01c      	b.n	800d52c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b03      	cmp	r3, #3
 800d4fc:	d115      	bne.n	800d52a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	32ae      	adds	r2, #174	; 0xae
 800d508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d00b      	beq.n	800d52a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	32ae      	adds	r2, #174	; 0xae
 800d51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d522:	78fa      	ldrb	r2, [r7, #3]
 800d524:	4611      	mov	r1, r2
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00e      	beq.n	800d586 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6852      	ldr	r2, [r2, #4]
 800d574:	b2d2      	uxtb	r2, r2
 800d576:	4611      	mov	r1, r2
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	4798      	blx	r3
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d582:	2303      	movs	r3, #3
 800d584:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d586:	7bfb      	ldrb	r3, [r7, #15]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d590:	b480      	push	{r7}
 800d592:	b083      	sub	sp, #12
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	460b      	mov	r3, r1
 800d59a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d59c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d5b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	881a      	ldrh	r2, [r3, #0]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4413      	add	r3, r2
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b087      	sub	sp, #28
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	3301      	adds	r3, #1
 800d614:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d61c:	8a3b      	ldrh	r3, [r7, #16]
 800d61e:	021b      	lsls	r3, r3, #8
 800d620:	b21a      	sxth	r2, r3
 800d622:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d626:	4313      	orrs	r3, r2
 800d628:	b21b      	sxth	r3, r3
 800d62a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d62c:	89fb      	ldrh	r3, [r7, #14]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	371c      	adds	r7, #28
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
	...

0800d63c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d646:	2300      	movs	r3, #0
 800d648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d652:	2b40      	cmp	r3, #64	; 0x40
 800d654:	d005      	beq.n	800d662 <USBD_StdDevReq+0x26>
 800d656:	2b40      	cmp	r3, #64	; 0x40
 800d658:	d857      	bhi.n	800d70a <USBD_StdDevReq+0xce>
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00f      	beq.n	800d67e <USBD_StdDevReq+0x42>
 800d65e:	2b20      	cmp	r3, #32
 800d660:	d153      	bne.n	800d70a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	32ae      	adds	r2, #174	; 0xae
 800d66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	4798      	blx	r3
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
      break;
 800d67c:	e04a      	b.n	800d714 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	785b      	ldrb	r3, [r3, #1]
 800d682:	2b09      	cmp	r3, #9
 800d684:	d83b      	bhi.n	800d6fe <USBD_StdDevReq+0xc2>
 800d686:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <USBD_StdDevReq+0x50>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d6e1 	.word	0x0800d6e1
 800d690:	0800d6f5 	.word	0x0800d6f5
 800d694:	0800d6ff 	.word	0x0800d6ff
 800d698:	0800d6eb 	.word	0x0800d6eb
 800d69c:	0800d6ff 	.word	0x0800d6ff
 800d6a0:	0800d6bf 	.word	0x0800d6bf
 800d6a4:	0800d6b5 	.word	0x0800d6b5
 800d6a8:	0800d6ff 	.word	0x0800d6ff
 800d6ac:	0800d6d7 	.word	0x0800d6d7
 800d6b0:	0800d6c9 	.word	0x0800d6c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa3c 	bl	800db34 <USBD_GetDescriptor>
          break;
 800d6bc:	e024      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d6be:	6839      	ldr	r1, [r7, #0]
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fbc7 	bl	800de54 <USBD_SetAddress>
          break;
 800d6c6:	e01f      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fc06 	bl	800dedc <USBD_SetConfig>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73fb      	strb	r3, [r7, #15]
          break;
 800d6d4:	e018      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 fca9 	bl	800e030 <USBD_GetConfig>
          break;
 800d6de:	e013      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 fcda 	bl	800e09c <USBD_GetStatus>
          break;
 800d6e8:	e00e      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fd09 	bl	800e104 <USBD_SetFeature>
          break;
 800d6f2:	e009      	b.n	800d708 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d6f4:	6839      	ldr	r1, [r7, #0]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fd2d 	bl	800e156 <USBD_ClrFeature>
          break;
 800d6fc:	e004      	b.n	800d708 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fd84 	bl	800e20e <USBD_CtlError>
          break;
 800d706:	bf00      	nop
      }
      break;
 800d708:	e004      	b.n	800d714 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fd7e 	bl	800e20e <USBD_CtlError>
      break;
 800d712:	bf00      	nop
  }

  return ret;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop

0800d720 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d736:	2b40      	cmp	r3, #64	; 0x40
 800d738:	d005      	beq.n	800d746 <USBD_StdItfReq+0x26>
 800d73a:	2b40      	cmp	r3, #64	; 0x40
 800d73c:	d852      	bhi.n	800d7e4 <USBD_StdItfReq+0xc4>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <USBD_StdItfReq+0x26>
 800d742:	2b20      	cmp	r3, #32
 800d744:	d14e      	bne.n	800d7e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d74c:	b2db      	uxtb	r3, r3
 800d74e:	3b01      	subs	r3, #1
 800d750:	2b02      	cmp	r3, #2
 800d752:	d840      	bhi.n	800d7d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	889b      	ldrh	r3, [r3, #4]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d836      	bhi.n	800d7cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	889b      	ldrh	r3, [r3, #4]
 800d762:	b2db      	uxtb	r3, r3
 800d764:	4619      	mov	r1, r3
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff ff12 	bl	800d590 <USBD_CoreFindIF>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	2bff      	cmp	r3, #255	; 0xff
 800d774:	d01d      	beq.n	800d7b2 <USBD_StdItfReq+0x92>
 800d776:	7bbb      	ldrb	r3, [r7, #14]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d11a      	bne.n	800d7b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d77c:	7bba      	ldrb	r2, [r7, #14]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	32ae      	adds	r2, #174	; 0xae
 800d782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d786:	689b      	ldr	r3, [r3, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00f      	beq.n	800d7ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d78c:	7bba      	ldrb	r2, [r7, #14]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d794:	7bba      	ldrb	r2, [r7, #14]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	32ae      	adds	r2, #174	; 0xae
 800d79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	4798      	blx	r3
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7aa:	e004      	b.n	800d7b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d7ac:	2303      	movs	r3, #3
 800d7ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d7b0:	e001      	b.n	800d7b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	88db      	ldrh	r3, [r3, #6]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d110      	bne.n	800d7e0 <USBD_StdItfReq+0xc0>
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10d      	bne.n	800d7e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fded 	bl	800e3a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d7ca:	e009      	b.n	800d7e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d7cc:	6839      	ldr	r1, [r7, #0]
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 fd1d 	bl	800e20e <USBD_CtlError>
          break;
 800d7d4:	e004      	b.n	800d7e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fd18 	bl	800e20e <USBD_CtlError>
          break;
 800d7de:	e000      	b.n	800d7e2 <USBD_StdItfReq+0xc2>
          break;
 800d7e0:	bf00      	nop
      }
      break;
 800d7e2:	e004      	b.n	800d7ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 fd11 	bl	800e20e <USBD_CtlError>
      break;
 800d7ec:	bf00      	nop
  }

  return ret;
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	889b      	ldrh	r3, [r3, #4]
 800d80a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d814:	2b40      	cmp	r3, #64	; 0x40
 800d816:	d007      	beq.n	800d828 <USBD_StdEPReq+0x30>
 800d818:	2b40      	cmp	r3, #64	; 0x40
 800d81a:	f200 817f 	bhi.w	800db1c <USBD_StdEPReq+0x324>
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d02a      	beq.n	800d878 <USBD_StdEPReq+0x80>
 800d822:	2b20      	cmp	r3, #32
 800d824:	f040 817a 	bne.w	800db1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff febc 	bl	800d5aa <USBD_CoreFindEP>
 800d832:	4603      	mov	r3, r0
 800d834:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d836:	7b7b      	ldrb	r3, [r7, #13]
 800d838:	2bff      	cmp	r3, #255	; 0xff
 800d83a:	f000 8174 	beq.w	800db26 <USBD_StdEPReq+0x32e>
 800d83e:	7b7b      	ldrb	r3, [r7, #13]
 800d840:	2b00      	cmp	r3, #0
 800d842:	f040 8170 	bne.w	800db26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d846:	7b7a      	ldrb	r2, [r7, #13]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d84e:	7b7a      	ldrb	r2, [r7, #13]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	32ae      	adds	r2, #174	; 0xae
 800d854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d858:	689b      	ldr	r3, [r3, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 8163 	beq.w	800db26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d860:	7b7a      	ldrb	r2, [r7, #13]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	32ae      	adds	r2, #174	; 0xae
 800d866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	4798      	blx	r3
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d876:	e156      	b.n	800db26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	2b03      	cmp	r3, #3
 800d87e:	d008      	beq.n	800d892 <USBD_StdEPReq+0x9a>
 800d880:	2b03      	cmp	r3, #3
 800d882:	f300 8145 	bgt.w	800db10 <USBD_StdEPReq+0x318>
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 809b 	beq.w	800d9c2 <USBD_StdEPReq+0x1ca>
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d03c      	beq.n	800d90a <USBD_StdEPReq+0x112>
 800d890:	e13e      	b.n	800db10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d002      	beq.n	800d8a4 <USBD_StdEPReq+0xac>
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d016      	beq.n	800d8d0 <USBD_StdEPReq+0xd8>
 800d8a2:	e02c      	b.n	800d8fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8a4:	7bbb      	ldrb	r3, [r7, #14]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00d      	beq.n	800d8c6 <USBD_StdEPReq+0xce>
 800d8aa:	7bbb      	ldrb	r3, [r7, #14]
 800d8ac:	2b80      	cmp	r3, #128	; 0x80
 800d8ae:	d00a      	beq.n	800d8c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f001 f931 	bl	800eb1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8ba:	2180      	movs	r1, #128	; 0x80
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f001 f92d 	bl	800eb1c <USBD_LL_StallEP>
 800d8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8c4:	e020      	b.n	800d908 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f000 fca0 	bl	800e20e <USBD_CtlError>
              break;
 800d8ce:	e01b      	b.n	800d908 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	885b      	ldrh	r3, [r3, #2]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10e      	bne.n	800d8f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00b      	beq.n	800d8f6 <USBD_StdEPReq+0xfe>
 800d8de:	7bbb      	ldrb	r3, [r7, #14]
 800d8e0:	2b80      	cmp	r3, #128	; 0x80
 800d8e2:	d008      	beq.n	800d8f6 <USBD_StdEPReq+0xfe>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	88db      	ldrh	r3, [r3, #6]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d104      	bne.n	800d8f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8ec:	7bbb      	ldrb	r3, [r7, #14]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f001 f913 	bl	800eb1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 fd54 	bl	800e3a4 <USBD_CtlSendStatus>

              break;
 800d8fc:	e004      	b.n	800d908 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fc84 	bl	800e20e <USBD_CtlError>
              break;
 800d906:	bf00      	nop
          }
          break;
 800d908:	e107      	b.n	800db1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b02      	cmp	r3, #2
 800d914:	d002      	beq.n	800d91c <USBD_StdEPReq+0x124>
 800d916:	2b03      	cmp	r3, #3
 800d918:	d016      	beq.n	800d948 <USBD_StdEPReq+0x150>
 800d91a:	e04b      	b.n	800d9b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00d      	beq.n	800d93e <USBD_StdEPReq+0x146>
 800d922:	7bbb      	ldrb	r3, [r7, #14]
 800d924:	2b80      	cmp	r3, #128	; 0x80
 800d926:	d00a      	beq.n	800d93e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d928:	7bbb      	ldrb	r3, [r7, #14]
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f001 f8f5 	bl	800eb1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d932:	2180      	movs	r1, #128	; 0x80
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f001 f8f1 	bl	800eb1c <USBD_LL_StallEP>
 800d93a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d93c:	e040      	b.n	800d9c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d93e:	6839      	ldr	r1, [r7, #0]
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fc64 	bl	800e20e <USBD_CtlError>
              break;
 800d946:	e03b      	b.n	800d9c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	885b      	ldrh	r3, [r3, #2]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d136      	bne.n	800d9be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d950:	7bbb      	ldrb	r3, [r7, #14]
 800d952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d956:	2b00      	cmp	r3, #0
 800d958:	d004      	beq.n	800d964 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 f8fb 	bl	800eb5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 fd1d 	bl	800e3a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d96a:	7bbb      	ldrb	r3, [r7, #14]
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fe1b 	bl	800d5aa <USBD_CoreFindEP>
 800d974:	4603      	mov	r3, r0
 800d976:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d978:	7b7b      	ldrb	r3, [r7, #13]
 800d97a:	2bff      	cmp	r3, #255	; 0xff
 800d97c:	d01f      	beq.n	800d9be <USBD_StdEPReq+0x1c6>
 800d97e:	7b7b      	ldrb	r3, [r7, #13]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d11c      	bne.n	800d9be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d984:	7b7a      	ldrb	r2, [r7, #13]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d98c:	7b7a      	ldrb	r2, [r7, #13]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	32ae      	adds	r2, #174	; 0xae
 800d992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d010      	beq.n	800d9be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d99c:	7b7a      	ldrb	r2, [r7, #13]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	32ae      	adds	r2, #174	; 0xae
 800d9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	6839      	ldr	r1, [r7, #0]
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	4798      	blx	r3
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d9b2:	e004      	b.n	800d9be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d9b4:	6839      	ldr	r1, [r7, #0]
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f000 fc29 	bl	800e20e <USBD_CtlError>
              break;
 800d9bc:	e000      	b.n	800d9c0 <USBD_StdEPReq+0x1c8>
              break;
 800d9be:	bf00      	nop
          }
          break;
 800d9c0:	e0ab      	b.n	800db1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	2b02      	cmp	r3, #2
 800d9cc:	d002      	beq.n	800d9d4 <USBD_StdEPReq+0x1dc>
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d032      	beq.n	800da38 <USBD_StdEPReq+0x240>
 800d9d2:	e097      	b.n	800db04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9d4:	7bbb      	ldrb	r3, [r7, #14]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d007      	beq.n	800d9ea <USBD_StdEPReq+0x1f2>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	2b80      	cmp	r3, #128	; 0x80
 800d9de:	d004      	beq.n	800d9ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fc13 	bl	800e20e <USBD_CtlError>
                break;
 800d9e8:	e091      	b.n	800db0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	da0b      	bge.n	800da0a <USBD_StdEPReq+0x212>
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	3310      	adds	r3, #16
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	4413      	add	r3, r2
 800da06:	3304      	adds	r3, #4
 800da08:	e00b      	b.n	800da22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da10:	4613      	mov	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	4413      	add	r3, r2
 800da20:	3304      	adds	r3, #4
 800da22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2200      	movs	r2, #0
 800da28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2202      	movs	r2, #2
 800da2e:	4619      	mov	r1, r3
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fc5d 	bl	800e2f0 <USBD_CtlSendData>
              break;
 800da36:	e06a      	b.n	800db0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800da38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	da11      	bge.n	800da64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800da40:	7bbb      	ldrb	r3, [r7, #14]
 800da42:	f003 020f 	and.w	r2, r3, #15
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	4613      	mov	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	4413      	add	r3, r2
 800da4e:	009b      	lsls	r3, r3, #2
 800da50:	440b      	add	r3, r1
 800da52:	3324      	adds	r3, #36	; 0x24
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d117      	bne.n	800da8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 fbd6 	bl	800e20e <USBD_CtlError>
                  break;
 800da62:	e054      	b.n	800db0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800da64:	7bbb      	ldrb	r3, [r7, #14]
 800da66:	f003 020f 	and.w	r2, r3, #15
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	4613      	mov	r3, r2
 800da6e:	009b      	lsls	r3, r3, #2
 800da70:	4413      	add	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	440b      	add	r3, r1
 800da76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800da7a:	881b      	ldrh	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d104      	bne.n	800da8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fbc3 	bl	800e20e <USBD_CtlError>
                  break;
 800da88:	e041      	b.n	800db0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	da0b      	bge.n	800daaa <USBD_StdEPReq+0x2b2>
 800da92:	7bbb      	ldrb	r3, [r7, #14]
 800da94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da98:	4613      	mov	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	3310      	adds	r3, #16
 800daa2:	687a      	ldr	r2, [r7, #4]
 800daa4:	4413      	add	r3, r2
 800daa6:	3304      	adds	r3, #4
 800daa8:	e00b      	b.n	800dac2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800daaa:	7bbb      	ldrb	r3, [r7, #14]
 800daac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dab0:	4613      	mov	r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	4413      	add	r3, r2
 800dab6:	009b      	lsls	r3, r3, #2
 800dab8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	4413      	add	r3, r2
 800dac0:	3304      	adds	r3, #4
 800dac2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dac4:	7bbb      	ldrb	r3, [r7, #14]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d002      	beq.n	800dad0 <USBD_StdEPReq+0x2d8>
 800daca:	7bbb      	ldrb	r3, [r7, #14]
 800dacc:	2b80      	cmp	r3, #128	; 0x80
 800dace:	d103      	bne.n	800dad8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	e00e      	b.n	800daf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	4619      	mov	r1, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 f85b 	bl	800eb98 <USBD_LL_IsStallEP>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d003      	beq.n	800daf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	2201      	movs	r2, #1
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	e002      	b.n	800daf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2202      	movs	r2, #2
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fbf7 	bl	800e2f0 <USBD_CtlSendData>
              break;
 800db02:	e004      	b.n	800db0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800db04:	6839      	ldr	r1, [r7, #0]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fb81 	bl	800e20e <USBD_CtlError>
              break;
 800db0c:	bf00      	nop
          }
          break;
 800db0e:	e004      	b.n	800db1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fb7b 	bl	800e20e <USBD_CtlError>
          break;
 800db18:	bf00      	nop
      }
      break;
 800db1a:	e005      	b.n	800db28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fb75 	bl	800e20e <USBD_CtlError>
      break;
 800db24:	e000      	b.n	800db28 <USBD_StdEPReq+0x330>
      break;
 800db26:	bf00      	nop
  }

  return ret;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
	...

0800db34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 800db42:	2300      	movs	r3, #0
 800db44:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 800db46:	2300      	movs	r3, #0
 800db48:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	885b      	ldrh	r3, [r3, #2]
 800db4e:	0a1b      	lsrs	r3, r3, #8
 800db50:	b29b      	uxth	r3, r3
 800db52:	3b01      	subs	r3, #1
 800db54:	2b06      	cmp	r3, #6
 800db56:	f200 814f 	bhi.w	800ddf8 <USBD_GetDescriptor+0x2c4>
 800db5a:	a201      	add	r2, pc, #4	; (adr r2, 800db60 <USBD_GetDescriptor+0x2c>)
 800db5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db60:	0800db7d 	.word	0x0800db7d
 800db64:	0800db95 	.word	0x0800db95
 800db68:	0800dbd5 	.word	0x0800dbd5
 800db6c:	0800ddf9 	.word	0x0800ddf9
 800db70:	0800ddf9 	.word	0x0800ddf9
 800db74:	0800dd99 	.word	0x0800dd99
 800db78:	0800ddc5 	.word	0x0800ddc5
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	7c12      	ldrb	r2, [r2, #16]
 800db88:	f107 010a 	add.w	r1, r7, #10
 800db8c:	4610      	mov	r0, r2
 800db8e:	4798      	blx	r3
 800db90:	6178      	str	r0, [r7, #20]
      break;
 800db92:	e139      	b.n	800de08 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	7c1b      	ldrb	r3, [r3, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10d      	bne.n	800dbb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba4:	f107 020a 	add.w	r2, r7, #10
 800dba8:	4610      	mov	r0, r2
 800dbaa:	4798      	blx	r3
 800dbac:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	2202      	movs	r2, #2
 800dbb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dbb6:	e127      	b.n	800de08 <USBD_GetDescriptor+0x2d4>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc0:	f107 020a 	add.w	r2, r7, #10
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	4798      	blx	r3
 800dbc8:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	3301      	adds	r3, #1
 800dbce:	2202      	movs	r2, #2
 800dbd0:	701a      	strb	r2, [r3, #0]
      break;
 800dbd2:	e119      	b.n	800de08 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	885b      	ldrh	r3, [r3, #2]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	2b05      	cmp	r3, #5
 800dbdc:	f200 80ac 	bhi.w	800dd38 <USBD_GetDescriptor+0x204>
 800dbe0:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <USBD_GetDescriptor+0xb4>)
 800dbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe6:	bf00      	nop
 800dbe8:	0800dc01 	.word	0x0800dc01
 800dbec:	0800dc35 	.word	0x0800dc35
 800dbf0:	0800dc69 	.word	0x0800dc69
 800dbf4:	0800dc9d 	.word	0x0800dc9d
 800dbf8:	0800dcd1 	.word	0x0800dcd1
 800dbfc:	0800dd05 	.word	0x0800dd05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7c12      	ldrb	r2, [r2, #16]
 800dc18:	f107 010a 	add.w	r1, r7, #10
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
 800dc20:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc22:	e0b8      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 faf1 	bl	800e20e <USBD_CtlError>
            err++;
 800dc2c:	7cfb      	ldrb	r3, [r7, #19]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	74fb      	strb	r3, [r7, #19]
          break;
 800dc32:	e0b0      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	7c12      	ldrb	r2, [r2, #16]
 800dc4c:	f107 010a 	add.w	r1, r7, #10
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc56:	e09e      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fad7 	bl	800e20e <USBD_CtlError>
            err++;
 800dc60:	7cfb      	ldrb	r3, [r7, #19]
 800dc62:	3301      	adds	r3, #1
 800dc64:	74fb      	strb	r3, [r7, #19]
          break;
 800dc66:	e096      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	7c12      	ldrb	r2, [r2, #16]
 800dc80:	f107 010a 	add.w	r1, r7, #10
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8a:	e084      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fabd 	bl	800e20e <USBD_CtlError>
            err++;
 800dc94:	7cfb      	ldrb	r3, [r7, #19]
 800dc96:	3301      	adds	r3, #1
 800dc98:	74fb      	strb	r3, [r7, #19]
          break;
 800dc9a:	e07c      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00b      	beq.n	800dcc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	7c12      	ldrb	r2, [r2, #16]
 800dcb4:	f107 010a 	add.w	r1, r7, #10
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcbe:	e06a      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 faa3 	bl	800e20e <USBD_CtlError>
            err++;
 800dcc8:	7cfb      	ldrb	r3, [r7, #19]
 800dcca:	3301      	adds	r3, #1
 800dccc:	74fb      	strb	r3, [r7, #19]
          break;
 800dcce:	e062      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00b      	beq.n	800dcf4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	7c12      	ldrb	r2, [r2, #16]
 800dce8:	f107 010a 	add.w	r1, r7, #10
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
 800dcf0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcf2:	e050      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa89 	bl	800e20e <USBD_CtlError>
            err++;
 800dcfc:	7cfb      	ldrb	r3, [r7, #19]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	74fb      	strb	r3, [r7, #19]
          break;
 800dd02:	e048      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00b      	beq.n	800dd28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd16:	699b      	ldr	r3, [r3, #24]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	7c12      	ldrb	r2, [r2, #16]
 800dd1c:	f107 010a 	add.w	r1, r7, #10
 800dd20:	4610      	mov	r0, r2
 800dd22:	4798      	blx	r3
 800dd24:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd26:	e036      	b.n	800dd96 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f000 fa6f 	bl	800e20e <USBD_CtlError>
            err++;
 800dd30:	7cfb      	ldrb	r3, [r7, #19]
 800dd32:	3301      	adds	r3, #1
 800dd34:	74fb      	strb	r3, [r7, #19]
          break;
 800dd36:	e02e      	b.n	800dd96 <USBD_GetDescriptor+0x262>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	617b      	str	r3, [r7, #20]


          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	e020      	b.n	800dd84 <USBD_GetDescriptor+0x250>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	32ae      	adds	r2, #174	; 0xae
 800dd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d015      	beq.n	800dd7e <USBD_GetDescriptor+0x24a>
            {
              pdev->classId = idx;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	32ae      	adds	r2, #174	; 0xae
 800dd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	8852      	ldrh	r2, [r2, #2]
 800dd6a:	b2d1      	uxtb	r1, r2
 800dd6c:	f107 020a 	add.w	r2, r7, #10
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	4798      	blx	r3
 800dd74:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10a      	bne.n	800dd92 <USBD_GetDescriptor+0x25e>
              {
                continue;
 800dd7c:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	3301      	adds	r3, #1
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d3d8      	bcc.n	800dd42 <USBD_GetDescriptor+0x20e>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dd90:	e000      	b.n	800dd94 <USBD_GetDescriptor+0x260>
                break;
 800dd92:	bf00      	nop
          break;
 800dd94:	bf00      	nop
      }
      break;
 800dd96:	e037      	b.n	800de08 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	7c1b      	ldrb	r3, [r3, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d109      	bne.n	800ddb4 <USBD_GetDescriptor+0x280>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dda6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda8:	f107 020a 	add.w	r2, r7, #10
 800ddac:	4610      	mov	r0, r2
 800ddae:	4798      	blx	r3
 800ddb0:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ddb2:	e029      	b.n	800de08 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800ddb4:	6839      	ldr	r1, [r7, #0]
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 fa29 	bl	800e20e <USBD_CtlError>
        err++;
 800ddbc:	7cfb      	ldrb	r3, [r7, #19]
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	74fb      	strb	r3, [r7, #19]
      break;
 800ddc2:	e021      	b.n	800de08 <USBD_GetDescriptor+0x2d4>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	7c1b      	ldrb	r3, [r3, #16]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d10d      	bne.n	800dde8 <USBD_GetDescriptor+0x2b4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddd4:	f107 020a 	add.w	r2, r7, #10
 800ddd8:	4610      	mov	r0, r2
 800ddda:	4798      	blx	r3
 800dddc:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	3301      	adds	r3, #1
 800dde2:	2207      	movs	r2, #7
 800dde4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dde6:	e00f      	b.n	800de08 <USBD_GetDescriptor+0x2d4>
        USBD_CtlError(pdev, req);
 800dde8:	6839      	ldr	r1, [r7, #0]
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 fa0f 	bl	800e20e <USBD_CtlError>
        err++;
 800ddf0:	7cfb      	ldrb	r3, [r7, #19]
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	74fb      	strb	r3, [r7, #19]
      break;
 800ddf6:	e007      	b.n	800de08 <USBD_GetDescriptor+0x2d4>

    default:
      USBD_CtlError(pdev, req);
 800ddf8:	6839      	ldr	r1, [r7, #0]
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fa07 	bl	800e20e <USBD_CtlError>
      err++;
 800de00:	7cfb      	ldrb	r3, [r7, #19]
 800de02:	3301      	adds	r3, #1
 800de04:	74fb      	strb	r3, [r7, #19]
      break;
 800de06:	bf00      	nop
  }

  if (err != 0U)
 800de08:	7cfb      	ldrb	r3, [r7, #19]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d11e      	bne.n	800de4c <USBD_GetDescriptor+0x318>
  {
    return;
  }

  if (req->wLength != 0U)
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	88db      	ldrh	r3, [r3, #6]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d016      	beq.n	800de44 <USBD_GetDescriptor+0x310>
  {
    if (len != 0U)
 800de16:	897b      	ldrh	r3, [r7, #10]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00e      	beq.n	800de3a <USBD_GetDescriptor+0x306>
    {
      len = MIN(len, req->wLength);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	88da      	ldrh	r2, [r3, #6]
 800de20:	897b      	ldrh	r3, [r7, #10]
 800de22:	4293      	cmp	r3, r2
 800de24:	bf28      	it	cs
 800de26:	4613      	movcs	r3, r2
 800de28:	b29b      	uxth	r3, r3
 800de2a:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de2c:	897b      	ldrh	r3, [r7, #10]
 800de2e:	461a      	mov	r2, r3
 800de30:	6979      	ldr	r1, [r7, #20]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fa5c 	bl	800e2f0 <USBD_CtlSendData>
 800de38:	e009      	b.n	800de4e <USBD_GetDescriptor+0x31a>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f9e6 	bl	800e20e <USBD_CtlError>
 800de42:	e004      	b.n	800de4e <USBD_GetDescriptor+0x31a>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 faad 	bl	800e3a4 <USBD_CtlSendStatus>
 800de4a:	e000      	b.n	800de4e <USBD_GetDescriptor+0x31a>
    return;
 800de4c:	bf00      	nop
  }
}
 800de4e:	3718      	adds	r7, #24
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	889b      	ldrh	r3, [r3, #4]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d131      	bne.n	800deca <USBD_SetAddress+0x76>
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	88db      	ldrh	r3, [r3, #6]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d12d      	bne.n	800deca <USBD_SetAddress+0x76>
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	885b      	ldrh	r3, [r3, #2]
 800de72:	2b7f      	cmp	r3, #127	; 0x7f
 800de74:	d829      	bhi.n	800deca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	885b      	ldrh	r3, [r3, #2]
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d104      	bne.n	800de98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f9bc 	bl	800e20e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de96:	e01d      	b.n	800ded4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7bfa      	ldrb	r2, [r7, #15]
 800de9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dea0:	7bfb      	ldrb	r3, [r7, #15]
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fea3 	bl	800ebf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa7a 	bl	800e3a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800deb0:	7bfb      	ldrb	r3, [r7, #15]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d004      	beq.n	800dec0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2202      	movs	r2, #2
 800deba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800debe:	e009      	b.n	800ded4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dec8:	e004      	b.n	800ded4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800deca:	6839      	ldr	r1, [r7, #0]
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f99e 	bl	800e20e <USBD_CtlError>
  }
}
 800ded2:	bf00      	nop
 800ded4:	bf00      	nop
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dee6:	2300      	movs	r3, #0
 800dee8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	885b      	ldrh	r3, [r3, #2]
 800deee:	b2da      	uxtb	r2, r3
 800def0:	4b4e      	ldr	r3, [pc, #312]	; (800e02c <USBD_SetConfig+0x150>)
 800def2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800def4:	4b4d      	ldr	r3, [pc, #308]	; (800e02c <USBD_SetConfig+0x150>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d905      	bls.n	800df08 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f000 f985 	bl	800e20e <USBD_CtlError>
    return USBD_FAIL;
 800df04:	2303      	movs	r3, #3
 800df06:	e08c      	b.n	800e022 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b02      	cmp	r3, #2
 800df12:	d002      	beq.n	800df1a <USBD_SetConfig+0x3e>
 800df14:	2b03      	cmp	r3, #3
 800df16:	d029      	beq.n	800df6c <USBD_SetConfig+0x90>
 800df18:	e075      	b.n	800e006 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df1a:	4b44      	ldr	r3, [pc, #272]	; (800e02c <USBD_SetConfig+0x150>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d020      	beq.n	800df64 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800df22:	4b42      	ldr	r3, [pc, #264]	; (800e02c <USBD_SetConfig+0x150>)
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	461a      	mov	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df2c:	4b3f      	ldr	r3, [pc, #252]	; (800e02c <USBD_SetConfig+0x150>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7fe fff4 	bl	800cf20 <USBD_SetClassConfig>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d008      	beq.n	800df54 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800df42:	6839      	ldr	r1, [r7, #0]
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f000 f962 	bl	800e20e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2202      	movs	r2, #2
 800df4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df52:	e065      	b.n	800e020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fa25 	bl	800e3a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2203      	movs	r2, #3
 800df5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df62:	e05d      	b.n	800e020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f000 fa1d 	bl	800e3a4 <USBD_CtlSendStatus>
      break;
 800df6a:	e059      	b.n	800e020 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800df6c:	4b2f      	ldr	r3, [pc, #188]	; (800e02c <USBD_SetConfig+0x150>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d112      	bne.n	800df9a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2202      	movs	r2, #2
 800df78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800df7c:	4b2b      	ldr	r3, [pc, #172]	; (800e02c <USBD_SetConfig+0x150>)
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	461a      	mov	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df86:	4b29      	ldr	r3, [pc, #164]	; (800e02c <USBD_SetConfig+0x150>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7fe ffe3 	bl	800cf58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fa06 	bl	800e3a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df98:	e042      	b.n	800e020 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800df9a:	4b24      	ldr	r3, [pc, #144]	; (800e02c <USBD_SetConfig+0x150>)
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d02a      	beq.n	800dffe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	4619      	mov	r1, r3
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f7fe ffd1 	bl	800cf58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dfb6:	4b1d      	ldr	r3, [pc, #116]	; (800e02c <USBD_SetConfig+0x150>)
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dfc0:	4b1a      	ldr	r3, [pc, #104]	; (800e02c <USBD_SetConfig+0x150>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f7fe ffaa 	bl	800cf20 <USBD_SetClassConfig>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00f      	beq.n	800dff6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f918 	bl	800e20e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f7fe ffb6 	bl	800cf58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2202      	movs	r2, #2
 800dff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dff4:	e014      	b.n	800e020 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 f9d4 	bl	800e3a4 <USBD_CtlSendStatus>
      break;
 800dffc:	e010      	b.n	800e020 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f9d0 	bl	800e3a4 <USBD_CtlSendStatus>
      break;
 800e004:	e00c      	b.n	800e020 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f900 	bl	800e20e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e00e:	4b07      	ldr	r3, [pc, #28]	; (800e02c <USBD_SetConfig+0x150>)
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7fe ff9f 	bl	800cf58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e01a:	2303      	movs	r3, #3
 800e01c:	73fb      	strb	r3, [r7, #15]
      break;
 800e01e:	bf00      	nop
  }

  return ret;
 800e020:	7bfb      	ldrb	r3, [r7, #15]
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	24000673 	.word	0x24000673

0800e030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
 800e038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	88db      	ldrh	r3, [r3, #6]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d004      	beq.n	800e04c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f8e2 	bl	800e20e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e04a:	e023      	b.n	800e094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e052:	b2db      	uxtb	r3, r3
 800e054:	2b02      	cmp	r3, #2
 800e056:	dc02      	bgt.n	800e05e <USBD_GetConfig+0x2e>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	dc03      	bgt.n	800e064 <USBD_GetConfig+0x34>
 800e05c:	e015      	b.n	800e08a <USBD_GetConfig+0x5a>
 800e05e:	2b03      	cmp	r3, #3
 800e060:	d00b      	beq.n	800e07a <USBD_GetConfig+0x4a>
 800e062:	e012      	b.n	800e08a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	3308      	adds	r3, #8
 800e06e:	2201      	movs	r2, #1
 800e070:	4619      	mov	r1, r3
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 f93c 	bl	800e2f0 <USBD_CtlSendData>
        break;
 800e078:	e00c      	b.n	800e094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	3304      	adds	r3, #4
 800e07e:	2201      	movs	r2, #1
 800e080:	4619      	mov	r1, r3
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f934 	bl	800e2f0 <USBD_CtlSendData>
        break;
 800e088:	e004      	b.n	800e094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f8be 	bl	800e20e <USBD_CtlError>
        break;
 800e092:	bf00      	nop
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b082      	sub	sp, #8
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d81e      	bhi.n	800e0f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	88db      	ldrh	r3, [r3, #6]
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d004      	beq.n	800e0c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f8a5 	bl	800e20e <USBD_CtlError>
        break;
 800e0c4:	e01a      	b.n	800e0fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2201      	movs	r2, #1
 800e0ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d005      	beq.n	800e0e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	f043 0202 	orr.w	r2, r3, #2
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	330c      	adds	r3, #12
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f900 	bl	800e2f0 <USBD_CtlSendData>
      break;
 800e0f0:	e004      	b.n	800e0fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f88a 	bl	800e20e <USBD_CtlError>
      break;
 800e0fa:	bf00      	nop
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	885b      	ldrh	r3, [r3, #2]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d107      	bne.n	800e126 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f940 	bl	800e3a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e124:	e013      	b.n	800e14e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	885b      	ldrh	r3, [r3, #2]
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	d10b      	bne.n	800e146 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	889b      	ldrh	r3, [r3, #4]
 800e132:	0a1b      	lsrs	r3, r3, #8
 800e134:	b29b      	uxth	r3, r3
 800e136:	b2da      	uxtb	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 f930 	bl	800e3a4 <USBD_CtlSendStatus>
}
 800e144:	e003      	b.n	800e14e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e146:	6839      	ldr	r1, [r7, #0]
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f860 	bl	800e20e <USBD_CtlError>
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b082      	sub	sp, #8
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e166:	b2db      	uxtb	r3, r3
 800e168:	3b01      	subs	r3, #1
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	d80b      	bhi.n	800e186 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d10c      	bne.n	800e190 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f910 	bl	800e3a4 <USBD_CtlSendStatus>
      }
      break;
 800e184:	e004      	b.n	800e190 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f840 	bl	800e20e <USBD_CtlError>
      break;
 800e18e:	e000      	b.n	800e192 <USBD_ClrFeature+0x3c>
      break;
 800e190:	bf00      	nop
  }
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b084      	sub	sp, #16
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
 800e1a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	781a      	ldrb	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	781a      	ldrb	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e1c4:	68f8      	ldr	r0, [r7, #12]
 800e1c6:	f7ff fa1a 	bl	800d5fe <SWAPBYTE>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fa0d 	bl	800d5fe <SWAPBYTE>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f7ff fa00 	bl	800d5fe <SWAPBYTE>
 800e1fe:	4603      	mov	r3, r0
 800e200:	461a      	mov	r2, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	80da      	strh	r2, [r3, #6]
}
 800e206:	bf00      	nop
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b082      	sub	sp, #8
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e218:	2180      	movs	r1, #128	; 0x80
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fc7e 	bl	800eb1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e220:	2100      	movs	r1, #0
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fc7a 	bl	800eb1c <USBD_LL_StallEP>
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b086      	sub	sp, #24
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d036      	beq.n	800e2b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e24a:	6938      	ldr	r0, [r7, #16]
 800e24c:	f000 f836 	bl	800e2bc <USBD_GetLen>
 800e250:	4603      	mov	r3, r0
 800e252:	3301      	adds	r3, #1
 800e254:	b29b      	uxth	r3, r3
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	b29a      	uxth	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e25e:	7dfb      	ldrb	r3, [r7, #23]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	4413      	add	r3, r2
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	7812      	ldrb	r2, [r2, #0]
 800e268:	701a      	strb	r2, [r3, #0]
  idx++;
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
 800e26c:	3301      	adds	r3, #1
 800e26e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e270:	7dfb      	ldrb	r3, [r7, #23]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	4413      	add	r3, r2
 800e276:	2203      	movs	r2, #3
 800e278:	701a      	strb	r2, [r3, #0]
  idx++;
 800e27a:	7dfb      	ldrb	r3, [r7, #23]
 800e27c:	3301      	adds	r3, #1
 800e27e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e280:	e013      	b.n	800e2aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e282:	7dfb      	ldrb	r3, [r7, #23]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	4413      	add	r3, r2
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	7812      	ldrb	r2, [r2, #0]
 800e28c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	3301      	adds	r3, #1
 800e292:	613b      	str	r3, [r7, #16]
    idx++;
 800e294:	7dfb      	ldrb	r3, [r7, #23]
 800e296:	3301      	adds	r3, #1
 800e298:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	4413      	add	r3, r2
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800e2a4:	7dfb      	ldrb	r3, [r7, #23]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d1e7      	bne.n	800e282 <USBD_GetString+0x52>
 800e2b2:	e000      	b.n	800e2b6 <USBD_GetString+0x86>
    return;
 800e2b4:	bf00      	nop
  }
}
 800e2b6:	3718      	adds	r7, #24
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b085      	sub	sp, #20
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e2cc:	e005      	b.n	800e2da <USBD_GetLen+0x1e>
  {
    len++;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1f5      	bne.n	800e2ce <USBD_GetLen+0x12>
  }

  return len;
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b084      	sub	sp, #16
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	60f8      	str	r0, [r7, #12]
 800e2f8:	60b9      	str	r1, [r7, #8]
 800e2fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2202      	movs	r2, #2
 800e300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68ba      	ldr	r2, [r7, #8]
 800e314:	2100      	movs	r1, #0
 800e316:	68f8      	ldr	r0, [r7, #12]
 800e318:	f000 fc89 	bl	800ec2e <USBD_LL_Transmit>

  return USBD_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	60b9      	str	r1, [r7, #8]
 800e330:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68ba      	ldr	r2, [r7, #8]
 800e336:	2100      	movs	r1, #0
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f000 fc78 	bl	800ec2e <USBD_LL_Transmit>

  return USBD_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2203      	movs	r2, #3
 800e358:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	2100      	movs	r1, #0
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f000 fc7c 	bl	800ec70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	2100      	movs	r1, #0
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f000 fc6b 	bl	800ec70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2204      	movs	r2, #4
 800e3b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	2100      	movs	r1, #0
 800e3ba:	6878      	ldr	r0, [r7, #4]
 800e3bc:	f000 fc37 	bl	800ec2e <USBD_LL_Transmit>

  return USBD_OK;
 800e3c0:	2300      	movs	r3, #0
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3708      	adds	r7, #8
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e3ca:	b580      	push	{r7, lr}
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2205      	movs	r2, #5
 800e3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e3da:	2300      	movs	r3, #0
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2100      	movs	r1, #0
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fc45 	bl	800ec70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3708      	adds	r7, #8
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	4913      	ldr	r1, [pc, #76]	; (800e444 <MX_USB_DEVICE_Init+0x54>)
 800e3f8:	4813      	ldr	r0, [pc, #76]	; (800e448 <MX_USB_DEVICE_Init+0x58>)
 800e3fa:	f7fe fcf9 	bl	800cdf0 <USBD_Init>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e404:	f7f3 f92e 	bl	8001664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_DFU) != USBD_OK)
 800e408:	4910      	ldr	r1, [pc, #64]	; (800e44c <MX_USB_DEVICE_Init+0x5c>)
 800e40a:	480f      	ldr	r0, [pc, #60]	; (800e448 <MX_USB_DEVICE_Init+0x58>)
 800e40c:	f7fe fd20 	bl	800ce50 <USBD_RegisterClass>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e416:	f7f3 f925 	bl	8001664 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceHS, &USBD_DFU_fops_HS) != USBD_OK)
 800e41a:	490d      	ldr	r1, [pc, #52]	; (800e450 <MX_USB_DEVICE_Init+0x60>)
 800e41c:	480a      	ldr	r0, [pc, #40]	; (800e448 <MX_USB_DEVICE_Init+0x58>)
 800e41e:	f7fe f8e1 	bl	800c5e4 <USBD_DFU_RegisterMedia>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e428:	f7f3 f91c 	bl	8001664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e42c:	4806      	ldr	r0, [pc, #24]	; (800e448 <MX_USB_DEVICE_Init+0x58>)
 800e42e:	f7fe fd45 	bl	800cebc <USBD_Start>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e438:	f7f3 f914 	bl	8001664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e43c:	f7f7 fb82 	bl	8005b44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e440:	bf00      	nop
 800e442:	bd80      	pop	{r7, pc}
 800e444:	24000074 	.word	0x24000074
 800e448:	24000674 	.word	0x24000674
 800e44c:	24000010 	.word	0x24000010
 800e450:	240000c4 	.word	0x240000c4

0800e454 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	4603      	mov	r3, r0
 800e45c:	6039      	str	r1, [r7, #0]
 800e45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2212      	movs	r2, #18
 800e464:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e466:	4b03      	ldr	r3, [pc, #12]	; (800e474 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e468:	4618      	mov	r0, r3
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	24000090 	.word	0x24000090

0800e478 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	4603      	mov	r3, r0
 800e480:	6039      	str	r1, [r7, #0]
 800e482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2204      	movs	r2, #4
 800e488:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e48a:	4b03      	ldr	r3, [pc, #12]	; (800e498 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	370c      	adds	r7, #12
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	240000a4 	.word	0x240000a4

0800e49c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	6039      	str	r1, [r7, #0]
 800e4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d105      	bne.n	800e4ba <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	4907      	ldr	r1, [pc, #28]	; (800e4d0 <USBD_HS_ProductStrDescriptor+0x34>)
 800e4b2:	4808      	ldr	r0, [pc, #32]	; (800e4d4 <USBD_HS_ProductStrDescriptor+0x38>)
 800e4b4:	f7ff febc 	bl	800e230 <USBD_GetString>
 800e4b8:	e004      	b.n	800e4c4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	4904      	ldr	r1, [pc, #16]	; (800e4d0 <USBD_HS_ProductStrDescriptor+0x34>)
 800e4be:	4805      	ldr	r0, [pc, #20]	; (800e4d4 <USBD_HS_ProductStrDescriptor+0x38>)
 800e4c0:	f7ff feb6 	bl	800e230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4c4:	4b02      	ldr	r3, [pc, #8]	; (800e4d0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
 800e4ce:	bf00      	nop
 800e4d0:	24000950 	.word	0x24000950
 800e4d4:	08010964 	.word	0x08010964

0800e4d8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	6039      	str	r1, [r7, #0]
 800e4e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	4904      	ldr	r1, [pc, #16]	; (800e4f8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e4e8:	4804      	ldr	r0, [pc, #16]	; (800e4fc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e4ea:	f7ff fea1 	bl	800e230 <USBD_GetString>
  return USBD_StrDesc;
 800e4ee:	4b02      	ldr	r3, [pc, #8]	; (800e4f8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	24000950 	.word	0x24000950
 800e4fc:	08010984 	.word	0x08010984

0800e500 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	6039      	str	r1, [r7, #0]
 800e50a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	221a      	movs	r2, #26
 800e510:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e512:	f000 f843 	bl	800e59c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e516:	4b02      	ldr	r3, [pc, #8]	; (800e520 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	240000a8 	.word	0x240000a8

0800e524 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b082      	sub	sp, #8
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	6039      	str	r1, [r7, #0]
 800e52e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e530:	79fb      	ldrb	r3, [r7, #7]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d105      	bne.n	800e542 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	4907      	ldr	r1, [pc, #28]	; (800e558 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e53a:	4808      	ldr	r0, [pc, #32]	; (800e55c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e53c:	f7ff fe78 	bl	800e230 <USBD_GetString>
 800e540:	e004      	b.n	800e54c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	4904      	ldr	r1, [pc, #16]	; (800e558 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e546:	4805      	ldr	r0, [pc, #20]	; (800e55c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e548:	f7ff fe72 	bl	800e230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e54c:	4b02      	ldr	r3, [pc, #8]	; (800e558 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	24000950 	.word	0x24000950
 800e55c:	08010998 	.word	0x08010998

0800e560 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b082      	sub	sp, #8
 800e564:	af00      	add	r7, sp, #0
 800e566:	4603      	mov	r3, r0
 800e568:	6039      	str	r1, [r7, #0]
 800e56a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e56c:	79fb      	ldrb	r3, [r7, #7]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d105      	bne.n	800e57e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	4907      	ldr	r1, [pc, #28]	; (800e594 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e576:	4808      	ldr	r0, [pc, #32]	; (800e598 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e578:	f7ff fe5a 	bl	800e230 <USBD_GetString>
 800e57c:	e004      	b.n	800e588 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	4904      	ldr	r1, [pc, #16]	; (800e594 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e582:	4805      	ldr	r0, [pc, #20]	; (800e598 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e584:	f7ff fe54 	bl	800e230 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e588:	4b02      	ldr	r3, [pc, #8]	; (800e594 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	24000950 	.word	0x24000950
 800e598:	080109a4 	.word	0x080109a4

0800e59c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e5a2:	4b0f      	ldr	r3, [pc, #60]	; (800e5e0 <Get_SerialNum+0x44>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e5a8:	4b0e      	ldr	r3, [pc, #56]	; (800e5e4 <Get_SerialNum+0x48>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e5ae:	4b0e      	ldr	r3, [pc, #56]	; (800e5e8 <Get_SerialNum+0x4c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d009      	beq.n	800e5d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5c2:	2208      	movs	r2, #8
 800e5c4:	4909      	ldr	r1, [pc, #36]	; (800e5ec <Get_SerialNum+0x50>)
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f000 f814 	bl	800e5f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5cc:	2204      	movs	r2, #4
 800e5ce:	4908      	ldr	r1, [pc, #32]	; (800e5f0 <Get_SerialNum+0x54>)
 800e5d0:	68b8      	ldr	r0, [r7, #8]
 800e5d2:	f000 f80f 	bl	800e5f4 <IntToUnicode>
  }
}
 800e5d6:	bf00      	nop
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	1ff1e800 	.word	0x1ff1e800
 800e5e4:	1ff1e804 	.word	0x1ff1e804
 800e5e8:	1ff1e808 	.word	0x1ff1e808
 800e5ec:	240000aa 	.word	0x240000aa
 800e5f0:	240000ba 	.word	0x240000ba

0800e5f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b087      	sub	sp, #28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	4613      	mov	r3, r2
 800e600:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e606:	2300      	movs	r3, #0
 800e608:	75fb      	strb	r3, [r7, #23]
 800e60a:	e027      	b.n	800e65c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	0f1b      	lsrs	r3, r3, #28
 800e610:	2b09      	cmp	r3, #9
 800e612:	d80b      	bhi.n	800e62c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	0f1b      	lsrs	r3, r3, #28
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	7dfb      	ldrb	r3, [r7, #23]
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	4619      	mov	r1, r3
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	440b      	add	r3, r1
 800e624:	3230      	adds	r2, #48	; 0x30
 800e626:	b2d2      	uxtb	r2, r2
 800e628:	701a      	strb	r2, [r3, #0]
 800e62a:	e00a      	b.n	800e642 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	0f1b      	lsrs	r3, r3, #28
 800e630:	b2da      	uxtb	r2, r3
 800e632:	7dfb      	ldrb	r3, [r7, #23]
 800e634:	005b      	lsls	r3, r3, #1
 800e636:	4619      	mov	r1, r3
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	440b      	add	r3, r1
 800e63c:	3237      	adds	r2, #55	; 0x37
 800e63e:	b2d2      	uxtb	r2, r2
 800e640:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	011b      	lsls	r3, r3, #4
 800e646:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	005b      	lsls	r3, r3, #1
 800e64c:	3301      	adds	r3, #1
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	4413      	add	r3, r2
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	3301      	adds	r3, #1
 800e65a:	75fb      	strb	r3, [r7, #23]
 800e65c:	7dfa      	ldrb	r2, [r7, #23]
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	429a      	cmp	r2, r3
 800e662:	d3d3      	bcc.n	800e60c <IntToUnicode+0x18>
  }
}
 800e664:	bf00      	nop
 800e666:	bf00      	nop
 800e668:	371c      	adds	r7, #28
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <MEM_If_Init_HS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_HS(void)
{
 800e672:	b480      	push	{r7}
 800e674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800e676:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e678:	4618      	mov	r0, r3
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <MEM_If_DeInit_HS>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit_HS(void)
{
 800e682:	b480      	push	{r7}
 800e684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800e686:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e688:	4618      	mov	r0, r3
 800e68a:	46bd      	mov	sp, r7
 800e68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e690:	4770      	bx	lr

0800e692 <MEM_If_Erase_HS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_HS(uint32_t Add)
{
 800e692:	b480      	push	{r7}
 800e694:	b083      	sub	sp, #12
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  UNUSED(Add);

  return (USBD_OK);
 800e69a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a6:	4770      	bx	lr

0800e6a8 <MEM_If_Write_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 800e6b4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3714      	adds	r7, #20
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr

0800e6c2 <MEM_If_Read_HS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_HS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 800e6c2:	b480      	push	{r7}
 800e6c4:	b085      	sub	sp, #20
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	60f8      	str	r0, [r7, #12]
 800e6ca:	60b9      	str	r1, [r7, #8]
 800e6cc:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 800e6ce:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <MEM_If_GetStatus_HS>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus_HS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	607a      	str	r2, [r7, #4]
 800e6e8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  UNUSED(Add);
  UNUSED(buffer);

  switch(Cmd)
 800e6ea:	7afb      	ldrb	r3, [r7, #11]
 800e6ec:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800e6ee:	bf00      	nop
  }
  return  (USBD_OK);
 800e6f0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
	...

0800e700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b0b8      	sub	sp, #224	; 0xe0
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e70c:	2200      	movs	r2, #0
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	605a      	str	r2, [r3, #4]
 800e712:	609a      	str	r2, [r3, #8]
 800e714:	60da      	str	r2, [r3, #12]
 800e716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e718:	f107 0310 	add.w	r3, r7, #16
 800e71c:	22b8      	movs	r2, #184	; 0xb8
 800e71e:	2100      	movs	r1, #0
 800e720:	4618      	mov	r0, r3
 800e722:	f000 fb43 	bl	800edac <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a29      	ldr	r2, [pc, #164]	; (800e7d0 <HAL_PCD_MspInit+0xd0>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d14b      	bne.n	800e7c8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e730:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e734:	f04f 0300 	mov.w	r3, #0
 800e738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e73c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800e740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e744:	f107 0310 	add.w	r3, r7, #16
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f8 f971 	bl	8006a30 <HAL_RCCEx_PeriphCLKConfig>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800e754:	f7f2 ff86 	bl	8001664 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e758:	f7f7 f9f4 	bl	8005b44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e75c:	4b1d      	ldr	r3, [pc, #116]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e75e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e762:	4a1c      	ldr	r2, [pc, #112]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e764:	f043 0301 	orr.w	r3, r3, #1
 800e768:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e76c:	4b19      	ldr	r3, [pc, #100]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e76e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e772:	f003 0301 	and.w	r3, r3, #1
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e77a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e77e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e782:	2300      	movs	r3, #0
 800e784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e78e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e792:	4619      	mov	r1, r3
 800e794:	4810      	ldr	r0, [pc, #64]	; (800e7d8 <HAL_PCD_MspInit+0xd8>)
 800e796:	f7f4 f8df 	bl	8002958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e79a:	4b0e      	ldr	r3, [pc, #56]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e79c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e7a0:	4a0c      	ldr	r2, [pc, #48]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e7a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e7a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e7aa:	4b0a      	ldr	r3, [pc, #40]	; (800e7d4 <HAL_PCD_MspInit+0xd4>)
 800e7ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7b4:	60bb      	str	r3, [r7, #8]
 800e7b6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 3, 0);
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	2103      	movs	r1, #3
 800e7bc:	204d      	movs	r0, #77	; 0x4d
 800e7be:	f7f3 fe42 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e7c2:	204d      	movs	r0, #77	; 0x4d
 800e7c4:	f7f3 fe59 	bl	800247a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e7c8:	bf00      	nop
 800e7ca:	37e0      	adds	r7, #224	; 0xe0
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}
 800e7d0:	40040000 	.word	0x40040000
 800e7d4:	58024400 	.word	0x58024400
 800e7d8:	58020000 	.word	0x58020000

0800e7dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	f7fe fbca 	bl	800cf8c <USBD_LL_SetupStage>
}
 800e7f8:	bf00      	nop
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	460b      	mov	r3, r1
 800e80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e812:	78fa      	ldrb	r2, [r7, #3]
 800e814:	6879      	ldr	r1, [r7, #4]
 800e816:	4613      	mov	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	4413      	add	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	440b      	add	r3, r1
 800e820:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	78fb      	ldrb	r3, [r7, #3]
 800e828:	4619      	mov	r1, r3
 800e82a:	f7fe fc04 	bl	800d036 <USBD_LL_DataOutStage>
}
 800e82e:	bf00      	nop
 800e830:	3708      	adds	r7, #8
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	460b      	mov	r3, r1
 800e840:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e848:	78fa      	ldrb	r2, [r7, #3]
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	4613      	mov	r3, r2
 800e84e:	00db      	lsls	r3, r3, #3
 800e850:	4413      	add	r3, r2
 800e852:	009b      	lsls	r3, r3, #2
 800e854:	440b      	add	r3, r1
 800e856:	3348      	adds	r3, #72	; 0x48
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	78fb      	ldrb	r3, [r7, #3]
 800e85c:	4619      	mov	r1, r3
 800e85e:	f7fe fc9d 	bl	800d19c <USBD_LL_DataInStage>
}
 800e862:	bf00      	nop
 800e864:	3708      	adds	r7, #8
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}

0800e86a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e86a:	b580      	push	{r7, lr}
 800e86c:	b082      	sub	sp, #8
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe fdd7 	bl	800d42c <USBD_LL_SOF>
}
 800e87e:	bf00      	nop
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e88e:	2301      	movs	r3, #1
 800e890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d102      	bne.n	800e8a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]
 800e89e:	e008      	b.n	800e8b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d102      	bne.n	800e8ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	73fb      	strb	r3, [r7, #15]
 800e8ac:	e001      	b.n	800e8b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e8ae:	f7f2 fed9 	bl	8001664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8b8:	7bfa      	ldrb	r2, [r7, #15]
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fd71 	bl	800d3a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fd19 	bl	800d300 <USBD_LL_Reset>
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fd6c 	bl	800d3c4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	6812      	ldr	r2, [r2, #0]
 800e8fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e8fe:	f043 0301 	orr.w	r3, r3, #1
 800e902:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	6a1b      	ldr	r3, [r3, #32]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d005      	beq.n	800e918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e90c:	4b04      	ldr	r3, [pc, #16]	; (800e920 <HAL_PCD_SuspendCallback+0x48>)
 800e90e:	691b      	ldr	r3, [r3, #16]
 800e910:	4a03      	ldr	r2, [pc, #12]	; (800e920 <HAL_PCD_SuspendCallback+0x48>)
 800e912:	f043 0306 	orr.w	r3, r3, #6
 800e916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e918:	bf00      	nop
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	e000ed00 	.word	0xe000ed00

0800e924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fd62 	bl	800d3fc <USBD_LL_Resume>
}
 800e938:	bf00      	nop
 800e93a:	3708      	adds	r7, #8
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}

0800e940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e952:	78fa      	ldrb	r2, [r7, #3]
 800e954:	4611      	mov	r1, r2
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fdba 	bl	800d4d0 <USBD_LL_IsoOUTIncomplete>
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	4611      	mov	r1, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7fe fd76 	bl	800d46c <USBD_LL_IsoINIncomplete>
}
 800e980:	bf00      	nop
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b082      	sub	sp, #8
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fdcc 	bl	800d534 <USBD_LL_DevConnected>
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe fdc9 	bl	800d54a <USBD_LL_DevDisconnected>
}
 800e9b8:	bf00      	nop
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d140      	bne.n	800ea52 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e9d0:	4a22      	ldr	r2, [pc, #136]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a20      	ldr	r2, [pc, #128]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e9e0:	4b1e      	ldr	r3, [pc, #120]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9e2:	4a1f      	ldr	r2, [pc, #124]	; (800ea60 <USBD_LL_Init+0xa0>)
 800e9e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800e9e6:	4b1d      	ldr	r3, [pc, #116]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9e8:	2209      	movs	r2, #9
 800e9ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e9ec:	4b1b      	ldr	r3, [pc, #108]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9ee:	2202      	movs	r2, #2
 800e9f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800e9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e9f8:	4b18      	ldr	r3, [pc, #96]	; (800ea5c <USBD_LL_Init+0x9c>)
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e9fe:	4b17      	ldr	r3, [pc, #92]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ea04:	4b15      	ldr	r3, [pc, #84]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ea0a:	4b14      	ldr	r3, [pc, #80]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800ea10:	4b12      	ldr	r3, [pc, #72]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ea16:	4b11      	ldr	r3, [pc, #68]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea18:	2200      	movs	r2, #0
 800ea1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ea1c:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea1e:	2200      	movs	r2, #0
 800ea20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ea22:	480e      	ldr	r0, [pc, #56]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea24:	f7f5 fda1 	bl	800456a <HAL_PCD_Init>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ea2e:	f7f2 fe19 	bl	8001664 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ea32:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ea36:	4809      	ldr	r0, [pc, #36]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea38:	f7f6 ffe9 	bl	8005a0e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ea3c:	2280      	movs	r2, #128	; 0x80
 800ea3e:	2100      	movs	r1, #0
 800ea40:	4806      	ldr	r0, [pc, #24]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea42:	f7f6 ff9d 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ea46:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	4803      	ldr	r0, [pc, #12]	; (800ea5c <USBD_LL_Init+0x9c>)
 800ea4e:	f7f6 ff97 	bl	8005980 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3708      	adds	r7, #8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	24000b50 	.word	0x24000b50
 800ea60:	40040000 	.word	0x40040000

0800ea64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea70:	2300      	movs	r3, #0
 800ea72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7f5 fe99 	bl	80047b2 <HAL_PCD_Start>
 800ea80:	4603      	mov	r3, r0
 800ea82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 f92c 	bl	800ece4 <USBD_Get_USB_Status>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b084      	sub	sp, #16
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7f5 feb3 	bl	800481c <HAL_PCD_Stop>
 800eab6:	4603      	mov	r3, r0
 800eab8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 f911 	bl	800ece4 <USBD_Get_USB_Status>
 800eac2:	4603      	mov	r3, r0
 800eac4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eac6:	7bbb      	ldrb	r3, [r7, #14]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	461a      	mov	r2, r3
 800eade:	4603      	mov	r3, r0
 800eae0:	70fb      	strb	r3, [r7, #3]
 800eae2:	460b      	mov	r3, r1
 800eae4:	70bb      	strb	r3, [r7, #2]
 800eae6:	4613      	mov	r3, r2
 800eae8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eaf8:	78bb      	ldrb	r3, [r7, #2]
 800eafa:	883a      	ldrh	r2, [r7, #0]
 800eafc:	78f9      	ldrb	r1, [r7, #3]
 800eafe:	f7f6 fbb9 	bl	8005274 <HAL_PCD_EP_Open>
 800eb02:	4603      	mov	r3, r0
 800eb04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f000 f8eb 	bl	800ece4 <USBD_Get_USB_Status>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb12:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb36:	78fa      	ldrb	r2, [r7, #3]
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7f6 fc79 	bl	8005432 <HAL_PCD_EP_SetStall>
 800eb40:	4603      	mov	r3, r0
 800eb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb44:	7bfb      	ldrb	r3, [r7, #15]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 f8cc 	bl	800ece4 <USBD_Get_USB_Status>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	460b      	mov	r3, r1
 800eb64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb74:	78fa      	ldrb	r2, [r7, #3]
 800eb76:	4611      	mov	r1, r2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7f6 fcbe 	bl	80054fa <HAL_PCD_EP_ClrStall>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 f8ad 	bl	800ece4 <USBD_Get_USB_Status>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ebac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	da0b      	bge.n	800ebcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ebb4:	78fb      	ldrb	r3, [r7, #3]
 800ebb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebba:	68f9      	ldr	r1, [r7, #12]
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	4413      	add	r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	440b      	add	r3, r1
 800ebc6:	333e      	adds	r3, #62	; 0x3e
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	e00b      	b.n	800ebe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ebcc:	78fb      	ldrb	r3, [r7, #3]
 800ebce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ebd2:	68f9      	ldr	r1, [r7, #12]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	00db      	lsls	r3, r3, #3
 800ebd8:	4413      	add	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	440b      	add	r3, r1
 800ebde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ebe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec0a:	78fa      	ldrb	r2, [r7, #3]
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7f6 fb0b 	bl	800522a <HAL_PCD_SetAddress>
 800ec14:	4603      	mov	r3, r0
 800ec16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f000 f862 	bl	800ece4 <USBD_Get_USB_Status>
 800ec20:	4603      	mov	r3, r0
 800ec22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b086      	sub	sp, #24
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	603b      	str	r3, [r7, #0]
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec42:	2300      	movs	r3, #0
 800ec44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec4c:	7af9      	ldrb	r1, [r7, #11]
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	f7f6 fbb3 	bl	80053bc <HAL_PCD_EP_Transmit>
 800ec56:	4603      	mov	r3, r0
 800ec58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec5a:	7dfb      	ldrb	r3, [r7, #23]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 f841 	bl	800ece4 <USBD_Get_USB_Status>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ec66:	7dbb      	ldrb	r3, [r7, #22]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3718      	adds	r7, #24
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec80:	2300      	movs	r3, #0
 800ec82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec84:	2300      	movs	r3, #0
 800ec86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec8e:	7af9      	ldrb	r1, [r7, #11]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f7f6 fb56 	bl	8005344 <HAL_PCD_EP_Receive>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f000 f820 	bl	800ece4 <USBD_Get_USB_Status>
 800eca4:	4603      	mov	r3, r0
 800eca6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eca8:	7dbb      	ldrb	r3, [r7, #22]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3718      	adds	r7, #24
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
	...

0800ecb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ecb4:	b480      	push	{r7}
 800ecb6:	b083      	sub	sp, #12
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ecbc:	4b03      	ldr	r3, [pc, #12]	; (800eccc <USBD_static_malloc+0x18>)
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	370c      	adds	r7, #12
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	2400105c 	.word	0x2400105c

0800ecd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	2b03      	cmp	r3, #3
 800ecf6:	d817      	bhi.n	800ed28 <USBD_Get_USB_Status+0x44>
 800ecf8:	a201      	add	r2, pc, #4	; (adr r2, 800ed00 <USBD_Get_USB_Status+0x1c>)
 800ecfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfe:	bf00      	nop
 800ed00:	0800ed11 	.word	0x0800ed11
 800ed04:	0800ed17 	.word	0x0800ed17
 800ed08:	0800ed1d 	.word	0x0800ed1d
 800ed0c:	0800ed23 	.word	0x0800ed23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73fb      	strb	r3, [r7, #15]
    break;
 800ed14:	e00b      	b.n	800ed2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ed16:	2303      	movs	r3, #3
 800ed18:	73fb      	strb	r3, [r7, #15]
    break;
 800ed1a:	e008      	b.n	800ed2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ed20:	e005      	b.n	800ed2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ed22:	2303      	movs	r3, #3
 800ed24:	73fb      	strb	r3, [r7, #15]
    break;
 800ed26:	e002      	b.n	800ed2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ed2c:	bf00      	nop
  }
  return usb_status;
 800ed2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3714      	adds	r7, #20
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <__errno>:
 800ed3c:	4b01      	ldr	r3, [pc, #4]	; (800ed44 <__errno+0x8>)
 800ed3e:	6818      	ldr	r0, [r3, #0]
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	240000e0 	.word	0x240000e0

0800ed48 <__libc_init_array>:
 800ed48:	b570      	push	{r4, r5, r6, lr}
 800ed4a:	4d0d      	ldr	r5, [pc, #52]	; (800ed80 <__libc_init_array+0x38>)
 800ed4c:	4c0d      	ldr	r4, [pc, #52]	; (800ed84 <__libc_init_array+0x3c>)
 800ed4e:	1b64      	subs	r4, r4, r5
 800ed50:	10a4      	asrs	r4, r4, #2
 800ed52:	2600      	movs	r6, #0
 800ed54:	42a6      	cmp	r6, r4
 800ed56:	d109      	bne.n	800ed6c <__libc_init_array+0x24>
 800ed58:	4d0b      	ldr	r5, [pc, #44]	; (800ed88 <__libc_init_array+0x40>)
 800ed5a:	4c0c      	ldr	r4, [pc, #48]	; (800ed8c <__libc_init_array+0x44>)
 800ed5c:	f001 fd84 	bl	8010868 <_init>
 800ed60:	1b64      	subs	r4, r4, r5
 800ed62:	10a4      	asrs	r4, r4, #2
 800ed64:	2600      	movs	r6, #0
 800ed66:	42a6      	cmp	r6, r4
 800ed68:	d105      	bne.n	800ed76 <__libc_init_array+0x2e>
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
 800ed6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed70:	4798      	blx	r3
 800ed72:	3601      	adds	r6, #1
 800ed74:	e7ee      	b.n	800ed54 <__libc_init_array+0xc>
 800ed76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed7a:	4798      	blx	r3
 800ed7c:	3601      	adds	r6, #1
 800ed7e:	e7f2      	b.n	800ed66 <__libc_init_array+0x1e>
 800ed80:	08010d6c 	.word	0x08010d6c
 800ed84:	08010d6c 	.word	0x08010d6c
 800ed88:	08010d6c 	.word	0x08010d6c
 800ed8c:	08010d70 	.word	0x08010d70

0800ed90 <memcpy>:
 800ed90:	440a      	add	r2, r1
 800ed92:	4291      	cmp	r1, r2
 800ed94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed98:	d100      	bne.n	800ed9c <memcpy+0xc>
 800ed9a:	4770      	bx	lr
 800ed9c:	b510      	push	{r4, lr}
 800ed9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eda6:	4291      	cmp	r1, r2
 800eda8:	d1f9      	bne.n	800ed9e <memcpy+0xe>
 800edaa:	bd10      	pop	{r4, pc}

0800edac <memset>:
 800edac:	4402      	add	r2, r0
 800edae:	4603      	mov	r3, r0
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d100      	bne.n	800edb6 <memset+0xa>
 800edb4:	4770      	bx	lr
 800edb6:	f803 1b01 	strb.w	r1, [r3], #1
 800edba:	e7f9      	b.n	800edb0 <memset+0x4>

0800edbc <iprintf>:
 800edbc:	b40f      	push	{r0, r1, r2, r3}
 800edbe:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <iprintf+0x2c>)
 800edc0:	b513      	push	{r0, r1, r4, lr}
 800edc2:	681c      	ldr	r4, [r3, #0]
 800edc4:	b124      	cbz	r4, 800edd0 <iprintf+0x14>
 800edc6:	69a3      	ldr	r3, [r4, #24]
 800edc8:	b913      	cbnz	r3, 800edd0 <iprintf+0x14>
 800edca:	4620      	mov	r0, r4
 800edcc:	f000 fb08 	bl	800f3e0 <__sinit>
 800edd0:	ab05      	add	r3, sp, #20
 800edd2:	9a04      	ldr	r2, [sp, #16]
 800edd4:	68a1      	ldr	r1, [r4, #8]
 800edd6:	9301      	str	r3, [sp, #4]
 800edd8:	4620      	mov	r0, r4
 800edda:	f000 fef5 	bl	800fbc8 <_vfiprintf_r>
 800edde:	b002      	add	sp, #8
 800ede0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede4:	b004      	add	sp, #16
 800ede6:	4770      	bx	lr
 800ede8:	240000e0 	.word	0x240000e0

0800edec <putchar>:
 800edec:	4b09      	ldr	r3, [pc, #36]	; (800ee14 <putchar+0x28>)
 800edee:	b513      	push	{r0, r1, r4, lr}
 800edf0:	681c      	ldr	r4, [r3, #0]
 800edf2:	4601      	mov	r1, r0
 800edf4:	b134      	cbz	r4, 800ee04 <putchar+0x18>
 800edf6:	69a3      	ldr	r3, [r4, #24]
 800edf8:	b923      	cbnz	r3, 800ee04 <putchar+0x18>
 800edfa:	9001      	str	r0, [sp, #4]
 800edfc:	4620      	mov	r0, r4
 800edfe:	f000 faef 	bl	800f3e0 <__sinit>
 800ee02:	9901      	ldr	r1, [sp, #4]
 800ee04:	68a2      	ldr	r2, [r4, #8]
 800ee06:	4620      	mov	r0, r4
 800ee08:	b002      	add	sp, #8
 800ee0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee0e:	f001 baf1 	b.w	80103f4 <_putc_r>
 800ee12:	bf00      	nop
 800ee14:	240000e0 	.word	0x240000e0

0800ee18 <_puts_r>:
 800ee18:	b570      	push	{r4, r5, r6, lr}
 800ee1a:	460e      	mov	r6, r1
 800ee1c:	4605      	mov	r5, r0
 800ee1e:	b118      	cbz	r0, 800ee28 <_puts_r+0x10>
 800ee20:	6983      	ldr	r3, [r0, #24]
 800ee22:	b90b      	cbnz	r3, 800ee28 <_puts_r+0x10>
 800ee24:	f000 fadc 	bl	800f3e0 <__sinit>
 800ee28:	69ab      	ldr	r3, [r5, #24]
 800ee2a:	68ac      	ldr	r4, [r5, #8]
 800ee2c:	b913      	cbnz	r3, 800ee34 <_puts_r+0x1c>
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f000 fad6 	bl	800f3e0 <__sinit>
 800ee34:	4b2c      	ldr	r3, [pc, #176]	; (800eee8 <_puts_r+0xd0>)
 800ee36:	429c      	cmp	r4, r3
 800ee38:	d120      	bne.n	800ee7c <_puts_r+0x64>
 800ee3a:	686c      	ldr	r4, [r5, #4]
 800ee3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee3e:	07db      	lsls	r3, r3, #31
 800ee40:	d405      	bmi.n	800ee4e <_puts_r+0x36>
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	0598      	lsls	r0, r3, #22
 800ee46:	d402      	bmi.n	800ee4e <_puts_r+0x36>
 800ee48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee4a:	f000 fb67 	bl	800f51c <__retarget_lock_acquire_recursive>
 800ee4e:	89a3      	ldrh	r3, [r4, #12]
 800ee50:	0719      	lsls	r1, r3, #28
 800ee52:	d51d      	bpl.n	800ee90 <_puts_r+0x78>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	b1db      	cbz	r3, 800ee90 <_puts_r+0x78>
 800ee58:	3e01      	subs	r6, #1
 800ee5a:	68a3      	ldr	r3, [r4, #8]
 800ee5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee60:	3b01      	subs	r3, #1
 800ee62:	60a3      	str	r3, [r4, #8]
 800ee64:	bb39      	cbnz	r1, 800eeb6 <_puts_r+0x9e>
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	da38      	bge.n	800eedc <_puts_r+0xc4>
 800ee6a:	4622      	mov	r2, r4
 800ee6c:	210a      	movs	r1, #10
 800ee6e:	4628      	mov	r0, r5
 800ee70:	f000 f8ba 	bl	800efe8 <__swbuf_r>
 800ee74:	3001      	adds	r0, #1
 800ee76:	d011      	beq.n	800ee9c <_puts_r+0x84>
 800ee78:	250a      	movs	r5, #10
 800ee7a:	e011      	b.n	800eea0 <_puts_r+0x88>
 800ee7c:	4b1b      	ldr	r3, [pc, #108]	; (800eeec <_puts_r+0xd4>)
 800ee7e:	429c      	cmp	r4, r3
 800ee80:	d101      	bne.n	800ee86 <_puts_r+0x6e>
 800ee82:	68ac      	ldr	r4, [r5, #8]
 800ee84:	e7da      	b.n	800ee3c <_puts_r+0x24>
 800ee86:	4b1a      	ldr	r3, [pc, #104]	; (800eef0 <_puts_r+0xd8>)
 800ee88:	429c      	cmp	r4, r3
 800ee8a:	bf08      	it	eq
 800ee8c:	68ec      	ldreq	r4, [r5, #12]
 800ee8e:	e7d5      	b.n	800ee3c <_puts_r+0x24>
 800ee90:	4621      	mov	r1, r4
 800ee92:	4628      	mov	r0, r5
 800ee94:	f000 f90c 	bl	800f0b0 <__swsetup_r>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d0dd      	beq.n	800ee58 <_puts_r+0x40>
 800ee9c:	f04f 35ff 	mov.w	r5, #4294967295
 800eea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eea2:	07da      	lsls	r2, r3, #31
 800eea4:	d405      	bmi.n	800eeb2 <_puts_r+0x9a>
 800eea6:	89a3      	ldrh	r3, [r4, #12]
 800eea8:	059b      	lsls	r3, r3, #22
 800eeaa:	d402      	bmi.n	800eeb2 <_puts_r+0x9a>
 800eeac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeae:	f000 fb36 	bl	800f51e <__retarget_lock_release_recursive>
 800eeb2:	4628      	mov	r0, r5
 800eeb4:	bd70      	pop	{r4, r5, r6, pc}
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	da04      	bge.n	800eec4 <_puts_r+0xac>
 800eeba:	69a2      	ldr	r2, [r4, #24]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	dc06      	bgt.n	800eece <_puts_r+0xb6>
 800eec0:	290a      	cmp	r1, #10
 800eec2:	d004      	beq.n	800eece <_puts_r+0xb6>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	6022      	str	r2, [r4, #0]
 800eeca:	7019      	strb	r1, [r3, #0]
 800eecc:	e7c5      	b.n	800ee5a <_puts_r+0x42>
 800eece:	4622      	mov	r2, r4
 800eed0:	4628      	mov	r0, r5
 800eed2:	f000 f889 	bl	800efe8 <__swbuf_r>
 800eed6:	3001      	adds	r0, #1
 800eed8:	d1bf      	bne.n	800ee5a <_puts_r+0x42>
 800eeda:	e7df      	b.n	800ee9c <_puts_r+0x84>
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	250a      	movs	r5, #10
 800eee0:	1c5a      	adds	r2, r3, #1
 800eee2:	6022      	str	r2, [r4, #0]
 800eee4:	701d      	strb	r5, [r3, #0]
 800eee6:	e7db      	b.n	800eea0 <_puts_r+0x88>
 800eee8:	08010bd4 	.word	0x08010bd4
 800eeec:	08010bf4 	.word	0x08010bf4
 800eef0:	08010bb4 	.word	0x08010bb4

0800eef4 <puts>:
 800eef4:	4b02      	ldr	r3, [pc, #8]	; (800ef00 <puts+0xc>)
 800eef6:	4601      	mov	r1, r0
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	f7ff bf8d 	b.w	800ee18 <_puts_r>
 800eefe:	bf00      	nop
 800ef00:	240000e0 	.word	0x240000e0

0800ef04 <siscanf>:
 800ef04:	b40e      	push	{r1, r2, r3}
 800ef06:	b510      	push	{r4, lr}
 800ef08:	b09f      	sub	sp, #124	; 0x7c
 800ef0a:	ac21      	add	r4, sp, #132	; 0x84
 800ef0c:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ef10:	f854 2b04 	ldr.w	r2, [r4], #4
 800ef14:	9201      	str	r2, [sp, #4]
 800ef16:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ef1a:	9004      	str	r0, [sp, #16]
 800ef1c:	9008      	str	r0, [sp, #32]
 800ef1e:	f7f1 fa01 	bl	8000324 <strlen>
 800ef22:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <siscanf+0x50>)
 800ef24:	9005      	str	r0, [sp, #20]
 800ef26:	9009      	str	r0, [sp, #36]	; 0x24
 800ef28:	930d      	str	r3, [sp, #52]	; 0x34
 800ef2a:	480b      	ldr	r0, [pc, #44]	; (800ef58 <siscanf+0x54>)
 800ef2c:	9a01      	ldr	r2, [sp, #4]
 800ef2e:	6800      	ldr	r0, [r0, #0]
 800ef30:	9403      	str	r4, [sp, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	9311      	str	r3, [sp, #68]	; 0x44
 800ef36:	9316      	str	r3, [sp, #88]	; 0x58
 800ef38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ef40:	a904      	add	r1, sp, #16
 800ef42:	4623      	mov	r3, r4
 800ef44:	f000 fc9e 	bl	800f884 <__ssvfiscanf_r>
 800ef48:	b01f      	add	sp, #124	; 0x7c
 800ef4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef4e:	b003      	add	sp, #12
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	0800ef7f 	.word	0x0800ef7f
 800ef58:	240000e0 	.word	0x240000e0

0800ef5c <__sread>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	460c      	mov	r4, r1
 800ef60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef64:	f001 fa8e 	bl	8010484 <_read_r>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	bfab      	itete	ge
 800ef6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef70:	181b      	addge	r3, r3, r0
 800ef72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef76:	bfac      	ite	ge
 800ef78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef7a:	81a3      	strhlt	r3, [r4, #12]
 800ef7c:	bd10      	pop	{r4, pc}

0800ef7e <__seofread>:
 800ef7e:	2000      	movs	r0, #0
 800ef80:	4770      	bx	lr

0800ef82 <__swrite>:
 800ef82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef86:	461f      	mov	r7, r3
 800ef88:	898b      	ldrh	r3, [r1, #12]
 800ef8a:	05db      	lsls	r3, r3, #23
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	460c      	mov	r4, r1
 800ef90:	4616      	mov	r6, r2
 800ef92:	d505      	bpl.n	800efa0 <__swrite+0x1e>
 800ef94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef98:	2302      	movs	r3, #2
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f000 fac0 	bl	800f520 <_lseek_r>
 800efa0:	89a3      	ldrh	r3, [r4, #12]
 800efa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efaa:	81a3      	strh	r3, [r4, #12]
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	4628      	mov	r0, r5
 800efb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	f000 b869 	b.w	800f08c <_write_r>

0800efba <__sseek>:
 800efba:	b510      	push	{r4, lr}
 800efbc:	460c      	mov	r4, r1
 800efbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc2:	f000 faad 	bl	800f520 <_lseek_r>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	89a3      	ldrh	r3, [r4, #12]
 800efca:	bf15      	itete	ne
 800efcc:	6560      	strne	r0, [r4, #84]	; 0x54
 800efce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efd6:	81a3      	strheq	r3, [r4, #12]
 800efd8:	bf18      	it	ne
 800efda:	81a3      	strhne	r3, [r4, #12]
 800efdc:	bd10      	pop	{r4, pc}

0800efde <__sclose>:
 800efde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe2:	f000 b8d3 	b.w	800f18c <_close_r>
	...

0800efe8 <__swbuf_r>:
 800efe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efea:	460e      	mov	r6, r1
 800efec:	4614      	mov	r4, r2
 800efee:	4605      	mov	r5, r0
 800eff0:	b118      	cbz	r0, 800effa <__swbuf_r+0x12>
 800eff2:	6983      	ldr	r3, [r0, #24]
 800eff4:	b90b      	cbnz	r3, 800effa <__swbuf_r+0x12>
 800eff6:	f000 f9f3 	bl	800f3e0 <__sinit>
 800effa:	4b21      	ldr	r3, [pc, #132]	; (800f080 <__swbuf_r+0x98>)
 800effc:	429c      	cmp	r4, r3
 800effe:	d12b      	bne.n	800f058 <__swbuf_r+0x70>
 800f000:	686c      	ldr	r4, [r5, #4]
 800f002:	69a3      	ldr	r3, [r4, #24]
 800f004:	60a3      	str	r3, [r4, #8]
 800f006:	89a3      	ldrh	r3, [r4, #12]
 800f008:	071a      	lsls	r2, r3, #28
 800f00a:	d52f      	bpl.n	800f06c <__swbuf_r+0x84>
 800f00c:	6923      	ldr	r3, [r4, #16]
 800f00e:	b36b      	cbz	r3, 800f06c <__swbuf_r+0x84>
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	6820      	ldr	r0, [r4, #0]
 800f014:	1ac0      	subs	r0, r0, r3
 800f016:	6963      	ldr	r3, [r4, #20]
 800f018:	b2f6      	uxtb	r6, r6
 800f01a:	4283      	cmp	r3, r0
 800f01c:	4637      	mov	r7, r6
 800f01e:	dc04      	bgt.n	800f02a <__swbuf_r+0x42>
 800f020:	4621      	mov	r1, r4
 800f022:	4628      	mov	r0, r5
 800f024:	f000 f948 	bl	800f2b8 <_fflush_r>
 800f028:	bb30      	cbnz	r0, 800f078 <__swbuf_r+0x90>
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	3b01      	subs	r3, #1
 800f02e:	60a3      	str	r3, [r4, #8]
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	6022      	str	r2, [r4, #0]
 800f036:	701e      	strb	r6, [r3, #0]
 800f038:	6963      	ldr	r3, [r4, #20]
 800f03a:	3001      	adds	r0, #1
 800f03c:	4283      	cmp	r3, r0
 800f03e:	d004      	beq.n	800f04a <__swbuf_r+0x62>
 800f040:	89a3      	ldrh	r3, [r4, #12]
 800f042:	07db      	lsls	r3, r3, #31
 800f044:	d506      	bpl.n	800f054 <__swbuf_r+0x6c>
 800f046:	2e0a      	cmp	r6, #10
 800f048:	d104      	bne.n	800f054 <__swbuf_r+0x6c>
 800f04a:	4621      	mov	r1, r4
 800f04c:	4628      	mov	r0, r5
 800f04e:	f000 f933 	bl	800f2b8 <_fflush_r>
 800f052:	b988      	cbnz	r0, 800f078 <__swbuf_r+0x90>
 800f054:	4638      	mov	r0, r7
 800f056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f058:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <__swbuf_r+0x9c>)
 800f05a:	429c      	cmp	r4, r3
 800f05c:	d101      	bne.n	800f062 <__swbuf_r+0x7a>
 800f05e:	68ac      	ldr	r4, [r5, #8]
 800f060:	e7cf      	b.n	800f002 <__swbuf_r+0x1a>
 800f062:	4b09      	ldr	r3, [pc, #36]	; (800f088 <__swbuf_r+0xa0>)
 800f064:	429c      	cmp	r4, r3
 800f066:	bf08      	it	eq
 800f068:	68ec      	ldreq	r4, [r5, #12]
 800f06a:	e7ca      	b.n	800f002 <__swbuf_r+0x1a>
 800f06c:	4621      	mov	r1, r4
 800f06e:	4628      	mov	r0, r5
 800f070:	f000 f81e 	bl	800f0b0 <__swsetup_r>
 800f074:	2800      	cmp	r0, #0
 800f076:	d0cb      	beq.n	800f010 <__swbuf_r+0x28>
 800f078:	f04f 37ff 	mov.w	r7, #4294967295
 800f07c:	e7ea      	b.n	800f054 <__swbuf_r+0x6c>
 800f07e:	bf00      	nop
 800f080:	08010bd4 	.word	0x08010bd4
 800f084:	08010bf4 	.word	0x08010bf4
 800f088:	08010bb4 	.word	0x08010bb4

0800f08c <_write_r>:
 800f08c:	b538      	push	{r3, r4, r5, lr}
 800f08e:	4d07      	ldr	r5, [pc, #28]	; (800f0ac <_write_r+0x20>)
 800f090:	4604      	mov	r4, r0
 800f092:	4608      	mov	r0, r1
 800f094:	4611      	mov	r1, r2
 800f096:	2200      	movs	r2, #0
 800f098:	602a      	str	r2, [r5, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	f7f2 ff19 	bl	8001ed2 <_write>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_write_r+0x1e>
 800f0a4:	682b      	ldr	r3, [r5, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_write_r+0x1e>
 800f0a8:	6023      	str	r3, [r4, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	24001488 	.word	0x24001488

0800f0b0 <__swsetup_r>:
 800f0b0:	4b32      	ldr	r3, [pc, #200]	; (800f17c <__swsetup_r+0xcc>)
 800f0b2:	b570      	push	{r4, r5, r6, lr}
 800f0b4:	681d      	ldr	r5, [r3, #0]
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	b125      	cbz	r5, 800f0c6 <__swsetup_r+0x16>
 800f0bc:	69ab      	ldr	r3, [r5, #24]
 800f0be:	b913      	cbnz	r3, 800f0c6 <__swsetup_r+0x16>
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	f000 f98d 	bl	800f3e0 <__sinit>
 800f0c6:	4b2e      	ldr	r3, [pc, #184]	; (800f180 <__swsetup_r+0xd0>)
 800f0c8:	429c      	cmp	r4, r3
 800f0ca:	d10f      	bne.n	800f0ec <__swsetup_r+0x3c>
 800f0cc:	686c      	ldr	r4, [r5, #4]
 800f0ce:	89a3      	ldrh	r3, [r4, #12]
 800f0d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0d4:	0719      	lsls	r1, r3, #28
 800f0d6:	d42c      	bmi.n	800f132 <__swsetup_r+0x82>
 800f0d8:	06dd      	lsls	r5, r3, #27
 800f0da:	d411      	bmi.n	800f100 <__swsetup_r+0x50>
 800f0dc:	2309      	movs	r3, #9
 800f0de:	6033      	str	r3, [r6, #0]
 800f0e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ea:	e03e      	b.n	800f16a <__swsetup_r+0xba>
 800f0ec:	4b25      	ldr	r3, [pc, #148]	; (800f184 <__swsetup_r+0xd4>)
 800f0ee:	429c      	cmp	r4, r3
 800f0f0:	d101      	bne.n	800f0f6 <__swsetup_r+0x46>
 800f0f2:	68ac      	ldr	r4, [r5, #8]
 800f0f4:	e7eb      	b.n	800f0ce <__swsetup_r+0x1e>
 800f0f6:	4b24      	ldr	r3, [pc, #144]	; (800f188 <__swsetup_r+0xd8>)
 800f0f8:	429c      	cmp	r4, r3
 800f0fa:	bf08      	it	eq
 800f0fc:	68ec      	ldreq	r4, [r5, #12]
 800f0fe:	e7e6      	b.n	800f0ce <__swsetup_r+0x1e>
 800f100:	0758      	lsls	r0, r3, #29
 800f102:	d512      	bpl.n	800f12a <__swsetup_r+0x7a>
 800f104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f106:	b141      	cbz	r1, 800f11a <__swsetup_r+0x6a>
 800f108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f10c:	4299      	cmp	r1, r3
 800f10e:	d002      	beq.n	800f116 <__swsetup_r+0x66>
 800f110:	4630      	mov	r0, r6
 800f112:	f000 fa7d 	bl	800f610 <_free_r>
 800f116:	2300      	movs	r3, #0
 800f118:	6363      	str	r3, [r4, #52]	; 0x34
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f120:	81a3      	strh	r3, [r4, #12]
 800f122:	2300      	movs	r3, #0
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	89a3      	ldrh	r3, [r4, #12]
 800f12c:	f043 0308 	orr.w	r3, r3, #8
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	6923      	ldr	r3, [r4, #16]
 800f134:	b94b      	cbnz	r3, 800f14a <__swsetup_r+0x9a>
 800f136:	89a3      	ldrh	r3, [r4, #12]
 800f138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f140:	d003      	beq.n	800f14a <__swsetup_r+0x9a>
 800f142:	4621      	mov	r1, r4
 800f144:	4630      	mov	r0, r6
 800f146:	f000 fa23 	bl	800f590 <__smakebuf_r>
 800f14a:	89a0      	ldrh	r0, [r4, #12]
 800f14c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f150:	f010 0301 	ands.w	r3, r0, #1
 800f154:	d00a      	beq.n	800f16c <__swsetup_r+0xbc>
 800f156:	2300      	movs	r3, #0
 800f158:	60a3      	str	r3, [r4, #8]
 800f15a:	6963      	ldr	r3, [r4, #20]
 800f15c:	425b      	negs	r3, r3
 800f15e:	61a3      	str	r3, [r4, #24]
 800f160:	6923      	ldr	r3, [r4, #16]
 800f162:	b943      	cbnz	r3, 800f176 <__swsetup_r+0xc6>
 800f164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f168:	d1ba      	bne.n	800f0e0 <__swsetup_r+0x30>
 800f16a:	bd70      	pop	{r4, r5, r6, pc}
 800f16c:	0781      	lsls	r1, r0, #30
 800f16e:	bf58      	it	pl
 800f170:	6963      	ldrpl	r3, [r4, #20]
 800f172:	60a3      	str	r3, [r4, #8]
 800f174:	e7f4      	b.n	800f160 <__swsetup_r+0xb0>
 800f176:	2000      	movs	r0, #0
 800f178:	e7f7      	b.n	800f16a <__swsetup_r+0xba>
 800f17a:	bf00      	nop
 800f17c:	240000e0 	.word	0x240000e0
 800f180:	08010bd4 	.word	0x08010bd4
 800f184:	08010bf4 	.word	0x08010bf4
 800f188:	08010bb4 	.word	0x08010bb4

0800f18c <_close_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4d06      	ldr	r5, [pc, #24]	; (800f1a8 <_close_r+0x1c>)
 800f190:	2300      	movs	r3, #0
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	f7f2 feb7 	bl	8001f0a <_close>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_close_r+0x1a>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_close_r+0x1a>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	24001488 	.word	0x24001488

0800f1ac <__sflush_r>:
 800f1ac:	898a      	ldrh	r2, [r1, #12]
 800f1ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1b2:	4605      	mov	r5, r0
 800f1b4:	0710      	lsls	r0, r2, #28
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	d458      	bmi.n	800f26c <__sflush_r+0xc0>
 800f1ba:	684b      	ldr	r3, [r1, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	dc05      	bgt.n	800f1cc <__sflush_r+0x20>
 800f1c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	dc02      	bgt.n	800f1cc <__sflush_r+0x20>
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	d0f9      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1d8:	682f      	ldr	r7, [r5, #0]
 800f1da:	602b      	str	r3, [r5, #0]
 800f1dc:	d032      	beq.n	800f244 <__sflush_r+0x98>
 800f1de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	075a      	lsls	r2, r3, #29
 800f1e4:	d505      	bpl.n	800f1f2 <__sflush_r+0x46>
 800f1e6:	6863      	ldr	r3, [r4, #4]
 800f1e8:	1ac0      	subs	r0, r0, r3
 800f1ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1ec:	b10b      	cbz	r3, 800f1f2 <__sflush_r+0x46>
 800f1ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1f0:	1ac0      	subs	r0, r0, r3
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1f8:	6a21      	ldr	r1, [r4, #32]
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	47b0      	blx	r6
 800f1fe:	1c43      	adds	r3, r0, #1
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	d106      	bne.n	800f212 <__sflush_r+0x66>
 800f204:	6829      	ldr	r1, [r5, #0]
 800f206:	291d      	cmp	r1, #29
 800f208:	d82c      	bhi.n	800f264 <__sflush_r+0xb8>
 800f20a:	4a2a      	ldr	r2, [pc, #168]	; (800f2b4 <__sflush_r+0x108>)
 800f20c:	40ca      	lsrs	r2, r1
 800f20e:	07d6      	lsls	r6, r2, #31
 800f210:	d528      	bpl.n	800f264 <__sflush_r+0xb8>
 800f212:	2200      	movs	r2, #0
 800f214:	6062      	str	r2, [r4, #4]
 800f216:	04d9      	lsls	r1, r3, #19
 800f218:	6922      	ldr	r2, [r4, #16]
 800f21a:	6022      	str	r2, [r4, #0]
 800f21c:	d504      	bpl.n	800f228 <__sflush_r+0x7c>
 800f21e:	1c42      	adds	r2, r0, #1
 800f220:	d101      	bne.n	800f226 <__sflush_r+0x7a>
 800f222:	682b      	ldr	r3, [r5, #0]
 800f224:	b903      	cbnz	r3, 800f228 <__sflush_r+0x7c>
 800f226:	6560      	str	r0, [r4, #84]	; 0x54
 800f228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f22a:	602f      	str	r7, [r5, #0]
 800f22c:	2900      	cmp	r1, #0
 800f22e:	d0ca      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f234:	4299      	cmp	r1, r3
 800f236:	d002      	beq.n	800f23e <__sflush_r+0x92>
 800f238:	4628      	mov	r0, r5
 800f23a:	f000 f9e9 	bl	800f610 <_free_r>
 800f23e:	2000      	movs	r0, #0
 800f240:	6360      	str	r0, [r4, #52]	; 0x34
 800f242:	e7c1      	b.n	800f1c8 <__sflush_r+0x1c>
 800f244:	6a21      	ldr	r1, [r4, #32]
 800f246:	2301      	movs	r3, #1
 800f248:	4628      	mov	r0, r5
 800f24a:	47b0      	blx	r6
 800f24c:	1c41      	adds	r1, r0, #1
 800f24e:	d1c7      	bne.n	800f1e0 <__sflush_r+0x34>
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d0c4      	beq.n	800f1e0 <__sflush_r+0x34>
 800f256:	2b1d      	cmp	r3, #29
 800f258:	d001      	beq.n	800f25e <__sflush_r+0xb2>
 800f25a:	2b16      	cmp	r3, #22
 800f25c:	d101      	bne.n	800f262 <__sflush_r+0xb6>
 800f25e:	602f      	str	r7, [r5, #0]
 800f260:	e7b1      	b.n	800f1c6 <__sflush_r+0x1a>
 800f262:	89a3      	ldrh	r3, [r4, #12]
 800f264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f268:	81a3      	strh	r3, [r4, #12]
 800f26a:	e7ad      	b.n	800f1c8 <__sflush_r+0x1c>
 800f26c:	690f      	ldr	r7, [r1, #16]
 800f26e:	2f00      	cmp	r7, #0
 800f270:	d0a9      	beq.n	800f1c6 <__sflush_r+0x1a>
 800f272:	0793      	lsls	r3, r2, #30
 800f274:	680e      	ldr	r6, [r1, #0]
 800f276:	bf08      	it	eq
 800f278:	694b      	ldreq	r3, [r1, #20]
 800f27a:	600f      	str	r7, [r1, #0]
 800f27c:	bf18      	it	ne
 800f27e:	2300      	movne	r3, #0
 800f280:	eba6 0807 	sub.w	r8, r6, r7
 800f284:	608b      	str	r3, [r1, #8]
 800f286:	f1b8 0f00 	cmp.w	r8, #0
 800f28a:	dd9c      	ble.n	800f1c6 <__sflush_r+0x1a>
 800f28c:	6a21      	ldr	r1, [r4, #32]
 800f28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f290:	4643      	mov	r3, r8
 800f292:	463a      	mov	r2, r7
 800f294:	4628      	mov	r0, r5
 800f296:	47b0      	blx	r6
 800f298:	2800      	cmp	r0, #0
 800f29a:	dc06      	bgt.n	800f2aa <__sflush_r+0xfe>
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a2:	81a3      	strh	r3, [r4, #12]
 800f2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a8:	e78e      	b.n	800f1c8 <__sflush_r+0x1c>
 800f2aa:	4407      	add	r7, r0
 800f2ac:	eba8 0800 	sub.w	r8, r8, r0
 800f2b0:	e7e9      	b.n	800f286 <__sflush_r+0xda>
 800f2b2:	bf00      	nop
 800f2b4:	20400001 	.word	0x20400001

0800f2b8 <_fflush_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	690b      	ldr	r3, [r1, #16]
 800f2bc:	4605      	mov	r5, r0
 800f2be:	460c      	mov	r4, r1
 800f2c0:	b913      	cbnz	r3, 800f2c8 <_fflush_r+0x10>
 800f2c2:	2500      	movs	r5, #0
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	b118      	cbz	r0, 800f2d2 <_fflush_r+0x1a>
 800f2ca:	6983      	ldr	r3, [r0, #24]
 800f2cc:	b90b      	cbnz	r3, 800f2d2 <_fflush_r+0x1a>
 800f2ce:	f000 f887 	bl	800f3e0 <__sinit>
 800f2d2:	4b14      	ldr	r3, [pc, #80]	; (800f324 <_fflush_r+0x6c>)
 800f2d4:	429c      	cmp	r4, r3
 800f2d6:	d11b      	bne.n	800f310 <_fflush_r+0x58>
 800f2d8:	686c      	ldr	r4, [r5, #4]
 800f2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d0ef      	beq.n	800f2c2 <_fflush_r+0xa>
 800f2e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2e4:	07d0      	lsls	r0, r2, #31
 800f2e6:	d404      	bmi.n	800f2f2 <_fflush_r+0x3a>
 800f2e8:	0599      	lsls	r1, r3, #22
 800f2ea:	d402      	bmi.n	800f2f2 <_fflush_r+0x3a>
 800f2ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2ee:	f000 f915 	bl	800f51c <__retarget_lock_acquire_recursive>
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	4621      	mov	r1, r4
 800f2f6:	f7ff ff59 	bl	800f1ac <__sflush_r>
 800f2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f2fc:	07da      	lsls	r2, r3, #31
 800f2fe:	4605      	mov	r5, r0
 800f300:	d4e0      	bmi.n	800f2c4 <_fflush_r+0xc>
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	059b      	lsls	r3, r3, #22
 800f306:	d4dd      	bmi.n	800f2c4 <_fflush_r+0xc>
 800f308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f30a:	f000 f908 	bl	800f51e <__retarget_lock_release_recursive>
 800f30e:	e7d9      	b.n	800f2c4 <_fflush_r+0xc>
 800f310:	4b05      	ldr	r3, [pc, #20]	; (800f328 <_fflush_r+0x70>)
 800f312:	429c      	cmp	r4, r3
 800f314:	d101      	bne.n	800f31a <_fflush_r+0x62>
 800f316:	68ac      	ldr	r4, [r5, #8]
 800f318:	e7df      	b.n	800f2da <_fflush_r+0x22>
 800f31a:	4b04      	ldr	r3, [pc, #16]	; (800f32c <_fflush_r+0x74>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	bf08      	it	eq
 800f320:	68ec      	ldreq	r4, [r5, #12]
 800f322:	e7da      	b.n	800f2da <_fflush_r+0x22>
 800f324:	08010bd4 	.word	0x08010bd4
 800f328:	08010bf4 	.word	0x08010bf4
 800f32c:	08010bb4 	.word	0x08010bb4

0800f330 <std>:
 800f330:	2300      	movs	r3, #0
 800f332:	b510      	push	{r4, lr}
 800f334:	4604      	mov	r4, r0
 800f336:	e9c0 3300 	strd	r3, r3, [r0]
 800f33a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f33e:	6083      	str	r3, [r0, #8]
 800f340:	8181      	strh	r1, [r0, #12]
 800f342:	6643      	str	r3, [r0, #100]	; 0x64
 800f344:	81c2      	strh	r2, [r0, #14]
 800f346:	6183      	str	r3, [r0, #24]
 800f348:	4619      	mov	r1, r3
 800f34a:	2208      	movs	r2, #8
 800f34c:	305c      	adds	r0, #92	; 0x5c
 800f34e:	f7ff fd2d 	bl	800edac <memset>
 800f352:	4b05      	ldr	r3, [pc, #20]	; (800f368 <std+0x38>)
 800f354:	6263      	str	r3, [r4, #36]	; 0x24
 800f356:	4b05      	ldr	r3, [pc, #20]	; (800f36c <std+0x3c>)
 800f358:	62a3      	str	r3, [r4, #40]	; 0x28
 800f35a:	4b05      	ldr	r3, [pc, #20]	; (800f370 <std+0x40>)
 800f35c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f35e:	4b05      	ldr	r3, [pc, #20]	; (800f374 <std+0x44>)
 800f360:	6224      	str	r4, [r4, #32]
 800f362:	6323      	str	r3, [r4, #48]	; 0x30
 800f364:	bd10      	pop	{r4, pc}
 800f366:	bf00      	nop
 800f368:	0800ef5d 	.word	0x0800ef5d
 800f36c:	0800ef83 	.word	0x0800ef83
 800f370:	0800efbb 	.word	0x0800efbb
 800f374:	0800efdf 	.word	0x0800efdf

0800f378 <_cleanup_r>:
 800f378:	4901      	ldr	r1, [pc, #4]	; (800f380 <_cleanup_r+0x8>)
 800f37a:	f000 b8af 	b.w	800f4dc <_fwalk_reent>
 800f37e:	bf00      	nop
 800f380:	0800f2b9 	.word	0x0800f2b9

0800f384 <__sfmoreglue>:
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	2268      	movs	r2, #104	; 0x68
 800f388:	1e4d      	subs	r5, r1, #1
 800f38a:	4355      	muls	r5, r2
 800f38c:	460e      	mov	r6, r1
 800f38e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f392:	f000 f9a9 	bl	800f6e8 <_malloc_r>
 800f396:	4604      	mov	r4, r0
 800f398:	b140      	cbz	r0, 800f3ac <__sfmoreglue+0x28>
 800f39a:	2100      	movs	r1, #0
 800f39c:	e9c0 1600 	strd	r1, r6, [r0]
 800f3a0:	300c      	adds	r0, #12
 800f3a2:	60a0      	str	r0, [r4, #8]
 800f3a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f3a8:	f7ff fd00 	bl	800edac <memset>
 800f3ac:	4620      	mov	r0, r4
 800f3ae:	bd70      	pop	{r4, r5, r6, pc}

0800f3b0 <__sfp_lock_acquire>:
 800f3b0:	4801      	ldr	r0, [pc, #4]	; (800f3b8 <__sfp_lock_acquire+0x8>)
 800f3b2:	f000 b8b3 	b.w	800f51c <__retarget_lock_acquire_recursive>
 800f3b6:	bf00      	nop
 800f3b8:	2400147d 	.word	0x2400147d

0800f3bc <__sfp_lock_release>:
 800f3bc:	4801      	ldr	r0, [pc, #4]	; (800f3c4 <__sfp_lock_release+0x8>)
 800f3be:	f000 b8ae 	b.w	800f51e <__retarget_lock_release_recursive>
 800f3c2:	bf00      	nop
 800f3c4:	2400147d 	.word	0x2400147d

0800f3c8 <__sinit_lock_acquire>:
 800f3c8:	4801      	ldr	r0, [pc, #4]	; (800f3d0 <__sinit_lock_acquire+0x8>)
 800f3ca:	f000 b8a7 	b.w	800f51c <__retarget_lock_acquire_recursive>
 800f3ce:	bf00      	nop
 800f3d0:	2400147e 	.word	0x2400147e

0800f3d4 <__sinit_lock_release>:
 800f3d4:	4801      	ldr	r0, [pc, #4]	; (800f3dc <__sinit_lock_release+0x8>)
 800f3d6:	f000 b8a2 	b.w	800f51e <__retarget_lock_release_recursive>
 800f3da:	bf00      	nop
 800f3dc:	2400147e 	.word	0x2400147e

0800f3e0 <__sinit>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	4604      	mov	r4, r0
 800f3e4:	f7ff fff0 	bl	800f3c8 <__sinit_lock_acquire>
 800f3e8:	69a3      	ldr	r3, [r4, #24]
 800f3ea:	b11b      	cbz	r3, 800f3f4 <__sinit+0x14>
 800f3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3f0:	f7ff bff0 	b.w	800f3d4 <__sinit_lock_release>
 800f3f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f3f8:	6523      	str	r3, [r4, #80]	; 0x50
 800f3fa:	4b13      	ldr	r3, [pc, #76]	; (800f448 <__sinit+0x68>)
 800f3fc:	4a13      	ldr	r2, [pc, #76]	; (800f44c <__sinit+0x6c>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	62a2      	str	r2, [r4, #40]	; 0x28
 800f402:	42a3      	cmp	r3, r4
 800f404:	bf04      	itt	eq
 800f406:	2301      	moveq	r3, #1
 800f408:	61a3      	streq	r3, [r4, #24]
 800f40a:	4620      	mov	r0, r4
 800f40c:	f000 f820 	bl	800f450 <__sfp>
 800f410:	6060      	str	r0, [r4, #4]
 800f412:	4620      	mov	r0, r4
 800f414:	f000 f81c 	bl	800f450 <__sfp>
 800f418:	60a0      	str	r0, [r4, #8]
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 f818 	bl	800f450 <__sfp>
 800f420:	2200      	movs	r2, #0
 800f422:	60e0      	str	r0, [r4, #12]
 800f424:	2104      	movs	r1, #4
 800f426:	6860      	ldr	r0, [r4, #4]
 800f428:	f7ff ff82 	bl	800f330 <std>
 800f42c:	68a0      	ldr	r0, [r4, #8]
 800f42e:	2201      	movs	r2, #1
 800f430:	2109      	movs	r1, #9
 800f432:	f7ff ff7d 	bl	800f330 <std>
 800f436:	68e0      	ldr	r0, [r4, #12]
 800f438:	2202      	movs	r2, #2
 800f43a:	2112      	movs	r1, #18
 800f43c:	f7ff ff78 	bl	800f330 <std>
 800f440:	2301      	movs	r3, #1
 800f442:	61a3      	str	r3, [r4, #24]
 800f444:	e7d2      	b.n	800f3ec <__sinit+0xc>
 800f446:	bf00      	nop
 800f448:	08010bb0 	.word	0x08010bb0
 800f44c:	0800f379 	.word	0x0800f379

0800f450 <__sfp>:
 800f450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f452:	4607      	mov	r7, r0
 800f454:	f7ff ffac 	bl	800f3b0 <__sfp_lock_acquire>
 800f458:	4b1e      	ldr	r3, [pc, #120]	; (800f4d4 <__sfp+0x84>)
 800f45a:	681e      	ldr	r6, [r3, #0]
 800f45c:	69b3      	ldr	r3, [r6, #24]
 800f45e:	b913      	cbnz	r3, 800f466 <__sfp+0x16>
 800f460:	4630      	mov	r0, r6
 800f462:	f7ff ffbd 	bl	800f3e0 <__sinit>
 800f466:	3648      	adds	r6, #72	; 0x48
 800f468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	d503      	bpl.n	800f478 <__sfp+0x28>
 800f470:	6833      	ldr	r3, [r6, #0]
 800f472:	b30b      	cbz	r3, 800f4b8 <__sfp+0x68>
 800f474:	6836      	ldr	r6, [r6, #0]
 800f476:	e7f7      	b.n	800f468 <__sfp+0x18>
 800f478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f47c:	b9d5      	cbnz	r5, 800f4b4 <__sfp+0x64>
 800f47e:	4b16      	ldr	r3, [pc, #88]	; (800f4d8 <__sfp+0x88>)
 800f480:	60e3      	str	r3, [r4, #12]
 800f482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f486:	6665      	str	r5, [r4, #100]	; 0x64
 800f488:	f000 f847 	bl	800f51a <__retarget_lock_init_recursive>
 800f48c:	f7ff ff96 	bl	800f3bc <__sfp_lock_release>
 800f490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f498:	6025      	str	r5, [r4, #0]
 800f49a:	61a5      	str	r5, [r4, #24]
 800f49c:	2208      	movs	r2, #8
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f4a4:	f7ff fc82 	bl	800edac <memset>
 800f4a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f4ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4b4:	3468      	adds	r4, #104	; 0x68
 800f4b6:	e7d9      	b.n	800f46c <__sfp+0x1c>
 800f4b8:	2104      	movs	r1, #4
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	f7ff ff62 	bl	800f384 <__sfmoreglue>
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	6030      	str	r0, [r6, #0]
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d1d5      	bne.n	800f474 <__sfp+0x24>
 800f4c8:	f7ff ff78 	bl	800f3bc <__sfp_lock_release>
 800f4cc:	230c      	movs	r3, #12
 800f4ce:	603b      	str	r3, [r7, #0]
 800f4d0:	e7ee      	b.n	800f4b0 <__sfp+0x60>
 800f4d2:	bf00      	nop
 800f4d4:	08010bb0 	.word	0x08010bb0
 800f4d8:	ffff0001 	.word	0xffff0001

0800f4dc <_fwalk_reent>:
 800f4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	4688      	mov	r8, r1
 800f4e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f4e8:	2700      	movs	r7, #0
 800f4ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4ee:	f1b9 0901 	subs.w	r9, r9, #1
 800f4f2:	d505      	bpl.n	800f500 <_fwalk_reent+0x24>
 800f4f4:	6824      	ldr	r4, [r4, #0]
 800f4f6:	2c00      	cmp	r4, #0
 800f4f8:	d1f7      	bne.n	800f4ea <_fwalk_reent+0xe>
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f500:	89ab      	ldrh	r3, [r5, #12]
 800f502:	2b01      	cmp	r3, #1
 800f504:	d907      	bls.n	800f516 <_fwalk_reent+0x3a>
 800f506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f50a:	3301      	adds	r3, #1
 800f50c:	d003      	beq.n	800f516 <_fwalk_reent+0x3a>
 800f50e:	4629      	mov	r1, r5
 800f510:	4630      	mov	r0, r6
 800f512:	47c0      	blx	r8
 800f514:	4307      	orrs	r7, r0
 800f516:	3568      	adds	r5, #104	; 0x68
 800f518:	e7e9      	b.n	800f4ee <_fwalk_reent+0x12>

0800f51a <__retarget_lock_init_recursive>:
 800f51a:	4770      	bx	lr

0800f51c <__retarget_lock_acquire_recursive>:
 800f51c:	4770      	bx	lr

0800f51e <__retarget_lock_release_recursive>:
 800f51e:	4770      	bx	lr

0800f520 <_lseek_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	4d07      	ldr	r5, [pc, #28]	; (800f540 <_lseek_r+0x20>)
 800f524:	4604      	mov	r4, r0
 800f526:	4608      	mov	r0, r1
 800f528:	4611      	mov	r1, r2
 800f52a:	2200      	movs	r2, #0
 800f52c:	602a      	str	r2, [r5, #0]
 800f52e:	461a      	mov	r2, r3
 800f530:	f7f2 fd12 	bl	8001f58 <_lseek>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_lseek_r+0x1e>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_lseek_r+0x1e>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	24001488 	.word	0x24001488

0800f544 <__swhatbuf_r>:
 800f544:	b570      	push	{r4, r5, r6, lr}
 800f546:	460e      	mov	r6, r1
 800f548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54c:	2900      	cmp	r1, #0
 800f54e:	b096      	sub	sp, #88	; 0x58
 800f550:	4614      	mov	r4, r2
 800f552:	461d      	mov	r5, r3
 800f554:	da08      	bge.n	800f568 <__swhatbuf_r+0x24>
 800f556:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f55a:	2200      	movs	r2, #0
 800f55c:	602a      	str	r2, [r5, #0]
 800f55e:	061a      	lsls	r2, r3, #24
 800f560:	d410      	bmi.n	800f584 <__swhatbuf_r+0x40>
 800f562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f566:	e00e      	b.n	800f586 <__swhatbuf_r+0x42>
 800f568:	466a      	mov	r2, sp
 800f56a:	f001 f917 	bl	801079c <_fstat_r>
 800f56e:	2800      	cmp	r0, #0
 800f570:	dbf1      	blt.n	800f556 <__swhatbuf_r+0x12>
 800f572:	9a01      	ldr	r2, [sp, #4]
 800f574:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f578:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f57c:	425a      	negs	r2, r3
 800f57e:	415a      	adcs	r2, r3
 800f580:	602a      	str	r2, [r5, #0]
 800f582:	e7ee      	b.n	800f562 <__swhatbuf_r+0x1e>
 800f584:	2340      	movs	r3, #64	; 0x40
 800f586:	2000      	movs	r0, #0
 800f588:	6023      	str	r3, [r4, #0]
 800f58a:	b016      	add	sp, #88	; 0x58
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f590 <__smakebuf_r>:
 800f590:	898b      	ldrh	r3, [r1, #12]
 800f592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f594:	079d      	lsls	r5, r3, #30
 800f596:	4606      	mov	r6, r0
 800f598:	460c      	mov	r4, r1
 800f59a:	d507      	bpl.n	800f5ac <__smakebuf_r+0x1c>
 800f59c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f5a0:	6023      	str	r3, [r4, #0]
 800f5a2:	6123      	str	r3, [r4, #16]
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	6163      	str	r3, [r4, #20]
 800f5a8:	b002      	add	sp, #8
 800f5aa:	bd70      	pop	{r4, r5, r6, pc}
 800f5ac:	ab01      	add	r3, sp, #4
 800f5ae:	466a      	mov	r2, sp
 800f5b0:	f7ff ffc8 	bl	800f544 <__swhatbuf_r>
 800f5b4:	9900      	ldr	r1, [sp, #0]
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	f000 f895 	bl	800f6e8 <_malloc_r>
 800f5be:	b948      	cbnz	r0, 800f5d4 <__smakebuf_r+0x44>
 800f5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5c4:	059a      	lsls	r2, r3, #22
 800f5c6:	d4ef      	bmi.n	800f5a8 <__smakebuf_r+0x18>
 800f5c8:	f023 0303 	bic.w	r3, r3, #3
 800f5cc:	f043 0302 	orr.w	r3, r3, #2
 800f5d0:	81a3      	strh	r3, [r4, #12]
 800f5d2:	e7e3      	b.n	800f59c <__smakebuf_r+0xc>
 800f5d4:	4b0d      	ldr	r3, [pc, #52]	; (800f60c <__smakebuf_r+0x7c>)
 800f5d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	6020      	str	r0, [r4, #0]
 800f5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e0:	81a3      	strh	r3, [r4, #12]
 800f5e2:	9b00      	ldr	r3, [sp, #0]
 800f5e4:	6163      	str	r3, [r4, #20]
 800f5e6:	9b01      	ldr	r3, [sp, #4]
 800f5e8:	6120      	str	r0, [r4, #16]
 800f5ea:	b15b      	cbz	r3, 800f604 <__smakebuf_r+0x74>
 800f5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5f0:	4630      	mov	r0, r6
 800f5f2:	f001 f8e5 	bl	80107c0 <_isatty_r>
 800f5f6:	b128      	cbz	r0, 800f604 <__smakebuf_r+0x74>
 800f5f8:	89a3      	ldrh	r3, [r4, #12]
 800f5fa:	f023 0303 	bic.w	r3, r3, #3
 800f5fe:	f043 0301 	orr.w	r3, r3, #1
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	89a0      	ldrh	r0, [r4, #12]
 800f606:	4305      	orrs	r5, r0
 800f608:	81a5      	strh	r5, [r4, #12]
 800f60a:	e7cd      	b.n	800f5a8 <__smakebuf_r+0x18>
 800f60c:	0800f379 	.word	0x0800f379

0800f610 <_free_r>:
 800f610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f612:	2900      	cmp	r1, #0
 800f614:	d044      	beq.n	800f6a0 <_free_r+0x90>
 800f616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f61a:	9001      	str	r0, [sp, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f1a1 0404 	sub.w	r4, r1, #4
 800f622:	bfb8      	it	lt
 800f624:	18e4      	addlt	r4, r4, r3
 800f626:	f001 f8db 	bl	80107e0 <__malloc_lock>
 800f62a:	4a1e      	ldr	r2, [pc, #120]	; (800f6a4 <_free_r+0x94>)
 800f62c:	9801      	ldr	r0, [sp, #4]
 800f62e:	6813      	ldr	r3, [r2, #0]
 800f630:	b933      	cbnz	r3, 800f640 <_free_r+0x30>
 800f632:	6063      	str	r3, [r4, #4]
 800f634:	6014      	str	r4, [r2, #0]
 800f636:	b003      	add	sp, #12
 800f638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f63c:	f001 b8d6 	b.w	80107ec <__malloc_unlock>
 800f640:	42a3      	cmp	r3, r4
 800f642:	d908      	bls.n	800f656 <_free_r+0x46>
 800f644:	6825      	ldr	r5, [r4, #0]
 800f646:	1961      	adds	r1, r4, r5
 800f648:	428b      	cmp	r3, r1
 800f64a:	bf01      	itttt	eq
 800f64c:	6819      	ldreq	r1, [r3, #0]
 800f64e:	685b      	ldreq	r3, [r3, #4]
 800f650:	1949      	addeq	r1, r1, r5
 800f652:	6021      	streq	r1, [r4, #0]
 800f654:	e7ed      	b.n	800f632 <_free_r+0x22>
 800f656:	461a      	mov	r2, r3
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	b10b      	cbz	r3, 800f660 <_free_r+0x50>
 800f65c:	42a3      	cmp	r3, r4
 800f65e:	d9fa      	bls.n	800f656 <_free_r+0x46>
 800f660:	6811      	ldr	r1, [r2, #0]
 800f662:	1855      	adds	r5, r2, r1
 800f664:	42a5      	cmp	r5, r4
 800f666:	d10b      	bne.n	800f680 <_free_r+0x70>
 800f668:	6824      	ldr	r4, [r4, #0]
 800f66a:	4421      	add	r1, r4
 800f66c:	1854      	adds	r4, r2, r1
 800f66e:	42a3      	cmp	r3, r4
 800f670:	6011      	str	r1, [r2, #0]
 800f672:	d1e0      	bne.n	800f636 <_free_r+0x26>
 800f674:	681c      	ldr	r4, [r3, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	6053      	str	r3, [r2, #4]
 800f67a:	4421      	add	r1, r4
 800f67c:	6011      	str	r1, [r2, #0]
 800f67e:	e7da      	b.n	800f636 <_free_r+0x26>
 800f680:	d902      	bls.n	800f688 <_free_r+0x78>
 800f682:	230c      	movs	r3, #12
 800f684:	6003      	str	r3, [r0, #0]
 800f686:	e7d6      	b.n	800f636 <_free_r+0x26>
 800f688:	6825      	ldr	r5, [r4, #0]
 800f68a:	1961      	adds	r1, r4, r5
 800f68c:	428b      	cmp	r3, r1
 800f68e:	bf04      	itt	eq
 800f690:	6819      	ldreq	r1, [r3, #0]
 800f692:	685b      	ldreq	r3, [r3, #4]
 800f694:	6063      	str	r3, [r4, #4]
 800f696:	bf04      	itt	eq
 800f698:	1949      	addeq	r1, r1, r5
 800f69a:	6021      	streq	r1, [r4, #0]
 800f69c:	6054      	str	r4, [r2, #4]
 800f69e:	e7ca      	b.n	800f636 <_free_r+0x26>
 800f6a0:	b003      	add	sp, #12
 800f6a2:	bd30      	pop	{r4, r5, pc}
 800f6a4:	24001480 	.word	0x24001480

0800f6a8 <sbrk_aligned>:
 800f6a8:	b570      	push	{r4, r5, r6, lr}
 800f6aa:	4e0e      	ldr	r6, [pc, #56]	; (800f6e4 <sbrk_aligned+0x3c>)
 800f6ac:	460c      	mov	r4, r1
 800f6ae:	6831      	ldr	r1, [r6, #0]
 800f6b0:	4605      	mov	r5, r0
 800f6b2:	b911      	cbnz	r1, 800f6ba <sbrk_aligned+0x12>
 800f6b4:	f000 fef8 	bl	80104a8 <_sbrk_r>
 800f6b8:	6030      	str	r0, [r6, #0]
 800f6ba:	4621      	mov	r1, r4
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f000 fef3 	bl	80104a8 <_sbrk_r>
 800f6c2:	1c43      	adds	r3, r0, #1
 800f6c4:	d00a      	beq.n	800f6dc <sbrk_aligned+0x34>
 800f6c6:	1cc4      	adds	r4, r0, #3
 800f6c8:	f024 0403 	bic.w	r4, r4, #3
 800f6cc:	42a0      	cmp	r0, r4
 800f6ce:	d007      	beq.n	800f6e0 <sbrk_aligned+0x38>
 800f6d0:	1a21      	subs	r1, r4, r0
 800f6d2:	4628      	mov	r0, r5
 800f6d4:	f000 fee8 	bl	80104a8 <_sbrk_r>
 800f6d8:	3001      	adds	r0, #1
 800f6da:	d101      	bne.n	800f6e0 <sbrk_aligned+0x38>
 800f6dc:	f04f 34ff 	mov.w	r4, #4294967295
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	bd70      	pop	{r4, r5, r6, pc}
 800f6e4:	24001484 	.word	0x24001484

0800f6e8 <_malloc_r>:
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	1ccd      	adds	r5, r1, #3
 800f6ee:	f025 0503 	bic.w	r5, r5, #3
 800f6f2:	3508      	adds	r5, #8
 800f6f4:	2d0c      	cmp	r5, #12
 800f6f6:	bf38      	it	cc
 800f6f8:	250c      	movcc	r5, #12
 800f6fa:	2d00      	cmp	r5, #0
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	db01      	blt.n	800f704 <_malloc_r+0x1c>
 800f700:	42a9      	cmp	r1, r5
 800f702:	d905      	bls.n	800f710 <_malloc_r+0x28>
 800f704:	230c      	movs	r3, #12
 800f706:	603b      	str	r3, [r7, #0]
 800f708:	2600      	movs	r6, #0
 800f70a:	4630      	mov	r0, r6
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	4e2e      	ldr	r6, [pc, #184]	; (800f7cc <_malloc_r+0xe4>)
 800f712:	f001 f865 	bl	80107e0 <__malloc_lock>
 800f716:	6833      	ldr	r3, [r6, #0]
 800f718:	461c      	mov	r4, r3
 800f71a:	bb34      	cbnz	r4, 800f76a <_malloc_r+0x82>
 800f71c:	4629      	mov	r1, r5
 800f71e:	4638      	mov	r0, r7
 800f720:	f7ff ffc2 	bl	800f6a8 <sbrk_aligned>
 800f724:	1c43      	adds	r3, r0, #1
 800f726:	4604      	mov	r4, r0
 800f728:	d14d      	bne.n	800f7c6 <_malloc_r+0xde>
 800f72a:	6834      	ldr	r4, [r6, #0]
 800f72c:	4626      	mov	r6, r4
 800f72e:	2e00      	cmp	r6, #0
 800f730:	d140      	bne.n	800f7b4 <_malloc_r+0xcc>
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	4631      	mov	r1, r6
 800f736:	4638      	mov	r0, r7
 800f738:	eb04 0803 	add.w	r8, r4, r3
 800f73c:	f000 feb4 	bl	80104a8 <_sbrk_r>
 800f740:	4580      	cmp	r8, r0
 800f742:	d13a      	bne.n	800f7ba <_malloc_r+0xd2>
 800f744:	6821      	ldr	r1, [r4, #0]
 800f746:	3503      	adds	r5, #3
 800f748:	1a6d      	subs	r5, r5, r1
 800f74a:	f025 0503 	bic.w	r5, r5, #3
 800f74e:	3508      	adds	r5, #8
 800f750:	2d0c      	cmp	r5, #12
 800f752:	bf38      	it	cc
 800f754:	250c      	movcc	r5, #12
 800f756:	4629      	mov	r1, r5
 800f758:	4638      	mov	r0, r7
 800f75a:	f7ff ffa5 	bl	800f6a8 <sbrk_aligned>
 800f75e:	3001      	adds	r0, #1
 800f760:	d02b      	beq.n	800f7ba <_malloc_r+0xd2>
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	442b      	add	r3, r5
 800f766:	6023      	str	r3, [r4, #0]
 800f768:	e00e      	b.n	800f788 <_malloc_r+0xa0>
 800f76a:	6822      	ldr	r2, [r4, #0]
 800f76c:	1b52      	subs	r2, r2, r5
 800f76e:	d41e      	bmi.n	800f7ae <_malloc_r+0xc6>
 800f770:	2a0b      	cmp	r2, #11
 800f772:	d916      	bls.n	800f7a2 <_malloc_r+0xba>
 800f774:	1961      	adds	r1, r4, r5
 800f776:	42a3      	cmp	r3, r4
 800f778:	6025      	str	r5, [r4, #0]
 800f77a:	bf18      	it	ne
 800f77c:	6059      	strne	r1, [r3, #4]
 800f77e:	6863      	ldr	r3, [r4, #4]
 800f780:	bf08      	it	eq
 800f782:	6031      	streq	r1, [r6, #0]
 800f784:	5162      	str	r2, [r4, r5]
 800f786:	604b      	str	r3, [r1, #4]
 800f788:	4638      	mov	r0, r7
 800f78a:	f104 060b 	add.w	r6, r4, #11
 800f78e:	f001 f82d 	bl	80107ec <__malloc_unlock>
 800f792:	f026 0607 	bic.w	r6, r6, #7
 800f796:	1d23      	adds	r3, r4, #4
 800f798:	1af2      	subs	r2, r6, r3
 800f79a:	d0b6      	beq.n	800f70a <_malloc_r+0x22>
 800f79c:	1b9b      	subs	r3, r3, r6
 800f79e:	50a3      	str	r3, [r4, r2]
 800f7a0:	e7b3      	b.n	800f70a <_malloc_r+0x22>
 800f7a2:	6862      	ldr	r2, [r4, #4]
 800f7a4:	42a3      	cmp	r3, r4
 800f7a6:	bf0c      	ite	eq
 800f7a8:	6032      	streq	r2, [r6, #0]
 800f7aa:	605a      	strne	r2, [r3, #4]
 800f7ac:	e7ec      	b.n	800f788 <_malloc_r+0xa0>
 800f7ae:	4623      	mov	r3, r4
 800f7b0:	6864      	ldr	r4, [r4, #4]
 800f7b2:	e7b2      	b.n	800f71a <_malloc_r+0x32>
 800f7b4:	4634      	mov	r4, r6
 800f7b6:	6876      	ldr	r6, [r6, #4]
 800f7b8:	e7b9      	b.n	800f72e <_malloc_r+0x46>
 800f7ba:	230c      	movs	r3, #12
 800f7bc:	603b      	str	r3, [r7, #0]
 800f7be:	4638      	mov	r0, r7
 800f7c0:	f001 f814 	bl	80107ec <__malloc_unlock>
 800f7c4:	e7a1      	b.n	800f70a <_malloc_r+0x22>
 800f7c6:	6025      	str	r5, [r4, #0]
 800f7c8:	e7de      	b.n	800f788 <_malloc_r+0xa0>
 800f7ca:	bf00      	nop
 800f7cc:	24001480 	.word	0x24001480

0800f7d0 <_sungetc_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	1c4b      	adds	r3, r1, #1
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	d103      	bne.n	800f7e0 <_sungetc_r+0x10>
 800f7d8:	f04f 35ff 	mov.w	r5, #4294967295
 800f7dc:	4628      	mov	r0, r5
 800f7de:	bd38      	pop	{r3, r4, r5, pc}
 800f7e0:	8993      	ldrh	r3, [r2, #12]
 800f7e2:	f023 0320 	bic.w	r3, r3, #32
 800f7e6:	8193      	strh	r3, [r2, #12]
 800f7e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7ea:	6852      	ldr	r2, [r2, #4]
 800f7ec:	b2cd      	uxtb	r5, r1
 800f7ee:	b18b      	cbz	r3, 800f814 <_sungetc_r+0x44>
 800f7f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	dd08      	ble.n	800f808 <_sungetc_r+0x38>
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	1e5a      	subs	r2, r3, #1
 800f7fa:	6022      	str	r2, [r4, #0]
 800f7fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f800:	6863      	ldr	r3, [r4, #4]
 800f802:	3301      	adds	r3, #1
 800f804:	6063      	str	r3, [r4, #4]
 800f806:	e7e9      	b.n	800f7dc <_sungetc_r+0xc>
 800f808:	4621      	mov	r1, r4
 800f80a:	f000 ff8d 	bl	8010728 <__submore>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d0f1      	beq.n	800f7f6 <_sungetc_r+0x26>
 800f812:	e7e1      	b.n	800f7d8 <_sungetc_r+0x8>
 800f814:	6921      	ldr	r1, [r4, #16]
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	b151      	cbz	r1, 800f830 <_sungetc_r+0x60>
 800f81a:	4299      	cmp	r1, r3
 800f81c:	d208      	bcs.n	800f830 <_sungetc_r+0x60>
 800f81e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f822:	42a9      	cmp	r1, r5
 800f824:	d104      	bne.n	800f830 <_sungetc_r+0x60>
 800f826:	3b01      	subs	r3, #1
 800f828:	3201      	adds	r2, #1
 800f82a:	6023      	str	r3, [r4, #0]
 800f82c:	6062      	str	r2, [r4, #4]
 800f82e:	e7d5      	b.n	800f7dc <_sungetc_r+0xc>
 800f830:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f838:	6363      	str	r3, [r4, #52]	; 0x34
 800f83a:	2303      	movs	r3, #3
 800f83c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f83e:	4623      	mov	r3, r4
 800f840:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	2301      	movs	r3, #1
 800f848:	e7dc      	b.n	800f804 <_sungetc_r+0x34>

0800f84a <__ssrefill_r>:
 800f84a:	b510      	push	{r4, lr}
 800f84c:	460c      	mov	r4, r1
 800f84e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f850:	b169      	cbz	r1, 800f86e <__ssrefill_r+0x24>
 800f852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f856:	4299      	cmp	r1, r3
 800f858:	d001      	beq.n	800f85e <__ssrefill_r+0x14>
 800f85a:	f7ff fed9 	bl	800f610 <_free_r>
 800f85e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f860:	6063      	str	r3, [r4, #4]
 800f862:	2000      	movs	r0, #0
 800f864:	6360      	str	r0, [r4, #52]	; 0x34
 800f866:	b113      	cbz	r3, 800f86e <__ssrefill_r+0x24>
 800f868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f86a:	6023      	str	r3, [r4, #0]
 800f86c:	bd10      	pop	{r4, pc}
 800f86e:	6923      	ldr	r3, [r4, #16]
 800f870:	6023      	str	r3, [r4, #0]
 800f872:	2300      	movs	r3, #0
 800f874:	6063      	str	r3, [r4, #4]
 800f876:	89a3      	ldrh	r3, [r4, #12]
 800f878:	f043 0320 	orr.w	r3, r3, #32
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	f04f 30ff 	mov.w	r0, #4294967295
 800f882:	e7f3      	b.n	800f86c <__ssrefill_r+0x22>

0800f884 <__ssvfiscanf_r>:
 800f884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f888:	460c      	mov	r4, r1
 800f88a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f88e:	2100      	movs	r1, #0
 800f890:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f894:	49a6      	ldr	r1, [pc, #664]	; (800fb30 <__ssvfiscanf_r+0x2ac>)
 800f896:	91a0      	str	r1, [sp, #640]	; 0x280
 800f898:	f10d 0804 	add.w	r8, sp, #4
 800f89c:	49a5      	ldr	r1, [pc, #660]	; (800fb34 <__ssvfiscanf_r+0x2b0>)
 800f89e:	4fa6      	ldr	r7, [pc, #664]	; (800fb38 <__ssvfiscanf_r+0x2b4>)
 800f8a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fb3c <__ssvfiscanf_r+0x2b8>
 800f8a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f8a8:	4606      	mov	r6, r0
 800f8aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	7813      	ldrb	r3, [r2, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 815a 	beq.w	800fb6a <__ssvfiscanf_r+0x2e6>
 800f8b6:	5dd9      	ldrb	r1, [r3, r7]
 800f8b8:	f011 0108 	ands.w	r1, r1, #8
 800f8bc:	f102 0501 	add.w	r5, r2, #1
 800f8c0:	d019      	beq.n	800f8f6 <__ssvfiscanf_r+0x72>
 800f8c2:	6863      	ldr	r3, [r4, #4]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	dd0f      	ble.n	800f8e8 <__ssvfiscanf_r+0x64>
 800f8c8:	6823      	ldr	r3, [r4, #0]
 800f8ca:	781a      	ldrb	r2, [r3, #0]
 800f8cc:	5cba      	ldrb	r2, [r7, r2]
 800f8ce:	0712      	lsls	r2, r2, #28
 800f8d0:	d401      	bmi.n	800f8d6 <__ssvfiscanf_r+0x52>
 800f8d2:	462a      	mov	r2, r5
 800f8d4:	e7eb      	b.n	800f8ae <__ssvfiscanf_r+0x2a>
 800f8d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f8d8:	3201      	adds	r2, #1
 800f8da:	9245      	str	r2, [sp, #276]	; 0x114
 800f8dc:	6862      	ldr	r2, [r4, #4]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	3a01      	subs	r2, #1
 800f8e2:	6062      	str	r2, [r4, #4]
 800f8e4:	6023      	str	r3, [r4, #0]
 800f8e6:	e7ec      	b.n	800f8c2 <__ssvfiscanf_r+0x3e>
 800f8e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f8ea:	4621      	mov	r1, r4
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	4798      	blx	r3
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	d0e9      	beq.n	800f8c8 <__ssvfiscanf_r+0x44>
 800f8f4:	e7ed      	b.n	800f8d2 <__ssvfiscanf_r+0x4e>
 800f8f6:	2b25      	cmp	r3, #37	; 0x25
 800f8f8:	d012      	beq.n	800f920 <__ssvfiscanf_r+0x9c>
 800f8fa:	469a      	mov	sl, r3
 800f8fc:	6863      	ldr	r3, [r4, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f340 8091 	ble.w	800fa26 <__ssvfiscanf_r+0x1a2>
 800f904:	6822      	ldr	r2, [r4, #0]
 800f906:	7813      	ldrb	r3, [r2, #0]
 800f908:	4553      	cmp	r3, sl
 800f90a:	f040 812e 	bne.w	800fb6a <__ssvfiscanf_r+0x2e6>
 800f90e:	6863      	ldr	r3, [r4, #4]
 800f910:	3b01      	subs	r3, #1
 800f912:	6063      	str	r3, [r4, #4]
 800f914:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f916:	3201      	adds	r2, #1
 800f918:	3301      	adds	r3, #1
 800f91a:	6022      	str	r2, [r4, #0]
 800f91c:	9345      	str	r3, [sp, #276]	; 0x114
 800f91e:	e7d8      	b.n	800f8d2 <__ssvfiscanf_r+0x4e>
 800f920:	9141      	str	r1, [sp, #260]	; 0x104
 800f922:	9143      	str	r1, [sp, #268]	; 0x10c
 800f924:	7853      	ldrb	r3, [r2, #1]
 800f926:	2b2a      	cmp	r3, #42	; 0x2a
 800f928:	bf02      	ittt	eq
 800f92a:	2310      	moveq	r3, #16
 800f92c:	1c95      	addeq	r5, r2, #2
 800f92e:	9341      	streq	r3, [sp, #260]	; 0x104
 800f930:	220a      	movs	r2, #10
 800f932:	46aa      	mov	sl, r5
 800f934:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f938:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f93c:	2b09      	cmp	r3, #9
 800f93e:	d91d      	bls.n	800f97c <__ssvfiscanf_r+0xf8>
 800f940:	487e      	ldr	r0, [pc, #504]	; (800fb3c <__ssvfiscanf_r+0x2b8>)
 800f942:	2203      	movs	r2, #3
 800f944:	f7f0 fcfc 	bl	8000340 <memchr>
 800f948:	b140      	cbz	r0, 800f95c <__ssvfiscanf_r+0xd8>
 800f94a:	2301      	movs	r3, #1
 800f94c:	eba0 0009 	sub.w	r0, r0, r9
 800f950:	fa03 f000 	lsl.w	r0, r3, r0
 800f954:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f956:	4318      	orrs	r0, r3
 800f958:	9041      	str	r0, [sp, #260]	; 0x104
 800f95a:	4655      	mov	r5, sl
 800f95c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f960:	2b78      	cmp	r3, #120	; 0x78
 800f962:	d806      	bhi.n	800f972 <__ssvfiscanf_r+0xee>
 800f964:	2b57      	cmp	r3, #87	; 0x57
 800f966:	d810      	bhi.n	800f98a <__ssvfiscanf_r+0x106>
 800f968:	2b25      	cmp	r3, #37	; 0x25
 800f96a:	d0c6      	beq.n	800f8fa <__ssvfiscanf_r+0x76>
 800f96c:	d856      	bhi.n	800fa1c <__ssvfiscanf_r+0x198>
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d064      	beq.n	800fa3c <__ssvfiscanf_r+0x1b8>
 800f972:	2303      	movs	r3, #3
 800f974:	9347      	str	r3, [sp, #284]	; 0x11c
 800f976:	230a      	movs	r3, #10
 800f978:	9342      	str	r3, [sp, #264]	; 0x108
 800f97a:	e071      	b.n	800fa60 <__ssvfiscanf_r+0x1dc>
 800f97c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f97e:	fb02 1103 	mla	r1, r2, r3, r1
 800f982:	3930      	subs	r1, #48	; 0x30
 800f984:	9143      	str	r1, [sp, #268]	; 0x10c
 800f986:	4655      	mov	r5, sl
 800f988:	e7d3      	b.n	800f932 <__ssvfiscanf_r+0xae>
 800f98a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f98e:	2a20      	cmp	r2, #32
 800f990:	d8ef      	bhi.n	800f972 <__ssvfiscanf_r+0xee>
 800f992:	a101      	add	r1, pc, #4	; (adr r1, 800f998 <__ssvfiscanf_r+0x114>)
 800f994:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f998:	0800fa4b 	.word	0x0800fa4b
 800f99c:	0800f973 	.word	0x0800f973
 800f9a0:	0800f973 	.word	0x0800f973
 800f9a4:	0800faa9 	.word	0x0800faa9
 800f9a8:	0800f973 	.word	0x0800f973
 800f9ac:	0800f973 	.word	0x0800f973
 800f9b0:	0800f973 	.word	0x0800f973
 800f9b4:	0800f973 	.word	0x0800f973
 800f9b8:	0800f973 	.word	0x0800f973
 800f9bc:	0800f973 	.word	0x0800f973
 800f9c0:	0800f973 	.word	0x0800f973
 800f9c4:	0800fabf 	.word	0x0800fabf
 800f9c8:	0800fa95 	.word	0x0800fa95
 800f9cc:	0800fa23 	.word	0x0800fa23
 800f9d0:	0800fa23 	.word	0x0800fa23
 800f9d4:	0800fa23 	.word	0x0800fa23
 800f9d8:	0800f973 	.word	0x0800f973
 800f9dc:	0800fa99 	.word	0x0800fa99
 800f9e0:	0800f973 	.word	0x0800f973
 800f9e4:	0800f973 	.word	0x0800f973
 800f9e8:	0800f973 	.word	0x0800f973
 800f9ec:	0800f973 	.word	0x0800f973
 800f9f0:	0800facf 	.word	0x0800facf
 800f9f4:	0800faa1 	.word	0x0800faa1
 800f9f8:	0800fa43 	.word	0x0800fa43
 800f9fc:	0800f973 	.word	0x0800f973
 800fa00:	0800f973 	.word	0x0800f973
 800fa04:	0800facb 	.word	0x0800facb
 800fa08:	0800f973 	.word	0x0800f973
 800fa0c:	0800fa95 	.word	0x0800fa95
 800fa10:	0800f973 	.word	0x0800f973
 800fa14:	0800f973 	.word	0x0800f973
 800fa18:	0800fa4b 	.word	0x0800fa4b
 800fa1c:	3b45      	subs	r3, #69	; 0x45
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d8a7      	bhi.n	800f972 <__ssvfiscanf_r+0xee>
 800fa22:	2305      	movs	r3, #5
 800fa24:	e01b      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800fa26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa28:	4621      	mov	r1, r4
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	4798      	blx	r3
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f43f af68 	beq.w	800f904 <__ssvfiscanf_r+0x80>
 800fa34:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f040 808d 	bne.w	800fb56 <__ssvfiscanf_r+0x2d2>
 800fa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa40:	e08f      	b.n	800fb62 <__ssvfiscanf_r+0x2de>
 800fa42:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fa44:	f042 0220 	orr.w	r2, r2, #32
 800fa48:	9241      	str	r2, [sp, #260]	; 0x104
 800fa4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fa4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa50:	9241      	str	r2, [sp, #260]	; 0x104
 800fa52:	2210      	movs	r2, #16
 800fa54:	2b6f      	cmp	r3, #111	; 0x6f
 800fa56:	9242      	str	r2, [sp, #264]	; 0x108
 800fa58:	bf34      	ite	cc
 800fa5a:	2303      	movcc	r3, #3
 800fa5c:	2304      	movcs	r3, #4
 800fa5e:	9347      	str	r3, [sp, #284]	; 0x11c
 800fa60:	6863      	ldr	r3, [r4, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	dd42      	ble.n	800faec <__ssvfiscanf_r+0x268>
 800fa66:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa68:	0659      	lsls	r1, r3, #25
 800fa6a:	d404      	bmi.n	800fa76 <__ssvfiscanf_r+0x1f2>
 800fa6c:	6823      	ldr	r3, [r4, #0]
 800fa6e:	781a      	ldrb	r2, [r3, #0]
 800fa70:	5cba      	ldrb	r2, [r7, r2]
 800fa72:	0712      	lsls	r2, r2, #28
 800fa74:	d441      	bmi.n	800fafa <__ssvfiscanf_r+0x276>
 800fa76:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fa78:	2b02      	cmp	r3, #2
 800fa7a:	dc50      	bgt.n	800fb1e <__ssvfiscanf_r+0x29a>
 800fa7c:	466b      	mov	r3, sp
 800fa7e:	4622      	mov	r2, r4
 800fa80:	a941      	add	r1, sp, #260	; 0x104
 800fa82:	4630      	mov	r0, r6
 800fa84:	f000 fb64 	bl	8010150 <_scanf_chars>
 800fa88:	2801      	cmp	r0, #1
 800fa8a:	d06e      	beq.n	800fb6a <__ssvfiscanf_r+0x2e6>
 800fa8c:	2802      	cmp	r0, #2
 800fa8e:	f47f af20 	bne.w	800f8d2 <__ssvfiscanf_r+0x4e>
 800fa92:	e7cf      	b.n	800fa34 <__ssvfiscanf_r+0x1b0>
 800fa94:	220a      	movs	r2, #10
 800fa96:	e7dd      	b.n	800fa54 <__ssvfiscanf_r+0x1d0>
 800fa98:	2300      	movs	r3, #0
 800fa9a:	9342      	str	r3, [sp, #264]	; 0x108
 800fa9c:	2303      	movs	r3, #3
 800fa9e:	e7de      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800faa0:	2308      	movs	r3, #8
 800faa2:	9342      	str	r3, [sp, #264]	; 0x108
 800faa4:	2304      	movs	r3, #4
 800faa6:	e7da      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800faa8:	4629      	mov	r1, r5
 800faaa:	4640      	mov	r0, r8
 800faac:	f000 fd0c 	bl	80104c8 <__sccl>
 800fab0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fab6:	9341      	str	r3, [sp, #260]	; 0x104
 800fab8:	4605      	mov	r5, r0
 800faba:	2301      	movs	r3, #1
 800fabc:	e7cf      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800fabe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac4:	9341      	str	r3, [sp, #260]	; 0x104
 800fac6:	2300      	movs	r3, #0
 800fac8:	e7c9      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800faca:	2302      	movs	r3, #2
 800facc:	e7c7      	b.n	800fa5e <__ssvfiscanf_r+0x1da>
 800face:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fad0:	06c3      	lsls	r3, r0, #27
 800fad2:	f53f aefe 	bmi.w	800f8d2 <__ssvfiscanf_r+0x4e>
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fada:	1d19      	adds	r1, r3, #4
 800fadc:	9100      	str	r1, [sp, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	f010 0f01 	tst.w	r0, #1
 800fae4:	bf14      	ite	ne
 800fae6:	801a      	strhne	r2, [r3, #0]
 800fae8:	601a      	streq	r2, [r3, #0]
 800faea:	e6f2      	b.n	800f8d2 <__ssvfiscanf_r+0x4e>
 800faec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800faee:	4621      	mov	r1, r4
 800faf0:	4630      	mov	r0, r6
 800faf2:	4798      	blx	r3
 800faf4:	2800      	cmp	r0, #0
 800faf6:	d0b6      	beq.n	800fa66 <__ssvfiscanf_r+0x1e2>
 800faf8:	e79c      	b.n	800fa34 <__ssvfiscanf_r+0x1b0>
 800fafa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fafc:	3201      	adds	r2, #1
 800fafe:	9245      	str	r2, [sp, #276]	; 0x114
 800fb00:	6862      	ldr	r2, [r4, #4]
 800fb02:	3a01      	subs	r2, #1
 800fb04:	2a00      	cmp	r2, #0
 800fb06:	6062      	str	r2, [r4, #4]
 800fb08:	dd02      	ble.n	800fb10 <__ssvfiscanf_r+0x28c>
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	6023      	str	r3, [r4, #0]
 800fb0e:	e7ad      	b.n	800fa6c <__ssvfiscanf_r+0x1e8>
 800fb10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb12:	4621      	mov	r1, r4
 800fb14:	4630      	mov	r0, r6
 800fb16:	4798      	blx	r3
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d0a7      	beq.n	800fa6c <__ssvfiscanf_r+0x1e8>
 800fb1c:	e78a      	b.n	800fa34 <__ssvfiscanf_r+0x1b0>
 800fb1e:	2b04      	cmp	r3, #4
 800fb20:	dc0e      	bgt.n	800fb40 <__ssvfiscanf_r+0x2bc>
 800fb22:	466b      	mov	r3, sp
 800fb24:	4622      	mov	r2, r4
 800fb26:	a941      	add	r1, sp, #260	; 0x104
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f000 fb6b 	bl	8010204 <_scanf_i>
 800fb2e:	e7ab      	b.n	800fa88 <__ssvfiscanf_r+0x204>
 800fb30:	0800f7d1 	.word	0x0800f7d1
 800fb34:	0800f84b 	.word	0x0800f84b
 800fb38:	08010c63 	.word	0x08010c63
 800fb3c:	08010c14 	.word	0x08010c14
 800fb40:	4b0b      	ldr	r3, [pc, #44]	; (800fb70 <__ssvfiscanf_r+0x2ec>)
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	f43f aec5 	beq.w	800f8d2 <__ssvfiscanf_r+0x4e>
 800fb48:	466b      	mov	r3, sp
 800fb4a:	4622      	mov	r2, r4
 800fb4c:	a941      	add	r1, sp, #260	; 0x104
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f3af 8000 	nop.w
 800fb54:	e798      	b.n	800fa88 <__ssvfiscanf_r+0x204>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fb5c:	bf18      	it	ne
 800fb5e:	f04f 30ff 	movne.w	r0, #4294967295
 800fb62:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800fb66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fb6c:	e7f9      	b.n	800fb62 <__ssvfiscanf_r+0x2de>
 800fb6e:	bf00      	nop
 800fb70:	00000000 	.word	0x00000000

0800fb74 <__sfputc_r>:
 800fb74:	6893      	ldr	r3, [r2, #8]
 800fb76:	3b01      	subs	r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	b410      	push	{r4}
 800fb7c:	6093      	str	r3, [r2, #8]
 800fb7e:	da08      	bge.n	800fb92 <__sfputc_r+0x1e>
 800fb80:	6994      	ldr	r4, [r2, #24]
 800fb82:	42a3      	cmp	r3, r4
 800fb84:	db01      	blt.n	800fb8a <__sfputc_r+0x16>
 800fb86:	290a      	cmp	r1, #10
 800fb88:	d103      	bne.n	800fb92 <__sfputc_r+0x1e>
 800fb8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb8e:	f7ff ba2b 	b.w	800efe8 <__swbuf_r>
 800fb92:	6813      	ldr	r3, [r2, #0]
 800fb94:	1c58      	adds	r0, r3, #1
 800fb96:	6010      	str	r0, [r2, #0]
 800fb98:	7019      	strb	r1, [r3, #0]
 800fb9a:	4608      	mov	r0, r1
 800fb9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba0:	4770      	bx	lr

0800fba2 <__sfputs_r>:
 800fba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba4:	4606      	mov	r6, r0
 800fba6:	460f      	mov	r7, r1
 800fba8:	4614      	mov	r4, r2
 800fbaa:	18d5      	adds	r5, r2, r3
 800fbac:	42ac      	cmp	r4, r5
 800fbae:	d101      	bne.n	800fbb4 <__sfputs_r+0x12>
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e007      	b.n	800fbc4 <__sfputs_r+0x22>
 800fbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb8:	463a      	mov	r2, r7
 800fbba:	4630      	mov	r0, r6
 800fbbc:	f7ff ffda 	bl	800fb74 <__sfputc_r>
 800fbc0:	1c43      	adds	r3, r0, #1
 800fbc2:	d1f3      	bne.n	800fbac <__sfputs_r+0xa>
 800fbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbc8 <_vfiprintf_r>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	460d      	mov	r5, r1
 800fbce:	b09d      	sub	sp, #116	; 0x74
 800fbd0:	4614      	mov	r4, r2
 800fbd2:	4698      	mov	r8, r3
 800fbd4:	4606      	mov	r6, r0
 800fbd6:	b118      	cbz	r0, 800fbe0 <_vfiprintf_r+0x18>
 800fbd8:	6983      	ldr	r3, [r0, #24]
 800fbda:	b90b      	cbnz	r3, 800fbe0 <_vfiprintf_r+0x18>
 800fbdc:	f7ff fc00 	bl	800f3e0 <__sinit>
 800fbe0:	4b89      	ldr	r3, [pc, #548]	; (800fe08 <_vfiprintf_r+0x240>)
 800fbe2:	429d      	cmp	r5, r3
 800fbe4:	d11b      	bne.n	800fc1e <_vfiprintf_r+0x56>
 800fbe6:	6875      	ldr	r5, [r6, #4]
 800fbe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbea:	07d9      	lsls	r1, r3, #31
 800fbec:	d405      	bmi.n	800fbfa <_vfiprintf_r+0x32>
 800fbee:	89ab      	ldrh	r3, [r5, #12]
 800fbf0:	059a      	lsls	r2, r3, #22
 800fbf2:	d402      	bmi.n	800fbfa <_vfiprintf_r+0x32>
 800fbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf6:	f7ff fc91 	bl	800f51c <__retarget_lock_acquire_recursive>
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	071b      	lsls	r3, r3, #28
 800fbfe:	d501      	bpl.n	800fc04 <_vfiprintf_r+0x3c>
 800fc00:	692b      	ldr	r3, [r5, #16]
 800fc02:	b9eb      	cbnz	r3, 800fc40 <_vfiprintf_r+0x78>
 800fc04:	4629      	mov	r1, r5
 800fc06:	4630      	mov	r0, r6
 800fc08:	f7ff fa52 	bl	800f0b0 <__swsetup_r>
 800fc0c:	b1c0      	cbz	r0, 800fc40 <_vfiprintf_r+0x78>
 800fc0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc10:	07dc      	lsls	r4, r3, #31
 800fc12:	d50e      	bpl.n	800fc32 <_vfiprintf_r+0x6a>
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	b01d      	add	sp, #116	; 0x74
 800fc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc1e:	4b7b      	ldr	r3, [pc, #492]	; (800fe0c <_vfiprintf_r+0x244>)
 800fc20:	429d      	cmp	r5, r3
 800fc22:	d101      	bne.n	800fc28 <_vfiprintf_r+0x60>
 800fc24:	68b5      	ldr	r5, [r6, #8]
 800fc26:	e7df      	b.n	800fbe8 <_vfiprintf_r+0x20>
 800fc28:	4b79      	ldr	r3, [pc, #484]	; (800fe10 <_vfiprintf_r+0x248>)
 800fc2a:	429d      	cmp	r5, r3
 800fc2c:	bf08      	it	eq
 800fc2e:	68f5      	ldreq	r5, [r6, #12]
 800fc30:	e7da      	b.n	800fbe8 <_vfiprintf_r+0x20>
 800fc32:	89ab      	ldrh	r3, [r5, #12]
 800fc34:	0598      	lsls	r0, r3, #22
 800fc36:	d4ed      	bmi.n	800fc14 <_vfiprintf_r+0x4c>
 800fc38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc3a:	f7ff fc70 	bl	800f51e <__retarget_lock_release_recursive>
 800fc3e:	e7e9      	b.n	800fc14 <_vfiprintf_r+0x4c>
 800fc40:	2300      	movs	r3, #0
 800fc42:	9309      	str	r3, [sp, #36]	; 0x24
 800fc44:	2320      	movs	r3, #32
 800fc46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc4e:	2330      	movs	r3, #48	; 0x30
 800fc50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe14 <_vfiprintf_r+0x24c>
 800fc54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc58:	f04f 0901 	mov.w	r9, #1
 800fc5c:	4623      	mov	r3, r4
 800fc5e:	469a      	mov	sl, r3
 800fc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc64:	b10a      	cbz	r2, 800fc6a <_vfiprintf_r+0xa2>
 800fc66:	2a25      	cmp	r2, #37	; 0x25
 800fc68:	d1f9      	bne.n	800fc5e <_vfiprintf_r+0x96>
 800fc6a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc6e:	d00b      	beq.n	800fc88 <_vfiprintf_r+0xc0>
 800fc70:	465b      	mov	r3, fp
 800fc72:	4622      	mov	r2, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	4630      	mov	r0, r6
 800fc78:	f7ff ff93 	bl	800fba2 <__sfputs_r>
 800fc7c:	3001      	adds	r0, #1
 800fc7e:	f000 80aa 	beq.w	800fdd6 <_vfiprintf_r+0x20e>
 800fc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc84:	445a      	add	r2, fp
 800fc86:	9209      	str	r2, [sp, #36]	; 0x24
 800fc88:	f89a 3000 	ldrb.w	r3, [sl]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f000 80a2 	beq.w	800fdd6 <_vfiprintf_r+0x20e>
 800fc92:	2300      	movs	r3, #0
 800fc94:	f04f 32ff 	mov.w	r2, #4294967295
 800fc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc9c:	f10a 0a01 	add.w	sl, sl, #1
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	9307      	str	r3, [sp, #28]
 800fca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fca8:	931a      	str	r3, [sp, #104]	; 0x68
 800fcaa:	4654      	mov	r4, sl
 800fcac:	2205      	movs	r2, #5
 800fcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb2:	4858      	ldr	r0, [pc, #352]	; (800fe14 <_vfiprintf_r+0x24c>)
 800fcb4:	f7f0 fb44 	bl	8000340 <memchr>
 800fcb8:	9a04      	ldr	r2, [sp, #16]
 800fcba:	b9d8      	cbnz	r0, 800fcf4 <_vfiprintf_r+0x12c>
 800fcbc:	06d1      	lsls	r1, r2, #27
 800fcbe:	bf44      	itt	mi
 800fcc0:	2320      	movmi	r3, #32
 800fcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcc6:	0713      	lsls	r3, r2, #28
 800fcc8:	bf44      	itt	mi
 800fcca:	232b      	movmi	r3, #43	; 0x2b
 800fccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd4:	2b2a      	cmp	r3, #42	; 0x2a
 800fcd6:	d015      	beq.n	800fd04 <_vfiprintf_r+0x13c>
 800fcd8:	9a07      	ldr	r2, [sp, #28]
 800fcda:	4654      	mov	r4, sl
 800fcdc:	2000      	movs	r0, #0
 800fcde:	f04f 0c0a 	mov.w	ip, #10
 800fce2:	4621      	mov	r1, r4
 800fce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce8:	3b30      	subs	r3, #48	; 0x30
 800fcea:	2b09      	cmp	r3, #9
 800fcec:	d94e      	bls.n	800fd8c <_vfiprintf_r+0x1c4>
 800fcee:	b1b0      	cbz	r0, 800fd1e <_vfiprintf_r+0x156>
 800fcf0:	9207      	str	r2, [sp, #28]
 800fcf2:	e014      	b.n	800fd1e <_vfiprintf_r+0x156>
 800fcf4:	eba0 0308 	sub.w	r3, r0, r8
 800fcf8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	9304      	str	r3, [sp, #16]
 800fd00:	46a2      	mov	sl, r4
 800fd02:	e7d2      	b.n	800fcaa <_vfiprintf_r+0xe2>
 800fd04:	9b03      	ldr	r3, [sp, #12]
 800fd06:	1d19      	adds	r1, r3, #4
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	9103      	str	r1, [sp, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	bfbb      	ittet	lt
 800fd10:	425b      	neglt	r3, r3
 800fd12:	f042 0202 	orrlt.w	r2, r2, #2
 800fd16:	9307      	strge	r3, [sp, #28]
 800fd18:	9307      	strlt	r3, [sp, #28]
 800fd1a:	bfb8      	it	lt
 800fd1c:	9204      	strlt	r2, [sp, #16]
 800fd1e:	7823      	ldrb	r3, [r4, #0]
 800fd20:	2b2e      	cmp	r3, #46	; 0x2e
 800fd22:	d10c      	bne.n	800fd3e <_vfiprintf_r+0x176>
 800fd24:	7863      	ldrb	r3, [r4, #1]
 800fd26:	2b2a      	cmp	r3, #42	; 0x2a
 800fd28:	d135      	bne.n	800fd96 <_vfiprintf_r+0x1ce>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	1d1a      	adds	r2, r3, #4
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	9203      	str	r2, [sp, #12]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bfb8      	it	lt
 800fd36:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd3a:	3402      	adds	r4, #2
 800fd3c:	9305      	str	r3, [sp, #20]
 800fd3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe24 <_vfiprintf_r+0x25c>
 800fd42:	7821      	ldrb	r1, [r4, #0]
 800fd44:	2203      	movs	r2, #3
 800fd46:	4650      	mov	r0, sl
 800fd48:	f7f0 fafa 	bl	8000340 <memchr>
 800fd4c:	b140      	cbz	r0, 800fd60 <_vfiprintf_r+0x198>
 800fd4e:	2340      	movs	r3, #64	; 0x40
 800fd50:	eba0 000a 	sub.w	r0, r0, sl
 800fd54:	fa03 f000 	lsl.w	r0, r3, r0
 800fd58:	9b04      	ldr	r3, [sp, #16]
 800fd5a:	4303      	orrs	r3, r0
 800fd5c:	3401      	adds	r4, #1
 800fd5e:	9304      	str	r3, [sp, #16]
 800fd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd64:	482c      	ldr	r0, [pc, #176]	; (800fe18 <_vfiprintf_r+0x250>)
 800fd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd6a:	2206      	movs	r2, #6
 800fd6c:	f7f0 fae8 	bl	8000340 <memchr>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	d03f      	beq.n	800fdf4 <_vfiprintf_r+0x22c>
 800fd74:	4b29      	ldr	r3, [pc, #164]	; (800fe1c <_vfiprintf_r+0x254>)
 800fd76:	bb1b      	cbnz	r3, 800fdc0 <_vfiprintf_r+0x1f8>
 800fd78:	9b03      	ldr	r3, [sp, #12]
 800fd7a:	3307      	adds	r3, #7
 800fd7c:	f023 0307 	bic.w	r3, r3, #7
 800fd80:	3308      	adds	r3, #8
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd86:	443b      	add	r3, r7
 800fd88:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8a:	e767      	b.n	800fc5c <_vfiprintf_r+0x94>
 800fd8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd90:	460c      	mov	r4, r1
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7a5      	b.n	800fce2 <_vfiprintf_r+0x11a>
 800fd96:	2300      	movs	r3, #0
 800fd98:	3401      	adds	r4, #1
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	f04f 0c0a 	mov.w	ip, #10
 800fda2:	4620      	mov	r0, r4
 800fda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fda8:	3a30      	subs	r2, #48	; 0x30
 800fdaa:	2a09      	cmp	r2, #9
 800fdac:	d903      	bls.n	800fdb6 <_vfiprintf_r+0x1ee>
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d0c5      	beq.n	800fd3e <_vfiprintf_r+0x176>
 800fdb2:	9105      	str	r1, [sp, #20]
 800fdb4:	e7c3      	b.n	800fd3e <_vfiprintf_r+0x176>
 800fdb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdba:	4604      	mov	r4, r0
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e7f0      	b.n	800fda2 <_vfiprintf_r+0x1da>
 800fdc0:	ab03      	add	r3, sp, #12
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	4b16      	ldr	r3, [pc, #88]	; (800fe20 <_vfiprintf_r+0x258>)
 800fdc8:	a904      	add	r1, sp, #16
 800fdca:	4630      	mov	r0, r6
 800fdcc:	f3af 8000 	nop.w
 800fdd0:	4607      	mov	r7, r0
 800fdd2:	1c78      	adds	r0, r7, #1
 800fdd4:	d1d6      	bne.n	800fd84 <_vfiprintf_r+0x1bc>
 800fdd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdd8:	07d9      	lsls	r1, r3, #31
 800fdda:	d405      	bmi.n	800fde8 <_vfiprintf_r+0x220>
 800fddc:	89ab      	ldrh	r3, [r5, #12]
 800fdde:	059a      	lsls	r2, r3, #22
 800fde0:	d402      	bmi.n	800fde8 <_vfiprintf_r+0x220>
 800fde2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde4:	f7ff fb9b 	bl	800f51e <__retarget_lock_release_recursive>
 800fde8:	89ab      	ldrh	r3, [r5, #12]
 800fdea:	065b      	lsls	r3, r3, #25
 800fdec:	f53f af12 	bmi.w	800fc14 <_vfiprintf_r+0x4c>
 800fdf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdf2:	e711      	b.n	800fc18 <_vfiprintf_r+0x50>
 800fdf4:	ab03      	add	r3, sp, #12
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	462a      	mov	r2, r5
 800fdfa:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <_vfiprintf_r+0x258>)
 800fdfc:	a904      	add	r1, sp, #16
 800fdfe:	4630      	mov	r0, r6
 800fe00:	f000 f880 	bl	800ff04 <_printf_i>
 800fe04:	e7e4      	b.n	800fdd0 <_vfiprintf_r+0x208>
 800fe06:	bf00      	nop
 800fe08:	08010bd4 	.word	0x08010bd4
 800fe0c:	08010bf4 	.word	0x08010bf4
 800fe10:	08010bb4 	.word	0x08010bb4
 800fe14:	08010c18 	.word	0x08010c18
 800fe18:	08010c1e 	.word	0x08010c1e
 800fe1c:	00000000 	.word	0x00000000
 800fe20:	0800fba3 	.word	0x0800fba3
 800fe24:	08010c14 	.word	0x08010c14

0800fe28 <_printf_common>:
 800fe28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	4699      	mov	r9, r3
 800fe30:	688a      	ldr	r2, [r1, #8]
 800fe32:	690b      	ldr	r3, [r1, #16]
 800fe34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	bfb8      	it	lt
 800fe3c:	4613      	movlt	r3, r2
 800fe3e:	6033      	str	r3, [r6, #0]
 800fe40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe44:	4607      	mov	r7, r0
 800fe46:	460c      	mov	r4, r1
 800fe48:	b10a      	cbz	r2, 800fe4e <_printf_common+0x26>
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	6033      	str	r3, [r6, #0]
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	0699      	lsls	r1, r3, #26
 800fe52:	bf42      	ittt	mi
 800fe54:	6833      	ldrmi	r3, [r6, #0]
 800fe56:	3302      	addmi	r3, #2
 800fe58:	6033      	strmi	r3, [r6, #0]
 800fe5a:	6825      	ldr	r5, [r4, #0]
 800fe5c:	f015 0506 	ands.w	r5, r5, #6
 800fe60:	d106      	bne.n	800fe70 <_printf_common+0x48>
 800fe62:	f104 0a19 	add.w	sl, r4, #25
 800fe66:	68e3      	ldr	r3, [r4, #12]
 800fe68:	6832      	ldr	r2, [r6, #0]
 800fe6a:	1a9b      	subs	r3, r3, r2
 800fe6c:	42ab      	cmp	r3, r5
 800fe6e:	dc26      	bgt.n	800febe <_printf_common+0x96>
 800fe70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe74:	1e13      	subs	r3, r2, #0
 800fe76:	6822      	ldr	r2, [r4, #0]
 800fe78:	bf18      	it	ne
 800fe7a:	2301      	movne	r3, #1
 800fe7c:	0692      	lsls	r2, r2, #26
 800fe7e:	d42b      	bmi.n	800fed8 <_printf_common+0xb0>
 800fe80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe84:	4649      	mov	r1, r9
 800fe86:	4638      	mov	r0, r7
 800fe88:	47c0      	blx	r8
 800fe8a:	3001      	adds	r0, #1
 800fe8c:	d01e      	beq.n	800fecc <_printf_common+0xa4>
 800fe8e:	6823      	ldr	r3, [r4, #0]
 800fe90:	68e5      	ldr	r5, [r4, #12]
 800fe92:	6832      	ldr	r2, [r6, #0]
 800fe94:	f003 0306 	and.w	r3, r3, #6
 800fe98:	2b04      	cmp	r3, #4
 800fe9a:	bf08      	it	eq
 800fe9c:	1aad      	subeq	r5, r5, r2
 800fe9e:	68a3      	ldr	r3, [r4, #8]
 800fea0:	6922      	ldr	r2, [r4, #16]
 800fea2:	bf0c      	ite	eq
 800fea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fea8:	2500      	movne	r5, #0
 800feaa:	4293      	cmp	r3, r2
 800feac:	bfc4      	itt	gt
 800feae:	1a9b      	subgt	r3, r3, r2
 800feb0:	18ed      	addgt	r5, r5, r3
 800feb2:	2600      	movs	r6, #0
 800feb4:	341a      	adds	r4, #26
 800feb6:	42b5      	cmp	r5, r6
 800feb8:	d11a      	bne.n	800fef0 <_printf_common+0xc8>
 800feba:	2000      	movs	r0, #0
 800febc:	e008      	b.n	800fed0 <_printf_common+0xa8>
 800febe:	2301      	movs	r3, #1
 800fec0:	4652      	mov	r2, sl
 800fec2:	4649      	mov	r1, r9
 800fec4:	4638      	mov	r0, r7
 800fec6:	47c0      	blx	r8
 800fec8:	3001      	adds	r0, #1
 800feca:	d103      	bne.n	800fed4 <_printf_common+0xac>
 800fecc:	f04f 30ff 	mov.w	r0, #4294967295
 800fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed4:	3501      	adds	r5, #1
 800fed6:	e7c6      	b.n	800fe66 <_printf_common+0x3e>
 800fed8:	18e1      	adds	r1, r4, r3
 800feda:	1c5a      	adds	r2, r3, #1
 800fedc:	2030      	movs	r0, #48	; 0x30
 800fede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fee2:	4422      	add	r2, r4
 800fee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800feec:	3302      	adds	r3, #2
 800feee:	e7c7      	b.n	800fe80 <_printf_common+0x58>
 800fef0:	2301      	movs	r3, #1
 800fef2:	4622      	mov	r2, r4
 800fef4:	4649      	mov	r1, r9
 800fef6:	4638      	mov	r0, r7
 800fef8:	47c0      	blx	r8
 800fefa:	3001      	adds	r0, #1
 800fefc:	d0e6      	beq.n	800fecc <_printf_common+0xa4>
 800fefe:	3601      	adds	r6, #1
 800ff00:	e7d9      	b.n	800feb6 <_printf_common+0x8e>
	...

0800ff04 <_printf_i>:
 800ff04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff08:	7e0f      	ldrb	r7, [r1, #24]
 800ff0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff0c:	2f78      	cmp	r7, #120	; 0x78
 800ff0e:	4691      	mov	r9, r2
 800ff10:	4680      	mov	r8, r0
 800ff12:	460c      	mov	r4, r1
 800ff14:	469a      	mov	sl, r3
 800ff16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff1a:	d807      	bhi.n	800ff2c <_printf_i+0x28>
 800ff1c:	2f62      	cmp	r7, #98	; 0x62
 800ff1e:	d80a      	bhi.n	800ff36 <_printf_i+0x32>
 800ff20:	2f00      	cmp	r7, #0
 800ff22:	f000 80d8 	beq.w	80100d6 <_printf_i+0x1d2>
 800ff26:	2f58      	cmp	r7, #88	; 0x58
 800ff28:	f000 80a3 	beq.w	8010072 <_printf_i+0x16e>
 800ff2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff34:	e03a      	b.n	800ffac <_printf_i+0xa8>
 800ff36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff3a:	2b15      	cmp	r3, #21
 800ff3c:	d8f6      	bhi.n	800ff2c <_printf_i+0x28>
 800ff3e:	a101      	add	r1, pc, #4	; (adr r1, 800ff44 <_printf_i+0x40>)
 800ff40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff44:	0800ff9d 	.word	0x0800ff9d
 800ff48:	0800ffb1 	.word	0x0800ffb1
 800ff4c:	0800ff2d 	.word	0x0800ff2d
 800ff50:	0800ff2d 	.word	0x0800ff2d
 800ff54:	0800ff2d 	.word	0x0800ff2d
 800ff58:	0800ff2d 	.word	0x0800ff2d
 800ff5c:	0800ffb1 	.word	0x0800ffb1
 800ff60:	0800ff2d 	.word	0x0800ff2d
 800ff64:	0800ff2d 	.word	0x0800ff2d
 800ff68:	0800ff2d 	.word	0x0800ff2d
 800ff6c:	0800ff2d 	.word	0x0800ff2d
 800ff70:	080100bd 	.word	0x080100bd
 800ff74:	0800ffe1 	.word	0x0800ffe1
 800ff78:	0801009f 	.word	0x0801009f
 800ff7c:	0800ff2d 	.word	0x0800ff2d
 800ff80:	0800ff2d 	.word	0x0800ff2d
 800ff84:	080100df 	.word	0x080100df
 800ff88:	0800ff2d 	.word	0x0800ff2d
 800ff8c:	0800ffe1 	.word	0x0800ffe1
 800ff90:	0800ff2d 	.word	0x0800ff2d
 800ff94:	0800ff2d 	.word	0x0800ff2d
 800ff98:	080100a7 	.word	0x080100a7
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	1d1a      	adds	r2, r3, #4
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	602a      	str	r2, [r5, #0]
 800ffa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffac:	2301      	movs	r3, #1
 800ffae:	e0a3      	b.n	80100f8 <_printf_i+0x1f4>
 800ffb0:	6820      	ldr	r0, [r4, #0]
 800ffb2:	6829      	ldr	r1, [r5, #0]
 800ffb4:	0606      	lsls	r6, r0, #24
 800ffb6:	f101 0304 	add.w	r3, r1, #4
 800ffba:	d50a      	bpl.n	800ffd2 <_printf_i+0xce>
 800ffbc:	680e      	ldr	r6, [r1, #0]
 800ffbe:	602b      	str	r3, [r5, #0]
 800ffc0:	2e00      	cmp	r6, #0
 800ffc2:	da03      	bge.n	800ffcc <_printf_i+0xc8>
 800ffc4:	232d      	movs	r3, #45	; 0x2d
 800ffc6:	4276      	negs	r6, r6
 800ffc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffcc:	485e      	ldr	r0, [pc, #376]	; (8010148 <_printf_i+0x244>)
 800ffce:	230a      	movs	r3, #10
 800ffd0:	e019      	b.n	8010006 <_printf_i+0x102>
 800ffd2:	680e      	ldr	r6, [r1, #0]
 800ffd4:	602b      	str	r3, [r5, #0]
 800ffd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ffda:	bf18      	it	ne
 800ffdc:	b236      	sxthne	r6, r6
 800ffde:	e7ef      	b.n	800ffc0 <_printf_i+0xbc>
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	6820      	ldr	r0, [r4, #0]
 800ffe4:	1d19      	adds	r1, r3, #4
 800ffe6:	6029      	str	r1, [r5, #0]
 800ffe8:	0601      	lsls	r1, r0, #24
 800ffea:	d501      	bpl.n	800fff0 <_printf_i+0xec>
 800ffec:	681e      	ldr	r6, [r3, #0]
 800ffee:	e002      	b.n	800fff6 <_printf_i+0xf2>
 800fff0:	0646      	lsls	r6, r0, #25
 800fff2:	d5fb      	bpl.n	800ffec <_printf_i+0xe8>
 800fff4:	881e      	ldrh	r6, [r3, #0]
 800fff6:	4854      	ldr	r0, [pc, #336]	; (8010148 <_printf_i+0x244>)
 800fff8:	2f6f      	cmp	r7, #111	; 0x6f
 800fffa:	bf0c      	ite	eq
 800fffc:	2308      	moveq	r3, #8
 800fffe:	230a      	movne	r3, #10
 8010000:	2100      	movs	r1, #0
 8010002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010006:	6865      	ldr	r5, [r4, #4]
 8010008:	60a5      	str	r5, [r4, #8]
 801000a:	2d00      	cmp	r5, #0
 801000c:	bfa2      	ittt	ge
 801000e:	6821      	ldrge	r1, [r4, #0]
 8010010:	f021 0104 	bicge.w	r1, r1, #4
 8010014:	6021      	strge	r1, [r4, #0]
 8010016:	b90e      	cbnz	r6, 801001c <_printf_i+0x118>
 8010018:	2d00      	cmp	r5, #0
 801001a:	d04d      	beq.n	80100b8 <_printf_i+0x1b4>
 801001c:	4615      	mov	r5, r2
 801001e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010022:	fb03 6711 	mls	r7, r3, r1, r6
 8010026:	5dc7      	ldrb	r7, [r0, r7]
 8010028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801002c:	4637      	mov	r7, r6
 801002e:	42bb      	cmp	r3, r7
 8010030:	460e      	mov	r6, r1
 8010032:	d9f4      	bls.n	801001e <_printf_i+0x11a>
 8010034:	2b08      	cmp	r3, #8
 8010036:	d10b      	bne.n	8010050 <_printf_i+0x14c>
 8010038:	6823      	ldr	r3, [r4, #0]
 801003a:	07de      	lsls	r6, r3, #31
 801003c:	d508      	bpl.n	8010050 <_printf_i+0x14c>
 801003e:	6923      	ldr	r3, [r4, #16]
 8010040:	6861      	ldr	r1, [r4, #4]
 8010042:	4299      	cmp	r1, r3
 8010044:	bfde      	ittt	le
 8010046:	2330      	movle	r3, #48	; 0x30
 8010048:	f805 3c01 	strble.w	r3, [r5, #-1]
 801004c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010050:	1b52      	subs	r2, r2, r5
 8010052:	6122      	str	r2, [r4, #16]
 8010054:	f8cd a000 	str.w	sl, [sp]
 8010058:	464b      	mov	r3, r9
 801005a:	aa03      	add	r2, sp, #12
 801005c:	4621      	mov	r1, r4
 801005e:	4640      	mov	r0, r8
 8010060:	f7ff fee2 	bl	800fe28 <_printf_common>
 8010064:	3001      	adds	r0, #1
 8010066:	d14c      	bne.n	8010102 <_printf_i+0x1fe>
 8010068:	f04f 30ff 	mov.w	r0, #4294967295
 801006c:	b004      	add	sp, #16
 801006e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010072:	4835      	ldr	r0, [pc, #212]	; (8010148 <_printf_i+0x244>)
 8010074:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010078:	6829      	ldr	r1, [r5, #0]
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010080:	6029      	str	r1, [r5, #0]
 8010082:	061d      	lsls	r5, r3, #24
 8010084:	d514      	bpl.n	80100b0 <_printf_i+0x1ac>
 8010086:	07df      	lsls	r7, r3, #31
 8010088:	bf44      	itt	mi
 801008a:	f043 0320 	orrmi.w	r3, r3, #32
 801008e:	6023      	strmi	r3, [r4, #0]
 8010090:	b91e      	cbnz	r6, 801009a <_printf_i+0x196>
 8010092:	6823      	ldr	r3, [r4, #0]
 8010094:	f023 0320 	bic.w	r3, r3, #32
 8010098:	6023      	str	r3, [r4, #0]
 801009a:	2310      	movs	r3, #16
 801009c:	e7b0      	b.n	8010000 <_printf_i+0xfc>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	f043 0320 	orr.w	r3, r3, #32
 80100a4:	6023      	str	r3, [r4, #0]
 80100a6:	2378      	movs	r3, #120	; 0x78
 80100a8:	4828      	ldr	r0, [pc, #160]	; (801014c <_printf_i+0x248>)
 80100aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100ae:	e7e3      	b.n	8010078 <_printf_i+0x174>
 80100b0:	0659      	lsls	r1, r3, #25
 80100b2:	bf48      	it	mi
 80100b4:	b2b6      	uxthmi	r6, r6
 80100b6:	e7e6      	b.n	8010086 <_printf_i+0x182>
 80100b8:	4615      	mov	r5, r2
 80100ba:	e7bb      	b.n	8010034 <_printf_i+0x130>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	6826      	ldr	r6, [r4, #0]
 80100c0:	6961      	ldr	r1, [r4, #20]
 80100c2:	1d18      	adds	r0, r3, #4
 80100c4:	6028      	str	r0, [r5, #0]
 80100c6:	0635      	lsls	r5, r6, #24
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	d501      	bpl.n	80100d0 <_printf_i+0x1cc>
 80100cc:	6019      	str	r1, [r3, #0]
 80100ce:	e002      	b.n	80100d6 <_printf_i+0x1d2>
 80100d0:	0670      	lsls	r0, r6, #25
 80100d2:	d5fb      	bpl.n	80100cc <_printf_i+0x1c8>
 80100d4:	8019      	strh	r1, [r3, #0]
 80100d6:	2300      	movs	r3, #0
 80100d8:	6123      	str	r3, [r4, #16]
 80100da:	4615      	mov	r5, r2
 80100dc:	e7ba      	b.n	8010054 <_printf_i+0x150>
 80100de:	682b      	ldr	r3, [r5, #0]
 80100e0:	1d1a      	adds	r2, r3, #4
 80100e2:	602a      	str	r2, [r5, #0]
 80100e4:	681d      	ldr	r5, [r3, #0]
 80100e6:	6862      	ldr	r2, [r4, #4]
 80100e8:	2100      	movs	r1, #0
 80100ea:	4628      	mov	r0, r5
 80100ec:	f7f0 f928 	bl	8000340 <memchr>
 80100f0:	b108      	cbz	r0, 80100f6 <_printf_i+0x1f2>
 80100f2:	1b40      	subs	r0, r0, r5
 80100f4:	6060      	str	r0, [r4, #4]
 80100f6:	6863      	ldr	r3, [r4, #4]
 80100f8:	6123      	str	r3, [r4, #16]
 80100fa:	2300      	movs	r3, #0
 80100fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010100:	e7a8      	b.n	8010054 <_printf_i+0x150>
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	462a      	mov	r2, r5
 8010106:	4649      	mov	r1, r9
 8010108:	4640      	mov	r0, r8
 801010a:	47d0      	blx	sl
 801010c:	3001      	adds	r0, #1
 801010e:	d0ab      	beq.n	8010068 <_printf_i+0x164>
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	079b      	lsls	r3, r3, #30
 8010114:	d413      	bmi.n	801013e <_printf_i+0x23a>
 8010116:	68e0      	ldr	r0, [r4, #12]
 8010118:	9b03      	ldr	r3, [sp, #12]
 801011a:	4298      	cmp	r0, r3
 801011c:	bfb8      	it	lt
 801011e:	4618      	movlt	r0, r3
 8010120:	e7a4      	b.n	801006c <_printf_i+0x168>
 8010122:	2301      	movs	r3, #1
 8010124:	4632      	mov	r2, r6
 8010126:	4649      	mov	r1, r9
 8010128:	4640      	mov	r0, r8
 801012a:	47d0      	blx	sl
 801012c:	3001      	adds	r0, #1
 801012e:	d09b      	beq.n	8010068 <_printf_i+0x164>
 8010130:	3501      	adds	r5, #1
 8010132:	68e3      	ldr	r3, [r4, #12]
 8010134:	9903      	ldr	r1, [sp, #12]
 8010136:	1a5b      	subs	r3, r3, r1
 8010138:	42ab      	cmp	r3, r5
 801013a:	dcf2      	bgt.n	8010122 <_printf_i+0x21e>
 801013c:	e7eb      	b.n	8010116 <_printf_i+0x212>
 801013e:	2500      	movs	r5, #0
 8010140:	f104 0619 	add.w	r6, r4, #25
 8010144:	e7f5      	b.n	8010132 <_printf_i+0x22e>
 8010146:	bf00      	nop
 8010148:	08010c25 	.word	0x08010c25
 801014c:	08010c36 	.word	0x08010c36

08010150 <_scanf_chars>:
 8010150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010154:	4615      	mov	r5, r2
 8010156:	688a      	ldr	r2, [r1, #8]
 8010158:	4680      	mov	r8, r0
 801015a:	460c      	mov	r4, r1
 801015c:	b932      	cbnz	r2, 801016c <_scanf_chars+0x1c>
 801015e:	698a      	ldr	r2, [r1, #24]
 8010160:	2a00      	cmp	r2, #0
 8010162:	bf0c      	ite	eq
 8010164:	2201      	moveq	r2, #1
 8010166:	f04f 32ff 	movne.w	r2, #4294967295
 801016a:	608a      	str	r2, [r1, #8]
 801016c:	6822      	ldr	r2, [r4, #0]
 801016e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8010200 <_scanf_chars+0xb0>
 8010172:	06d1      	lsls	r1, r2, #27
 8010174:	bf5f      	itttt	pl
 8010176:	681a      	ldrpl	r2, [r3, #0]
 8010178:	1d11      	addpl	r1, r2, #4
 801017a:	6019      	strpl	r1, [r3, #0]
 801017c:	6816      	ldrpl	r6, [r2, #0]
 801017e:	2700      	movs	r7, #0
 8010180:	69a0      	ldr	r0, [r4, #24]
 8010182:	b188      	cbz	r0, 80101a8 <_scanf_chars+0x58>
 8010184:	2801      	cmp	r0, #1
 8010186:	d107      	bne.n	8010198 <_scanf_chars+0x48>
 8010188:	682a      	ldr	r2, [r5, #0]
 801018a:	7811      	ldrb	r1, [r2, #0]
 801018c:	6962      	ldr	r2, [r4, #20]
 801018e:	5c52      	ldrb	r2, [r2, r1]
 8010190:	b952      	cbnz	r2, 80101a8 <_scanf_chars+0x58>
 8010192:	2f00      	cmp	r7, #0
 8010194:	d031      	beq.n	80101fa <_scanf_chars+0xaa>
 8010196:	e022      	b.n	80101de <_scanf_chars+0x8e>
 8010198:	2802      	cmp	r0, #2
 801019a:	d120      	bne.n	80101de <_scanf_chars+0x8e>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80101a4:	071b      	lsls	r3, r3, #28
 80101a6:	d41a      	bmi.n	80101de <_scanf_chars+0x8e>
 80101a8:	6823      	ldr	r3, [r4, #0]
 80101aa:	06da      	lsls	r2, r3, #27
 80101ac:	bf5e      	ittt	pl
 80101ae:	682b      	ldrpl	r3, [r5, #0]
 80101b0:	781b      	ldrbpl	r3, [r3, #0]
 80101b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80101b6:	682a      	ldr	r2, [r5, #0]
 80101b8:	686b      	ldr	r3, [r5, #4]
 80101ba:	3201      	adds	r2, #1
 80101bc:	602a      	str	r2, [r5, #0]
 80101be:	68a2      	ldr	r2, [r4, #8]
 80101c0:	3b01      	subs	r3, #1
 80101c2:	3a01      	subs	r2, #1
 80101c4:	606b      	str	r3, [r5, #4]
 80101c6:	3701      	adds	r7, #1
 80101c8:	60a2      	str	r2, [r4, #8]
 80101ca:	b142      	cbz	r2, 80101de <_scanf_chars+0x8e>
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	dcd7      	bgt.n	8010180 <_scanf_chars+0x30>
 80101d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80101d4:	4629      	mov	r1, r5
 80101d6:	4640      	mov	r0, r8
 80101d8:	4798      	blx	r3
 80101da:	2800      	cmp	r0, #0
 80101dc:	d0d0      	beq.n	8010180 <_scanf_chars+0x30>
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	f013 0310 	ands.w	r3, r3, #16
 80101e4:	d105      	bne.n	80101f2 <_scanf_chars+0xa2>
 80101e6:	68e2      	ldr	r2, [r4, #12]
 80101e8:	3201      	adds	r2, #1
 80101ea:	60e2      	str	r2, [r4, #12]
 80101ec:	69a2      	ldr	r2, [r4, #24]
 80101ee:	b102      	cbz	r2, 80101f2 <_scanf_chars+0xa2>
 80101f0:	7033      	strb	r3, [r6, #0]
 80101f2:	6923      	ldr	r3, [r4, #16]
 80101f4:	443b      	add	r3, r7
 80101f6:	6123      	str	r3, [r4, #16]
 80101f8:	2000      	movs	r0, #0
 80101fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101fe:	bf00      	nop
 8010200:	08010c63 	.word	0x08010c63

08010204 <_scanf_i>:
 8010204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010208:	4698      	mov	r8, r3
 801020a:	4b76      	ldr	r3, [pc, #472]	; (80103e4 <_scanf_i+0x1e0>)
 801020c:	460c      	mov	r4, r1
 801020e:	4682      	mov	sl, r0
 8010210:	4616      	mov	r6, r2
 8010212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010216:	b087      	sub	sp, #28
 8010218:	ab03      	add	r3, sp, #12
 801021a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801021e:	4b72      	ldr	r3, [pc, #456]	; (80103e8 <_scanf_i+0x1e4>)
 8010220:	69a1      	ldr	r1, [r4, #24]
 8010222:	4a72      	ldr	r2, [pc, #456]	; (80103ec <_scanf_i+0x1e8>)
 8010224:	2903      	cmp	r1, #3
 8010226:	bf18      	it	ne
 8010228:	461a      	movne	r2, r3
 801022a:	68a3      	ldr	r3, [r4, #8]
 801022c:	9201      	str	r2, [sp, #4]
 801022e:	1e5a      	subs	r2, r3, #1
 8010230:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010234:	bf88      	it	hi
 8010236:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801023a:	4627      	mov	r7, r4
 801023c:	bf82      	ittt	hi
 801023e:	eb03 0905 	addhi.w	r9, r3, r5
 8010242:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010246:	60a3      	strhi	r3, [r4, #8]
 8010248:	f857 3b1c 	ldr.w	r3, [r7], #28
 801024c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010250:	bf98      	it	ls
 8010252:	f04f 0900 	movls.w	r9, #0
 8010256:	6023      	str	r3, [r4, #0]
 8010258:	463d      	mov	r5, r7
 801025a:	f04f 0b00 	mov.w	fp, #0
 801025e:	6831      	ldr	r1, [r6, #0]
 8010260:	ab03      	add	r3, sp, #12
 8010262:	7809      	ldrb	r1, [r1, #0]
 8010264:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010268:	2202      	movs	r2, #2
 801026a:	f7f0 f869 	bl	8000340 <memchr>
 801026e:	b328      	cbz	r0, 80102bc <_scanf_i+0xb8>
 8010270:	f1bb 0f01 	cmp.w	fp, #1
 8010274:	d159      	bne.n	801032a <_scanf_i+0x126>
 8010276:	6862      	ldr	r2, [r4, #4]
 8010278:	b92a      	cbnz	r2, 8010286 <_scanf_i+0x82>
 801027a:	6822      	ldr	r2, [r4, #0]
 801027c:	2308      	movs	r3, #8
 801027e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010282:	6063      	str	r3, [r4, #4]
 8010284:	6022      	str	r2, [r4, #0]
 8010286:	6822      	ldr	r2, [r4, #0]
 8010288:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801028c:	6022      	str	r2, [r4, #0]
 801028e:	68a2      	ldr	r2, [r4, #8]
 8010290:	1e51      	subs	r1, r2, #1
 8010292:	60a1      	str	r1, [r4, #8]
 8010294:	b192      	cbz	r2, 80102bc <_scanf_i+0xb8>
 8010296:	6832      	ldr	r2, [r6, #0]
 8010298:	1c51      	adds	r1, r2, #1
 801029a:	6031      	str	r1, [r6, #0]
 801029c:	7812      	ldrb	r2, [r2, #0]
 801029e:	f805 2b01 	strb.w	r2, [r5], #1
 80102a2:	6872      	ldr	r2, [r6, #4]
 80102a4:	3a01      	subs	r2, #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	6072      	str	r2, [r6, #4]
 80102aa:	dc07      	bgt.n	80102bc <_scanf_i+0xb8>
 80102ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80102b0:	4631      	mov	r1, r6
 80102b2:	4650      	mov	r0, sl
 80102b4:	4790      	blx	r2
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f040 8085 	bne.w	80103c6 <_scanf_i+0x1c2>
 80102bc:	f10b 0b01 	add.w	fp, fp, #1
 80102c0:	f1bb 0f03 	cmp.w	fp, #3
 80102c4:	d1cb      	bne.n	801025e <_scanf_i+0x5a>
 80102c6:	6863      	ldr	r3, [r4, #4]
 80102c8:	b90b      	cbnz	r3, 80102ce <_scanf_i+0xca>
 80102ca:	230a      	movs	r3, #10
 80102cc:	6063      	str	r3, [r4, #4]
 80102ce:	6863      	ldr	r3, [r4, #4]
 80102d0:	4947      	ldr	r1, [pc, #284]	; (80103f0 <_scanf_i+0x1ec>)
 80102d2:	6960      	ldr	r0, [r4, #20]
 80102d4:	1ac9      	subs	r1, r1, r3
 80102d6:	f000 f8f7 	bl	80104c8 <__sccl>
 80102da:	f04f 0b00 	mov.w	fp, #0
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	6822      	ldr	r2, [r4, #0]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d03d      	beq.n	8010362 <_scanf_i+0x15e>
 80102e6:	6831      	ldr	r1, [r6, #0]
 80102e8:	6960      	ldr	r0, [r4, #20]
 80102ea:	f891 c000 	ldrb.w	ip, [r1]
 80102ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d035      	beq.n	8010362 <_scanf_i+0x15e>
 80102f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80102fa:	d124      	bne.n	8010346 <_scanf_i+0x142>
 80102fc:	0510      	lsls	r0, r2, #20
 80102fe:	d522      	bpl.n	8010346 <_scanf_i+0x142>
 8010300:	f10b 0b01 	add.w	fp, fp, #1
 8010304:	f1b9 0f00 	cmp.w	r9, #0
 8010308:	d003      	beq.n	8010312 <_scanf_i+0x10e>
 801030a:	3301      	adds	r3, #1
 801030c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010310:	60a3      	str	r3, [r4, #8]
 8010312:	6873      	ldr	r3, [r6, #4]
 8010314:	3b01      	subs	r3, #1
 8010316:	2b00      	cmp	r3, #0
 8010318:	6073      	str	r3, [r6, #4]
 801031a:	dd1b      	ble.n	8010354 <_scanf_i+0x150>
 801031c:	6833      	ldr	r3, [r6, #0]
 801031e:	3301      	adds	r3, #1
 8010320:	6033      	str	r3, [r6, #0]
 8010322:	68a3      	ldr	r3, [r4, #8]
 8010324:	3b01      	subs	r3, #1
 8010326:	60a3      	str	r3, [r4, #8]
 8010328:	e7d9      	b.n	80102de <_scanf_i+0xda>
 801032a:	f1bb 0f02 	cmp.w	fp, #2
 801032e:	d1ae      	bne.n	801028e <_scanf_i+0x8a>
 8010330:	6822      	ldr	r2, [r4, #0]
 8010332:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010336:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801033a:	d1bf      	bne.n	80102bc <_scanf_i+0xb8>
 801033c:	2310      	movs	r3, #16
 801033e:	6063      	str	r3, [r4, #4]
 8010340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010344:	e7a2      	b.n	801028c <_scanf_i+0x88>
 8010346:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801034a:	6022      	str	r2, [r4, #0]
 801034c:	780b      	ldrb	r3, [r1, #0]
 801034e:	f805 3b01 	strb.w	r3, [r5], #1
 8010352:	e7de      	b.n	8010312 <_scanf_i+0x10e>
 8010354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010358:	4631      	mov	r1, r6
 801035a:	4650      	mov	r0, sl
 801035c:	4798      	blx	r3
 801035e:	2800      	cmp	r0, #0
 8010360:	d0df      	beq.n	8010322 <_scanf_i+0x11e>
 8010362:	6823      	ldr	r3, [r4, #0]
 8010364:	05db      	lsls	r3, r3, #23
 8010366:	d50d      	bpl.n	8010384 <_scanf_i+0x180>
 8010368:	42bd      	cmp	r5, r7
 801036a:	d909      	bls.n	8010380 <_scanf_i+0x17c>
 801036c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010374:	4632      	mov	r2, r6
 8010376:	4650      	mov	r0, sl
 8010378:	4798      	blx	r3
 801037a:	f105 39ff 	add.w	r9, r5, #4294967295
 801037e:	464d      	mov	r5, r9
 8010380:	42bd      	cmp	r5, r7
 8010382:	d02d      	beq.n	80103e0 <_scanf_i+0x1dc>
 8010384:	6822      	ldr	r2, [r4, #0]
 8010386:	f012 0210 	ands.w	r2, r2, #16
 801038a:	d113      	bne.n	80103b4 <_scanf_i+0x1b0>
 801038c:	702a      	strb	r2, [r5, #0]
 801038e:	6863      	ldr	r3, [r4, #4]
 8010390:	9e01      	ldr	r6, [sp, #4]
 8010392:	4639      	mov	r1, r7
 8010394:	4650      	mov	r0, sl
 8010396:	47b0      	blx	r6
 8010398:	6821      	ldr	r1, [r4, #0]
 801039a:	f8d8 3000 	ldr.w	r3, [r8]
 801039e:	f011 0f20 	tst.w	r1, #32
 80103a2:	d013      	beq.n	80103cc <_scanf_i+0x1c8>
 80103a4:	1d1a      	adds	r2, r3, #4
 80103a6:	f8c8 2000 	str.w	r2, [r8]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	6018      	str	r0, [r3, #0]
 80103ae:	68e3      	ldr	r3, [r4, #12]
 80103b0:	3301      	adds	r3, #1
 80103b2:	60e3      	str	r3, [r4, #12]
 80103b4:	1bed      	subs	r5, r5, r7
 80103b6:	44ab      	add	fp, r5
 80103b8:	6925      	ldr	r5, [r4, #16]
 80103ba:	445d      	add	r5, fp
 80103bc:	6125      	str	r5, [r4, #16]
 80103be:	2000      	movs	r0, #0
 80103c0:	b007      	add	sp, #28
 80103c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c6:	f04f 0b00 	mov.w	fp, #0
 80103ca:	e7ca      	b.n	8010362 <_scanf_i+0x15e>
 80103cc:	1d1a      	adds	r2, r3, #4
 80103ce:	f8c8 2000 	str.w	r2, [r8]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f011 0f01 	tst.w	r1, #1
 80103d8:	bf14      	ite	ne
 80103da:	8018      	strhne	r0, [r3, #0]
 80103dc:	6018      	streq	r0, [r3, #0]
 80103de:	e7e6      	b.n	80103ae <_scanf_i+0x1aa>
 80103e0:	2001      	movs	r0, #1
 80103e2:	e7ed      	b.n	80103c0 <_scanf_i+0x1bc>
 80103e4:	08010a14 	.word	0x08010a14
 80103e8:	08010725 	.word	0x08010725
 80103ec:	0801063d 	.word	0x0801063d
 80103f0:	08010c60 	.word	0x08010c60

080103f4 <_putc_r>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	460d      	mov	r5, r1
 80103f8:	4614      	mov	r4, r2
 80103fa:	4606      	mov	r6, r0
 80103fc:	b118      	cbz	r0, 8010406 <_putc_r+0x12>
 80103fe:	6983      	ldr	r3, [r0, #24]
 8010400:	b90b      	cbnz	r3, 8010406 <_putc_r+0x12>
 8010402:	f7fe ffed 	bl	800f3e0 <__sinit>
 8010406:	4b1c      	ldr	r3, [pc, #112]	; (8010478 <_putc_r+0x84>)
 8010408:	429c      	cmp	r4, r3
 801040a:	d124      	bne.n	8010456 <_putc_r+0x62>
 801040c:	6874      	ldr	r4, [r6, #4]
 801040e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010410:	07d8      	lsls	r0, r3, #31
 8010412:	d405      	bmi.n	8010420 <_putc_r+0x2c>
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	0599      	lsls	r1, r3, #22
 8010418:	d402      	bmi.n	8010420 <_putc_r+0x2c>
 801041a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801041c:	f7ff f87e 	bl	800f51c <__retarget_lock_acquire_recursive>
 8010420:	68a3      	ldr	r3, [r4, #8]
 8010422:	3b01      	subs	r3, #1
 8010424:	2b00      	cmp	r3, #0
 8010426:	60a3      	str	r3, [r4, #8]
 8010428:	da05      	bge.n	8010436 <_putc_r+0x42>
 801042a:	69a2      	ldr	r2, [r4, #24]
 801042c:	4293      	cmp	r3, r2
 801042e:	db1c      	blt.n	801046a <_putc_r+0x76>
 8010430:	b2eb      	uxtb	r3, r5
 8010432:	2b0a      	cmp	r3, #10
 8010434:	d019      	beq.n	801046a <_putc_r+0x76>
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	1c5a      	adds	r2, r3, #1
 801043a:	6022      	str	r2, [r4, #0]
 801043c:	701d      	strb	r5, [r3, #0]
 801043e:	b2ed      	uxtb	r5, r5
 8010440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010442:	07da      	lsls	r2, r3, #31
 8010444:	d405      	bmi.n	8010452 <_putc_r+0x5e>
 8010446:	89a3      	ldrh	r3, [r4, #12]
 8010448:	059b      	lsls	r3, r3, #22
 801044a:	d402      	bmi.n	8010452 <_putc_r+0x5e>
 801044c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801044e:	f7ff f866 	bl	800f51e <__retarget_lock_release_recursive>
 8010452:	4628      	mov	r0, r5
 8010454:	bd70      	pop	{r4, r5, r6, pc}
 8010456:	4b09      	ldr	r3, [pc, #36]	; (801047c <_putc_r+0x88>)
 8010458:	429c      	cmp	r4, r3
 801045a:	d101      	bne.n	8010460 <_putc_r+0x6c>
 801045c:	68b4      	ldr	r4, [r6, #8]
 801045e:	e7d6      	b.n	801040e <_putc_r+0x1a>
 8010460:	4b07      	ldr	r3, [pc, #28]	; (8010480 <_putc_r+0x8c>)
 8010462:	429c      	cmp	r4, r3
 8010464:	bf08      	it	eq
 8010466:	68f4      	ldreq	r4, [r6, #12]
 8010468:	e7d1      	b.n	801040e <_putc_r+0x1a>
 801046a:	4629      	mov	r1, r5
 801046c:	4622      	mov	r2, r4
 801046e:	4630      	mov	r0, r6
 8010470:	f7fe fdba 	bl	800efe8 <__swbuf_r>
 8010474:	4605      	mov	r5, r0
 8010476:	e7e3      	b.n	8010440 <_putc_r+0x4c>
 8010478:	08010bd4 	.word	0x08010bd4
 801047c:	08010bf4 	.word	0x08010bf4
 8010480:	08010bb4 	.word	0x08010bb4

08010484 <_read_r>:
 8010484:	b538      	push	{r3, r4, r5, lr}
 8010486:	4d07      	ldr	r5, [pc, #28]	; (80104a4 <_read_r+0x20>)
 8010488:	4604      	mov	r4, r0
 801048a:	4608      	mov	r0, r1
 801048c:	4611      	mov	r1, r2
 801048e:	2200      	movs	r2, #0
 8010490:	602a      	str	r2, [r5, #0]
 8010492:	461a      	mov	r2, r3
 8010494:	f7f1 fd00 	bl	8001e98 <_read>
 8010498:	1c43      	adds	r3, r0, #1
 801049a:	d102      	bne.n	80104a2 <_read_r+0x1e>
 801049c:	682b      	ldr	r3, [r5, #0]
 801049e:	b103      	cbz	r3, 80104a2 <_read_r+0x1e>
 80104a0:	6023      	str	r3, [r4, #0]
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	24001488 	.word	0x24001488

080104a8 <_sbrk_r>:
 80104a8:	b538      	push	{r3, r4, r5, lr}
 80104aa:	4d06      	ldr	r5, [pc, #24]	; (80104c4 <_sbrk_r+0x1c>)
 80104ac:	2300      	movs	r3, #0
 80104ae:	4604      	mov	r4, r0
 80104b0:	4608      	mov	r0, r1
 80104b2:	602b      	str	r3, [r5, #0]
 80104b4:	f7f1 fd5e 	bl	8001f74 <_sbrk>
 80104b8:	1c43      	adds	r3, r0, #1
 80104ba:	d102      	bne.n	80104c2 <_sbrk_r+0x1a>
 80104bc:	682b      	ldr	r3, [r5, #0]
 80104be:	b103      	cbz	r3, 80104c2 <_sbrk_r+0x1a>
 80104c0:	6023      	str	r3, [r4, #0]
 80104c2:	bd38      	pop	{r3, r4, r5, pc}
 80104c4:	24001488 	.word	0x24001488

080104c8 <__sccl>:
 80104c8:	b570      	push	{r4, r5, r6, lr}
 80104ca:	780b      	ldrb	r3, [r1, #0]
 80104cc:	4604      	mov	r4, r0
 80104ce:	2b5e      	cmp	r3, #94	; 0x5e
 80104d0:	bf0b      	itete	eq
 80104d2:	784b      	ldrbeq	r3, [r1, #1]
 80104d4:	1c48      	addne	r0, r1, #1
 80104d6:	1c88      	addeq	r0, r1, #2
 80104d8:	2200      	movne	r2, #0
 80104da:	bf08      	it	eq
 80104dc:	2201      	moveq	r2, #1
 80104de:	1e61      	subs	r1, r4, #1
 80104e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80104e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80104e8:	42a9      	cmp	r1, r5
 80104ea:	d1fb      	bne.n	80104e4 <__sccl+0x1c>
 80104ec:	b90b      	cbnz	r3, 80104f2 <__sccl+0x2a>
 80104ee:	3801      	subs	r0, #1
 80104f0:	bd70      	pop	{r4, r5, r6, pc}
 80104f2:	f082 0201 	eor.w	r2, r2, #1
 80104f6:	54e2      	strb	r2, [r4, r3]
 80104f8:	4605      	mov	r5, r0
 80104fa:	4628      	mov	r0, r5
 80104fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010500:	292d      	cmp	r1, #45	; 0x2d
 8010502:	d006      	beq.n	8010512 <__sccl+0x4a>
 8010504:	295d      	cmp	r1, #93	; 0x5d
 8010506:	d0f3      	beq.n	80104f0 <__sccl+0x28>
 8010508:	b909      	cbnz	r1, 801050e <__sccl+0x46>
 801050a:	4628      	mov	r0, r5
 801050c:	e7f0      	b.n	80104f0 <__sccl+0x28>
 801050e:	460b      	mov	r3, r1
 8010510:	e7f1      	b.n	80104f6 <__sccl+0x2e>
 8010512:	786e      	ldrb	r6, [r5, #1]
 8010514:	2e5d      	cmp	r6, #93	; 0x5d
 8010516:	d0fa      	beq.n	801050e <__sccl+0x46>
 8010518:	42b3      	cmp	r3, r6
 801051a:	dcf8      	bgt.n	801050e <__sccl+0x46>
 801051c:	3502      	adds	r5, #2
 801051e:	4619      	mov	r1, r3
 8010520:	3101      	adds	r1, #1
 8010522:	428e      	cmp	r6, r1
 8010524:	5462      	strb	r2, [r4, r1]
 8010526:	dcfb      	bgt.n	8010520 <__sccl+0x58>
 8010528:	1af1      	subs	r1, r6, r3
 801052a:	3901      	subs	r1, #1
 801052c:	1c58      	adds	r0, r3, #1
 801052e:	42b3      	cmp	r3, r6
 8010530:	bfa8      	it	ge
 8010532:	2100      	movge	r1, #0
 8010534:	1843      	adds	r3, r0, r1
 8010536:	e7e0      	b.n	80104fa <__sccl+0x32>

08010538 <_strtol_l.constprop.0>:
 8010538:	2b01      	cmp	r3, #1
 801053a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801053e:	d001      	beq.n	8010544 <_strtol_l.constprop.0+0xc>
 8010540:	2b24      	cmp	r3, #36	; 0x24
 8010542:	d906      	bls.n	8010552 <_strtol_l.constprop.0+0x1a>
 8010544:	f7fe fbfa 	bl	800ed3c <__errno>
 8010548:	2316      	movs	r3, #22
 801054a:	6003      	str	r3, [r0, #0]
 801054c:	2000      	movs	r0, #0
 801054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010552:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010638 <_strtol_l.constprop.0+0x100>
 8010556:	460d      	mov	r5, r1
 8010558:	462e      	mov	r6, r5
 801055a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801055e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010562:	f017 0708 	ands.w	r7, r7, #8
 8010566:	d1f7      	bne.n	8010558 <_strtol_l.constprop.0+0x20>
 8010568:	2c2d      	cmp	r4, #45	; 0x2d
 801056a:	d132      	bne.n	80105d2 <_strtol_l.constprop.0+0x9a>
 801056c:	782c      	ldrb	r4, [r5, #0]
 801056e:	2701      	movs	r7, #1
 8010570:	1cb5      	adds	r5, r6, #2
 8010572:	2b00      	cmp	r3, #0
 8010574:	d05b      	beq.n	801062e <_strtol_l.constprop.0+0xf6>
 8010576:	2b10      	cmp	r3, #16
 8010578:	d109      	bne.n	801058e <_strtol_l.constprop.0+0x56>
 801057a:	2c30      	cmp	r4, #48	; 0x30
 801057c:	d107      	bne.n	801058e <_strtol_l.constprop.0+0x56>
 801057e:	782c      	ldrb	r4, [r5, #0]
 8010580:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010584:	2c58      	cmp	r4, #88	; 0x58
 8010586:	d14d      	bne.n	8010624 <_strtol_l.constprop.0+0xec>
 8010588:	786c      	ldrb	r4, [r5, #1]
 801058a:	2310      	movs	r3, #16
 801058c:	3502      	adds	r5, #2
 801058e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010592:	f108 38ff 	add.w	r8, r8, #4294967295
 8010596:	f04f 0c00 	mov.w	ip, #0
 801059a:	fbb8 f9f3 	udiv	r9, r8, r3
 801059e:	4666      	mov	r6, ip
 80105a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80105a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80105a8:	f1be 0f09 	cmp.w	lr, #9
 80105ac:	d816      	bhi.n	80105dc <_strtol_l.constprop.0+0xa4>
 80105ae:	4674      	mov	r4, lr
 80105b0:	42a3      	cmp	r3, r4
 80105b2:	dd24      	ble.n	80105fe <_strtol_l.constprop.0+0xc6>
 80105b4:	f1bc 0f00 	cmp.w	ip, #0
 80105b8:	db1e      	blt.n	80105f8 <_strtol_l.constprop.0+0xc0>
 80105ba:	45b1      	cmp	r9, r6
 80105bc:	d31c      	bcc.n	80105f8 <_strtol_l.constprop.0+0xc0>
 80105be:	d101      	bne.n	80105c4 <_strtol_l.constprop.0+0x8c>
 80105c0:	45a2      	cmp	sl, r4
 80105c2:	db19      	blt.n	80105f8 <_strtol_l.constprop.0+0xc0>
 80105c4:	fb06 4603 	mla	r6, r6, r3, r4
 80105c8:	f04f 0c01 	mov.w	ip, #1
 80105cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105d0:	e7e8      	b.n	80105a4 <_strtol_l.constprop.0+0x6c>
 80105d2:	2c2b      	cmp	r4, #43	; 0x2b
 80105d4:	bf04      	itt	eq
 80105d6:	782c      	ldrbeq	r4, [r5, #0]
 80105d8:	1cb5      	addeq	r5, r6, #2
 80105da:	e7ca      	b.n	8010572 <_strtol_l.constprop.0+0x3a>
 80105dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80105e0:	f1be 0f19 	cmp.w	lr, #25
 80105e4:	d801      	bhi.n	80105ea <_strtol_l.constprop.0+0xb2>
 80105e6:	3c37      	subs	r4, #55	; 0x37
 80105e8:	e7e2      	b.n	80105b0 <_strtol_l.constprop.0+0x78>
 80105ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80105ee:	f1be 0f19 	cmp.w	lr, #25
 80105f2:	d804      	bhi.n	80105fe <_strtol_l.constprop.0+0xc6>
 80105f4:	3c57      	subs	r4, #87	; 0x57
 80105f6:	e7db      	b.n	80105b0 <_strtol_l.constprop.0+0x78>
 80105f8:	f04f 3cff 	mov.w	ip, #4294967295
 80105fc:	e7e6      	b.n	80105cc <_strtol_l.constprop.0+0x94>
 80105fe:	f1bc 0f00 	cmp.w	ip, #0
 8010602:	da05      	bge.n	8010610 <_strtol_l.constprop.0+0xd8>
 8010604:	2322      	movs	r3, #34	; 0x22
 8010606:	6003      	str	r3, [r0, #0]
 8010608:	4646      	mov	r6, r8
 801060a:	b942      	cbnz	r2, 801061e <_strtol_l.constprop.0+0xe6>
 801060c:	4630      	mov	r0, r6
 801060e:	e79e      	b.n	801054e <_strtol_l.constprop.0+0x16>
 8010610:	b107      	cbz	r7, 8010614 <_strtol_l.constprop.0+0xdc>
 8010612:	4276      	negs	r6, r6
 8010614:	2a00      	cmp	r2, #0
 8010616:	d0f9      	beq.n	801060c <_strtol_l.constprop.0+0xd4>
 8010618:	f1bc 0f00 	cmp.w	ip, #0
 801061c:	d000      	beq.n	8010620 <_strtol_l.constprop.0+0xe8>
 801061e:	1e69      	subs	r1, r5, #1
 8010620:	6011      	str	r1, [r2, #0]
 8010622:	e7f3      	b.n	801060c <_strtol_l.constprop.0+0xd4>
 8010624:	2430      	movs	r4, #48	; 0x30
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1b1      	bne.n	801058e <_strtol_l.constprop.0+0x56>
 801062a:	2308      	movs	r3, #8
 801062c:	e7af      	b.n	801058e <_strtol_l.constprop.0+0x56>
 801062e:	2c30      	cmp	r4, #48	; 0x30
 8010630:	d0a5      	beq.n	801057e <_strtol_l.constprop.0+0x46>
 8010632:	230a      	movs	r3, #10
 8010634:	e7ab      	b.n	801058e <_strtol_l.constprop.0+0x56>
 8010636:	bf00      	nop
 8010638:	08010c63 	.word	0x08010c63

0801063c <_strtol_r>:
 801063c:	f7ff bf7c 	b.w	8010538 <_strtol_l.constprop.0>

08010640 <_strtoul_l.constprop.0>:
 8010640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010644:	4f36      	ldr	r7, [pc, #216]	; (8010720 <_strtoul_l.constprop.0+0xe0>)
 8010646:	4686      	mov	lr, r0
 8010648:	460d      	mov	r5, r1
 801064a:	4628      	mov	r0, r5
 801064c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010650:	5de6      	ldrb	r6, [r4, r7]
 8010652:	f016 0608 	ands.w	r6, r6, #8
 8010656:	d1f8      	bne.n	801064a <_strtoul_l.constprop.0+0xa>
 8010658:	2c2d      	cmp	r4, #45	; 0x2d
 801065a:	d12f      	bne.n	80106bc <_strtoul_l.constprop.0+0x7c>
 801065c:	782c      	ldrb	r4, [r5, #0]
 801065e:	2601      	movs	r6, #1
 8010660:	1c85      	adds	r5, r0, #2
 8010662:	2b00      	cmp	r3, #0
 8010664:	d057      	beq.n	8010716 <_strtoul_l.constprop.0+0xd6>
 8010666:	2b10      	cmp	r3, #16
 8010668:	d109      	bne.n	801067e <_strtoul_l.constprop.0+0x3e>
 801066a:	2c30      	cmp	r4, #48	; 0x30
 801066c:	d107      	bne.n	801067e <_strtoul_l.constprop.0+0x3e>
 801066e:	7828      	ldrb	r0, [r5, #0]
 8010670:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010674:	2858      	cmp	r0, #88	; 0x58
 8010676:	d149      	bne.n	801070c <_strtoul_l.constprop.0+0xcc>
 8010678:	786c      	ldrb	r4, [r5, #1]
 801067a:	2310      	movs	r3, #16
 801067c:	3502      	adds	r5, #2
 801067e:	f04f 38ff 	mov.w	r8, #4294967295
 8010682:	2700      	movs	r7, #0
 8010684:	fbb8 f8f3 	udiv	r8, r8, r3
 8010688:	fb03 f908 	mul.w	r9, r3, r8
 801068c:	ea6f 0909 	mvn.w	r9, r9
 8010690:	4638      	mov	r0, r7
 8010692:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8010696:	f1bc 0f09 	cmp.w	ip, #9
 801069a:	d814      	bhi.n	80106c6 <_strtoul_l.constprop.0+0x86>
 801069c:	4664      	mov	r4, ip
 801069e:	42a3      	cmp	r3, r4
 80106a0:	dd22      	ble.n	80106e8 <_strtoul_l.constprop.0+0xa8>
 80106a2:	2f00      	cmp	r7, #0
 80106a4:	db1d      	blt.n	80106e2 <_strtoul_l.constprop.0+0xa2>
 80106a6:	4580      	cmp	r8, r0
 80106a8:	d31b      	bcc.n	80106e2 <_strtoul_l.constprop.0+0xa2>
 80106aa:	d101      	bne.n	80106b0 <_strtoul_l.constprop.0+0x70>
 80106ac:	45a1      	cmp	r9, r4
 80106ae:	db18      	blt.n	80106e2 <_strtoul_l.constprop.0+0xa2>
 80106b0:	fb00 4003 	mla	r0, r0, r3, r4
 80106b4:	2701      	movs	r7, #1
 80106b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80106ba:	e7ea      	b.n	8010692 <_strtoul_l.constprop.0+0x52>
 80106bc:	2c2b      	cmp	r4, #43	; 0x2b
 80106be:	bf04      	itt	eq
 80106c0:	782c      	ldrbeq	r4, [r5, #0]
 80106c2:	1c85      	addeq	r5, r0, #2
 80106c4:	e7cd      	b.n	8010662 <_strtoul_l.constprop.0+0x22>
 80106c6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80106ca:	f1bc 0f19 	cmp.w	ip, #25
 80106ce:	d801      	bhi.n	80106d4 <_strtoul_l.constprop.0+0x94>
 80106d0:	3c37      	subs	r4, #55	; 0x37
 80106d2:	e7e4      	b.n	801069e <_strtoul_l.constprop.0+0x5e>
 80106d4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80106d8:	f1bc 0f19 	cmp.w	ip, #25
 80106dc:	d804      	bhi.n	80106e8 <_strtoul_l.constprop.0+0xa8>
 80106de:	3c57      	subs	r4, #87	; 0x57
 80106e0:	e7dd      	b.n	801069e <_strtoul_l.constprop.0+0x5e>
 80106e2:	f04f 37ff 	mov.w	r7, #4294967295
 80106e6:	e7e6      	b.n	80106b6 <_strtoul_l.constprop.0+0x76>
 80106e8:	2f00      	cmp	r7, #0
 80106ea:	da07      	bge.n	80106fc <_strtoul_l.constprop.0+0xbc>
 80106ec:	2322      	movs	r3, #34	; 0x22
 80106ee:	f8ce 3000 	str.w	r3, [lr]
 80106f2:	f04f 30ff 	mov.w	r0, #4294967295
 80106f6:	b932      	cbnz	r2, 8010706 <_strtoul_l.constprop.0+0xc6>
 80106f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106fc:	b106      	cbz	r6, 8010700 <_strtoul_l.constprop.0+0xc0>
 80106fe:	4240      	negs	r0, r0
 8010700:	2a00      	cmp	r2, #0
 8010702:	d0f9      	beq.n	80106f8 <_strtoul_l.constprop.0+0xb8>
 8010704:	b107      	cbz	r7, 8010708 <_strtoul_l.constprop.0+0xc8>
 8010706:	1e69      	subs	r1, r5, #1
 8010708:	6011      	str	r1, [r2, #0]
 801070a:	e7f5      	b.n	80106f8 <_strtoul_l.constprop.0+0xb8>
 801070c:	2430      	movs	r4, #48	; 0x30
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1b5      	bne.n	801067e <_strtoul_l.constprop.0+0x3e>
 8010712:	2308      	movs	r3, #8
 8010714:	e7b3      	b.n	801067e <_strtoul_l.constprop.0+0x3e>
 8010716:	2c30      	cmp	r4, #48	; 0x30
 8010718:	d0a9      	beq.n	801066e <_strtoul_l.constprop.0+0x2e>
 801071a:	230a      	movs	r3, #10
 801071c:	e7af      	b.n	801067e <_strtoul_l.constprop.0+0x3e>
 801071e:	bf00      	nop
 8010720:	08010c63 	.word	0x08010c63

08010724 <_strtoul_r>:
 8010724:	f7ff bf8c 	b.w	8010640 <_strtoul_l.constprop.0>

08010728 <__submore>:
 8010728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801072c:	460c      	mov	r4, r1
 801072e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010734:	4299      	cmp	r1, r3
 8010736:	d11d      	bne.n	8010774 <__submore+0x4c>
 8010738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801073c:	f7fe ffd4 	bl	800f6e8 <_malloc_r>
 8010740:	b918      	cbnz	r0, 801074a <__submore+0x22>
 8010742:	f04f 30ff 	mov.w	r0, #4294967295
 8010746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801074e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010750:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010754:	6360      	str	r0, [r4, #52]	; 0x34
 8010756:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801075a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801075e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8010762:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010766:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801076a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801076e:	6020      	str	r0, [r4, #0]
 8010770:	2000      	movs	r0, #0
 8010772:	e7e8      	b.n	8010746 <__submore+0x1e>
 8010774:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010776:	0077      	lsls	r7, r6, #1
 8010778:	463a      	mov	r2, r7
 801077a:	f000 f83d 	bl	80107f8 <_realloc_r>
 801077e:	4605      	mov	r5, r0
 8010780:	2800      	cmp	r0, #0
 8010782:	d0de      	beq.n	8010742 <__submore+0x1a>
 8010784:	eb00 0806 	add.w	r8, r0, r6
 8010788:	4601      	mov	r1, r0
 801078a:	4632      	mov	r2, r6
 801078c:	4640      	mov	r0, r8
 801078e:	f7fe faff 	bl	800ed90 <memcpy>
 8010792:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010796:	f8c4 8000 	str.w	r8, [r4]
 801079a:	e7e9      	b.n	8010770 <__submore+0x48>

0801079c <_fstat_r>:
 801079c:	b538      	push	{r3, r4, r5, lr}
 801079e:	4d07      	ldr	r5, [pc, #28]	; (80107bc <_fstat_r+0x20>)
 80107a0:	2300      	movs	r3, #0
 80107a2:	4604      	mov	r4, r0
 80107a4:	4608      	mov	r0, r1
 80107a6:	4611      	mov	r1, r2
 80107a8:	602b      	str	r3, [r5, #0]
 80107aa:	f7f1 fbba 	bl	8001f22 <_fstat>
 80107ae:	1c43      	adds	r3, r0, #1
 80107b0:	d102      	bne.n	80107b8 <_fstat_r+0x1c>
 80107b2:	682b      	ldr	r3, [r5, #0]
 80107b4:	b103      	cbz	r3, 80107b8 <_fstat_r+0x1c>
 80107b6:	6023      	str	r3, [r4, #0]
 80107b8:	bd38      	pop	{r3, r4, r5, pc}
 80107ba:	bf00      	nop
 80107bc:	24001488 	.word	0x24001488

080107c0 <_isatty_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4d06      	ldr	r5, [pc, #24]	; (80107dc <_isatty_r+0x1c>)
 80107c4:	2300      	movs	r3, #0
 80107c6:	4604      	mov	r4, r0
 80107c8:	4608      	mov	r0, r1
 80107ca:	602b      	str	r3, [r5, #0]
 80107cc:	f7f1 fbb9 	bl	8001f42 <_isatty>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d102      	bne.n	80107da <_isatty_r+0x1a>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	b103      	cbz	r3, 80107da <_isatty_r+0x1a>
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	bd38      	pop	{r3, r4, r5, pc}
 80107dc:	24001488 	.word	0x24001488

080107e0 <__malloc_lock>:
 80107e0:	4801      	ldr	r0, [pc, #4]	; (80107e8 <__malloc_lock+0x8>)
 80107e2:	f7fe be9b 	b.w	800f51c <__retarget_lock_acquire_recursive>
 80107e6:	bf00      	nop
 80107e8:	2400147c 	.word	0x2400147c

080107ec <__malloc_unlock>:
 80107ec:	4801      	ldr	r0, [pc, #4]	; (80107f4 <__malloc_unlock+0x8>)
 80107ee:	f7fe be96 	b.w	800f51e <__retarget_lock_release_recursive>
 80107f2:	bf00      	nop
 80107f4:	2400147c 	.word	0x2400147c

080107f8 <_realloc_r>:
 80107f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107fc:	4680      	mov	r8, r0
 80107fe:	4614      	mov	r4, r2
 8010800:	460e      	mov	r6, r1
 8010802:	b921      	cbnz	r1, 801080e <_realloc_r+0x16>
 8010804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010808:	4611      	mov	r1, r2
 801080a:	f7fe bf6d 	b.w	800f6e8 <_malloc_r>
 801080e:	b92a      	cbnz	r2, 801081c <_realloc_r+0x24>
 8010810:	f7fe fefe 	bl	800f610 <_free_r>
 8010814:	4625      	mov	r5, r4
 8010816:	4628      	mov	r0, r5
 8010818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801081c:	f000 f81b 	bl	8010856 <_malloc_usable_size_r>
 8010820:	4284      	cmp	r4, r0
 8010822:	4607      	mov	r7, r0
 8010824:	d802      	bhi.n	801082c <_realloc_r+0x34>
 8010826:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801082a:	d812      	bhi.n	8010852 <_realloc_r+0x5a>
 801082c:	4621      	mov	r1, r4
 801082e:	4640      	mov	r0, r8
 8010830:	f7fe ff5a 	bl	800f6e8 <_malloc_r>
 8010834:	4605      	mov	r5, r0
 8010836:	2800      	cmp	r0, #0
 8010838:	d0ed      	beq.n	8010816 <_realloc_r+0x1e>
 801083a:	42bc      	cmp	r4, r7
 801083c:	4622      	mov	r2, r4
 801083e:	4631      	mov	r1, r6
 8010840:	bf28      	it	cs
 8010842:	463a      	movcs	r2, r7
 8010844:	f7fe faa4 	bl	800ed90 <memcpy>
 8010848:	4631      	mov	r1, r6
 801084a:	4640      	mov	r0, r8
 801084c:	f7fe fee0 	bl	800f610 <_free_r>
 8010850:	e7e1      	b.n	8010816 <_realloc_r+0x1e>
 8010852:	4635      	mov	r5, r6
 8010854:	e7df      	b.n	8010816 <_realloc_r+0x1e>

08010856 <_malloc_usable_size_r>:
 8010856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801085a:	1f18      	subs	r0, r3, #4
 801085c:	2b00      	cmp	r3, #0
 801085e:	bfbc      	itt	lt
 8010860:	580b      	ldrlt	r3, [r1, r0]
 8010862:	18c0      	addlt	r0, r0, r3
 8010864:	4770      	bx	lr
	...

08010868 <_init>:
 8010868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086a:	bf00      	nop
 801086c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801086e:	bc08      	pop	{r3}
 8010870:	469e      	mov	lr, r3
 8010872:	4770      	bx	lr

08010874 <_fini>:
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	bf00      	nop
 8010878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801087a:	bc08      	pop	{r3}
 801087c:	469e      	mov	lr, r3
 801087e:	4770      	bx	lr
